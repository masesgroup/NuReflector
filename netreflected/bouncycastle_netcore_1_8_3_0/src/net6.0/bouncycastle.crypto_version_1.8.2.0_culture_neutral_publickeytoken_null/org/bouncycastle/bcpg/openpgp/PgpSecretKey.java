/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package org.bouncycastle.bcpg.openpgp;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import org.bouncycastle.bcpg.openpgp.PgpKeyPair;
import org.bouncycastle.bcpg.SymmetricKeyAlgorithmTag;
import org.bouncycastle.bcpg.openpgp.PgpSignatureSubpacketVector;
import org.bouncycastle.security.SecureRandom;
import org.bouncycastle.bcpg.HashAlgorithmTag;
import org.bouncycastle.bcpg.PublicKeyAlgorithmTag;
import org.bouncycastle.crypto.AsymmetricKeyParameter;
import system.DateTime;
import org.bouncycastle.bcpg.openpgp.PgpPrivateKey;
import org.bouncycastle.bcpg.openpgp.PgpSecretKey;
import system.io.Stream;
import org.bouncycastle.bcpg.openpgp.PgpPublicKey;
import org.bouncycastle.bcpg.S2k;


/**
 * The base .NET class managing Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey, BouncyCastle.Crypto, Version=1.8.2.0, Culture=neutral, PublicKeyToken=null.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey</a>
 */
public class PgpSecretKey extends NetObject  {
    /**
     * Fully assembly qualified name: BouncyCastle.Crypto, Version=1.8.2.0, Culture=neutral, PublicKeyToken=null
     */
    public static final String assemblyFullName = "BouncyCastle.Crypto, Version=1.8.2.0, Culture=neutral, PublicKeyToken=null";
    /**
     * Assembly name: BouncyCastle.Crypto
     */
    public static final String assemblyShortName = "BouncyCastle.Crypto";
    /**
     * Qualified class name: Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey
     */
    public static final String className = "Org.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public PgpSecretKey(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link PgpSecretKey}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link PgpSecretKey} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static PgpSecretKey cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new PgpSecretKey(from.getJCOInstance());
    }

    // Constructors section
    
    public PgpSecretKey() throws Throwable {
    }

    public PgpSecretKey(int certificationLevel, PgpKeyPair keyPair, java.lang.String id, SymmetricKeyAlgorithmTag encAlgorithm, boolean utf8PassPhrase, char[] passPhrase, boolean useSha1, PgpSignatureSubpacketVector hashedPackets, PgpSignatureSubpacketVector unhashedPackets, SecureRandom rand) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.IndexOutOfRangeException, org.bouncycastle.bcpg.openpgp.PgpException, org.bouncycastle.security.SecurityUtilityException, system.io.IOException, system.io.EndOfStreamException, org.bouncycastle.asn1.Asn1ParsingException, org.bouncycastle.asn1.Asn1Exception, system.FormatException, system.ArithmeticException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(certificationLevel, keyPair == null ? null : keyPair.getJCOInstance(), id, encAlgorithm == null ? null : encAlgorithm.getJCOInstance(), utf8PassPhrase, passPhrase, useSha1, hashedPackets == null ? null : hashedPackets.getJCOInstance(), unhashedPackets == null ? null : unhashedPackets.getJCOInstance(), rand == null ? null : rand.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PgpSecretKey(int certificationLevel, PgpKeyPair keyPair, java.lang.String id, SymmetricKeyAlgorithmTag encAlgorithm, byte[] rawPassPhrase, boolean useSha1, PgpSignatureSubpacketVector hashedPackets, PgpSignatureSubpacketVector unhashedPackets, SecureRandom rand) throws Throwable, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, org.bouncycastle.bcpg.openpgp.PgpException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.RankException, system.ArrayTypeMismatchException, org.bouncycastle.security.SecurityUtilityException, system.io.IOException, system.io.EndOfStreamException, org.bouncycastle.asn1.Asn1ParsingException, org.bouncycastle.asn1.Asn1Exception, system.FormatException, system.ArithmeticException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(certificationLevel, keyPair == null ? null : keyPair.getJCOInstance(), id, encAlgorithm == null ? null : encAlgorithm.getJCOInstance(), rawPassPhrase, useSha1, hashedPackets == null ? null : hashedPackets.getJCOInstance(), unhashedPackets == null ? null : unhashedPackets.getJCOInstance(), rand == null ? null : rand.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PgpSecretKey(int certificationLevel, PgpKeyPair keyPair, java.lang.String id, SymmetricKeyAlgorithmTag encAlgorithm, char[] passPhrase, boolean useSha1, PgpSignatureSubpacketVector hashedPackets, PgpSignatureSubpacketVector unhashedPackets, SecureRandom rand) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.OverflowException, system.IndexOutOfRangeException, org.bouncycastle.bcpg.openpgp.PgpException, system.PlatformNotSupportedException, system.RankException, system.ArgumentOutOfRangeException, system.ArrayTypeMismatchException, system.InvalidOperationException, org.bouncycastle.security.SecurityUtilityException, system.FormatException, system.io.IOException, system.io.EndOfStreamException, org.bouncycastle.asn1.Asn1ParsingException, org.bouncycastle.asn1.Asn1Exception, system.ArithmeticException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(certificationLevel, keyPair == null ? null : keyPair.getJCOInstance(), id, encAlgorithm == null ? null : encAlgorithm.getJCOInstance(), passPhrase, useSha1, hashedPackets == null ? null : hashedPackets.getJCOInstance(), unhashedPackets == null ? null : unhashedPackets.getJCOInstance(), rand == null ? null : rand.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PgpSecretKey(int certificationLevel, PgpKeyPair keyPair, java.lang.String id, SymmetricKeyAlgorithmTag encAlgorithm, char[] passPhrase, PgpSignatureSubpacketVector hashedPackets, PgpSignatureSubpacketVector unhashedPackets, SecureRandom rand) throws Throwable, system.OverflowException, system.ArgumentNullException, system.IndexOutOfRangeException, org.bouncycastle.bcpg.openpgp.PgpException, system.ArgumentException, system.PlatformNotSupportedException, system.InvalidOperationException, org.bouncycastle.security.SecurityUtilityException, system.ArgumentOutOfRangeException, system.FormatException, system.io.IOException, org.bouncycastle.asn1.Asn1Exception, system.ArithmeticException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(certificationLevel, keyPair == null ? null : keyPair.getJCOInstance(), id, encAlgorithm == null ? null : encAlgorithm.getJCOInstance(), passPhrase, hashedPackets == null ? null : hashedPackets.getJCOInstance(), unhashedPackets == null ? null : unhashedPackets.getJCOInstance(), rand == null ? null : rand.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PgpSecretKey(int certificationLevel, PgpKeyPair keyPair, java.lang.String id, SymmetricKeyAlgorithmTag encAlgorithm, HashAlgorithmTag hashAlgorithm, boolean utf8PassPhrase, char[] passPhrase, boolean useSha1, PgpSignatureSubpacketVector hashedPackets, PgpSignatureSubpacketVector unhashedPackets, SecureRandom rand) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.IndexOutOfRangeException, org.bouncycastle.bcpg.openpgp.PgpException, org.bouncycastle.security.SecurityUtilityException, system.io.IOException, system.io.EndOfStreamException, org.bouncycastle.asn1.Asn1ParsingException, org.bouncycastle.asn1.Asn1Exception, system.FormatException, system.ArithmeticException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(certificationLevel, keyPair == null ? null : keyPair.getJCOInstance(), id, encAlgorithm == null ? null : encAlgorithm.getJCOInstance(), hashAlgorithm == null ? null : hashAlgorithm.getJCOInstance(), utf8PassPhrase, passPhrase, useSha1, hashedPackets == null ? null : hashedPackets.getJCOInstance(), unhashedPackets == null ? null : unhashedPackets.getJCOInstance(), rand == null ? null : rand.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PgpSecretKey(int certificationLevel, PgpKeyPair keyPair, java.lang.String id, SymmetricKeyAlgorithmTag encAlgorithm, HashAlgorithmTag hashAlgorithm, byte[] rawPassPhrase, boolean useSha1, PgpSignatureSubpacketVector hashedPackets, PgpSignatureSubpacketVector unhashedPackets, SecureRandom rand) throws Throwable, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, org.bouncycastle.bcpg.openpgp.PgpException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.RankException, system.ArrayTypeMismatchException, org.bouncycastle.security.SecurityUtilityException, system.io.IOException, system.io.EndOfStreamException, org.bouncycastle.asn1.Asn1ParsingException, org.bouncycastle.asn1.Asn1Exception, system.FormatException, system.ArithmeticException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(certificationLevel, keyPair == null ? null : keyPair.getJCOInstance(), id, encAlgorithm == null ? null : encAlgorithm.getJCOInstance(), hashAlgorithm == null ? null : hashAlgorithm.getJCOInstance(), rawPassPhrase, useSha1, hashedPackets == null ? null : hashedPackets.getJCOInstance(), unhashedPackets == null ? null : unhashedPackets.getJCOInstance(), rand == null ? null : rand.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PgpSecretKey(int certificationLevel, PgpKeyPair keyPair, java.lang.String id, SymmetricKeyAlgorithmTag encAlgorithm, HashAlgorithmTag hashAlgorithm, char[] passPhrase, boolean useSha1, PgpSignatureSubpacketVector hashedPackets, PgpSignatureSubpacketVector unhashedPackets, SecureRandom rand) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.OverflowException, system.IndexOutOfRangeException, org.bouncycastle.bcpg.openpgp.PgpException, system.PlatformNotSupportedException, system.RankException, system.ArgumentOutOfRangeException, system.ArrayTypeMismatchException, system.InvalidOperationException, org.bouncycastle.security.SecurityUtilityException, system.FormatException, system.io.IOException, system.io.EndOfStreamException, org.bouncycastle.asn1.Asn1ParsingException, org.bouncycastle.asn1.Asn1Exception, system.ArithmeticException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(certificationLevel, keyPair == null ? null : keyPair.getJCOInstance(), id, encAlgorithm == null ? null : encAlgorithm.getJCOInstance(), hashAlgorithm == null ? null : hashAlgorithm.getJCOInstance(), passPhrase, useSha1, hashedPackets == null ? null : hashedPackets.getJCOInstance(), unhashedPackets == null ? null : unhashedPackets.getJCOInstance(), rand == null ? null : rand.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PgpSecretKey(int certificationLevel, PublicKeyAlgorithmTag algorithm, AsymmetricKeyParameter pubKey, AsymmetricKeyParameter privKey, DateTime time, java.lang.String id, SymmetricKeyAlgorithmTag encAlgorithm, char[] passPhrase, boolean useSha1, PgpSignatureSubpacketVector hashedPackets, PgpSignatureSubpacketVector unhashedPackets, SecureRandom rand) throws Throwable, system.ArgumentException, system.NotSupportedException, system.ArgumentNullException, system.FormatException, system.InvalidOperationException, org.bouncycastle.bcpg.openpgp.PgpException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.RankException, system.ArgumentOutOfRangeException, system.ArrayTypeMismatchException, org.bouncycastle.security.SecurityUtilityException, system.OverflowException, system.io.IOException, org.bouncycastle.asn1.Asn1Exception, system.ArithmeticException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(certificationLevel, algorithm == null ? null : algorithm.getJCOInstance(), pubKey == null ? null : pubKey.getJCOInstance(), privKey == null ? null : privKey.getJCOInstance(), time == null ? null : time.getJCOInstance(), id, encAlgorithm == null ? null : encAlgorithm.getJCOInstance(), passPhrase, useSha1, hashedPackets == null ? null : hashedPackets.getJCOInstance(), unhashedPackets == null ? null : unhashedPackets.getJCOInstance(), rand == null ? null : rand.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PgpSecretKey(int certificationLevel, PublicKeyAlgorithmTag algorithm, AsymmetricKeyParameter pubKey, AsymmetricKeyParameter privKey, DateTime time, java.lang.String id, SymmetricKeyAlgorithmTag encAlgorithm, char[] passPhrase, PgpSignatureSubpacketVector hashedPackets, PgpSignatureSubpacketVector unhashedPackets, SecureRandom rand) throws Throwable, system.ArgumentException, system.NotSupportedException, system.ArgumentNullException, system.FormatException, system.InvalidOperationException, org.bouncycastle.bcpg.openpgp.PgpException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.RankException, system.ArgumentOutOfRangeException, system.ArrayTypeMismatchException, org.bouncycastle.security.SecurityUtilityException, system.OverflowException, system.io.IOException, org.bouncycastle.asn1.Asn1Exception, system.ArithmeticException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(certificationLevel, algorithm == null ? null : algorithm.getJCOInstance(), pubKey == null ? null : pubKey.getJCOInstance(), privKey == null ? null : privKey.getJCOInstance(), time == null ? null : time.getJCOInstance(), id, encAlgorithm == null ? null : encAlgorithm.getJCOInstance(), passPhrase, hashedPackets == null ? null : hashedPackets.getJCOInstance(), unhashedPackets == null ? null : unhashedPackets.getJCOInstance(), rand == null ? null : rand.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    
    // Methods section
    
    public byte[] GetEncoded() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("GetEncoded");
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexGetEncoded = 0; indexGetEncoded < resultingArrayList.size(); indexGetEncoded++ ) {
				resultingArray[indexGetEncoded] = (byte)resultingArrayList.get(indexGetEncoded);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PgpPrivateKey ExtractPrivateKey(char[] passPhrase) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.IndexOutOfRangeException, org.bouncycastle.bcpg.openpgp.PgpException, org.bouncycastle.security.SecurityUtilityException, system.OutOfMemoryException, system.FormatException, system.io.EndOfStreamException, system.ArithmeticException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objExtractPrivateKey = (JCObject)classInstance.Invoke("ExtractPrivateKey", (java.lang.Object)passPhrase);
            return new PgpPrivateKey(objExtractPrivateKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PgpPrivateKey ExtractPrivateKey(JCORefOut dupParam0) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.IndexOutOfRangeException, org.bouncycastle.bcpg.openpgp.PgpException, org.bouncycastle.security.SecurityUtilityException, system.OutOfMemoryException, system.FormatException, system.io.EndOfStreamException, system.ArithmeticException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objExtractPrivateKey = (JCObject)classInstance.Invoke("ExtractPrivateKey", (java.lang.Object)dupParam0.getJCRefOut());
            return new PgpPrivateKey(objExtractPrivateKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PgpPrivateKey ExtractPrivateKeyRaw(byte[] rawPassPhrase) throws Throwable, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, org.bouncycastle.bcpg.openpgp.PgpException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.RankException, system.ArrayTypeMismatchException, org.bouncycastle.security.SecurityUtilityException, system.OutOfMemoryException, system.FormatException, system.io.EndOfStreamException, system.ArithmeticException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objExtractPrivateKeyRaw = (JCObject)classInstance.Invoke("ExtractPrivateKeyRaw", (java.lang.Object)rawPassPhrase);
            return new PgpPrivateKey(objExtractPrivateKeyRaw);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PgpPrivateKey ExtractPrivateKeyRaw(JCORefOut dupParam0) throws Throwable, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, org.bouncycastle.bcpg.openpgp.PgpException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.RankException, system.ArrayTypeMismatchException, org.bouncycastle.security.SecurityUtilityException, system.OutOfMemoryException, system.FormatException, system.io.EndOfStreamException, system.ArithmeticException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objExtractPrivateKeyRaw = (JCObject)classInstance.Invoke("ExtractPrivateKeyRaw", (java.lang.Object)dupParam0.getJCRefOut());
            return new PgpPrivateKey(objExtractPrivateKeyRaw);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PgpPrivateKey ExtractPrivateKeyUtf8(char[] passPhrase) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.IndexOutOfRangeException, org.bouncycastle.bcpg.openpgp.PgpException, org.bouncycastle.security.SecurityUtilityException, system.OutOfMemoryException, system.FormatException, system.io.EndOfStreamException, system.ArithmeticException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objExtractPrivateKeyUtf8 = (JCObject)classInstance.Invoke("ExtractPrivateKeyUtf8", (java.lang.Object)passPhrase);
            return new PgpPrivateKey(objExtractPrivateKeyUtf8);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PgpPrivateKey ExtractPrivateKeyUtf8(JCORefOut dupParam0) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.IndexOutOfRangeException, org.bouncycastle.bcpg.openpgp.PgpException, org.bouncycastle.security.SecurityUtilityException, system.OutOfMemoryException, system.FormatException, system.io.EndOfStreamException, system.ArithmeticException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objExtractPrivateKeyUtf8 = (JCObject)classInstance.Invoke("ExtractPrivateKeyUtf8", (java.lang.Object)dupParam0.getJCRefOut());
            return new PgpPrivateKey(objExtractPrivateKeyUtf8);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PgpSecretKey CopyWithNewPassword(PgpSecretKey key, char[] oldPassPhrase, char[] newPassPhrase, SymmetricKeyAlgorithmTag newEncAlgorithm, SecureRandom rand) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, org.bouncycastle.bcpg.openpgp.PgpException, system.IndexOutOfRangeException, org.bouncycastle.security.SecurityUtilityException, system.OutOfMemoryException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCopyWithNewPassword = (JCObject)classType.Invoke("CopyWithNewPassword", key == null ? null : key.getJCOInstance(), oldPassPhrase, newPassPhrase, newEncAlgorithm == null ? null : newEncAlgorithm.getJCOInstance(), rand == null ? null : rand.getJCOInstance());
            return new PgpSecretKey(objCopyWithNewPassword);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PgpSecretKey CopyWithNewPassword(PgpSecretKey dupParam0, JCORefOut dupParam1, JCORefOut dupParam2, SymmetricKeyAlgorithmTag dupParam3, SecureRandom dupParam4) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, org.bouncycastle.bcpg.openpgp.PgpException, system.IndexOutOfRangeException, org.bouncycastle.security.SecurityUtilityException, system.OutOfMemoryException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCopyWithNewPassword = (JCObject)classType.Invoke("CopyWithNewPassword", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut(), dupParam2.getJCRefOut(), dupParam3 == null ? null : dupParam3.getJCOInstance(), dupParam4 == null ? null : dupParam4.getJCOInstance());
            return new PgpSecretKey(objCopyWithNewPassword);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PgpSecretKey CopyWithNewPasswordRaw(PgpSecretKey key, byte[] rawOldPassPhrase, byte[] rawNewPassPhrase, SymmetricKeyAlgorithmTag newEncAlgorithm, SecureRandom rand) throws Throwable, org.bouncycastle.bcpg.openpgp.PgpException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.RankException, system.ArrayTypeMismatchException, org.bouncycastle.security.SecurityUtilityException, system.OutOfMemoryException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCopyWithNewPasswordRaw = (JCObject)classType.Invoke("CopyWithNewPasswordRaw", key == null ? null : key.getJCOInstance(), rawOldPassPhrase, rawNewPassPhrase, newEncAlgorithm == null ? null : newEncAlgorithm.getJCOInstance(), rand == null ? null : rand.getJCOInstance());
            return new PgpSecretKey(objCopyWithNewPasswordRaw);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PgpSecretKey CopyWithNewPasswordRaw(PgpSecretKey dupParam0, JCORefOut dupParam1, JCORefOut dupParam2, SymmetricKeyAlgorithmTag dupParam3, SecureRandom dupParam4) throws Throwable, org.bouncycastle.bcpg.openpgp.PgpException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ArgumentException, system.RankException, system.ArrayTypeMismatchException, org.bouncycastle.security.SecurityUtilityException, system.OutOfMemoryException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCopyWithNewPasswordRaw = (JCObject)classType.Invoke("CopyWithNewPasswordRaw", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut(), dupParam2.getJCRefOut(), dupParam3 == null ? null : dupParam3.getJCOInstance(), dupParam4 == null ? null : dupParam4.getJCOInstance());
            return new PgpSecretKey(objCopyWithNewPasswordRaw);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PgpSecretKey CopyWithNewPasswordUtf8(PgpSecretKey key, char[] oldPassPhrase, char[] newPassPhrase, SymmetricKeyAlgorithmTag newEncAlgorithm, SecureRandom rand) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, org.bouncycastle.bcpg.openpgp.PgpException, system.IndexOutOfRangeException, org.bouncycastle.security.SecurityUtilityException, system.OutOfMemoryException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCopyWithNewPasswordUtf8 = (JCObject)classType.Invoke("CopyWithNewPasswordUtf8", key == null ? null : key.getJCOInstance(), oldPassPhrase, newPassPhrase, newEncAlgorithm == null ? null : newEncAlgorithm.getJCOInstance(), rand == null ? null : rand.getJCOInstance());
            return new PgpSecretKey(objCopyWithNewPasswordUtf8);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PgpSecretKey CopyWithNewPasswordUtf8(PgpSecretKey dupParam0, JCORefOut dupParam1, JCORefOut dupParam2, SymmetricKeyAlgorithmTag dupParam3, SecureRandom dupParam4) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, org.bouncycastle.bcpg.openpgp.PgpException, system.IndexOutOfRangeException, org.bouncycastle.security.SecurityUtilityException, system.OutOfMemoryException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCopyWithNewPasswordUtf8 = (JCObject)classType.Invoke("CopyWithNewPasswordUtf8", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut(), dupParam2.getJCRefOut(), dupParam3 == null ? null : dupParam3.getJCOInstance(), dupParam4 == null ? null : dupParam4.getJCOInstance());
            return new PgpSecretKey(objCopyWithNewPasswordUtf8);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PgpSecretKey ParseSecretKeyFromSExpr(Stream inputStream, char[] passPhrase, PgpPublicKey pubKey) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.io.IOException, org.bouncycastle.bcpg.openpgp.PgpException, system.IndexOutOfRangeException, org.bouncycastle.security.SecurityUtilityException, system.FormatException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objParseSecretKeyFromSExpr = (JCObject)classType.Invoke("ParseSecretKeyFromSExpr", inputStream == null ? null : inputStream.getJCOInstance(), passPhrase, pubKey == null ? null : pubKey.getJCOInstance());
            return new PgpSecretKey(objParseSecretKeyFromSExpr);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PgpSecretKey ParseSecretKeyFromSExpr(Stream dupParam0, JCORefOut dupParam1, PgpPublicKey dupParam2) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.io.IOException, org.bouncycastle.bcpg.openpgp.PgpException, system.IndexOutOfRangeException, org.bouncycastle.security.SecurityUtilityException, system.FormatException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objParseSecretKeyFromSExpr = (JCObject)classType.Invoke("ParseSecretKeyFromSExpr", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut(), dupParam2 == null ? null : dupParam2.getJCOInstance());
            return new PgpSecretKey(objParseSecretKeyFromSExpr);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PgpSecretKey ParseSecretKeyFromSExpr(Stream inputStream, char[] passPhrase) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.io.IOException, org.bouncycastle.bcpg.openpgp.PgpException, system.FormatException, system.IndexOutOfRangeException, org.bouncycastle.security.SecurityUtilityException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objParseSecretKeyFromSExpr = (JCObject)classType.Invoke("ParseSecretKeyFromSExpr", inputStream == null ? null : inputStream.getJCOInstance(), passPhrase);
            return new PgpSecretKey(objParseSecretKeyFromSExpr);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PgpSecretKey ParseSecretKeyFromSExpr(Stream dupParam0, JCORefOut dupParam1) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.io.IOException, org.bouncycastle.bcpg.openpgp.PgpException, system.FormatException, system.IndexOutOfRangeException, org.bouncycastle.security.SecurityUtilityException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objParseSecretKeyFromSExpr = (JCObject)classType.Invoke("ParseSecretKeyFromSExpr", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut());
            return new PgpSecretKey(objParseSecretKeyFromSExpr);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PgpSecretKey ParseSecretKeyFromSExprRaw(Stream inputStream, byte[] rawPassPhrase, PgpPublicKey pubKey) throws Throwable, system.io.IOException, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, org.bouncycastle.bcpg.openpgp.PgpException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, org.bouncycastle.security.SecurityUtilityException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objParseSecretKeyFromSExprRaw = (JCObject)classType.Invoke("ParseSecretKeyFromSExprRaw", inputStream == null ? null : inputStream.getJCOInstance(), rawPassPhrase, pubKey == null ? null : pubKey.getJCOInstance());
            return new PgpSecretKey(objParseSecretKeyFromSExprRaw);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PgpSecretKey ParseSecretKeyFromSExprRaw(Stream dupParam0, JCORefOut dupParam1, PgpPublicKey dupParam2) throws Throwable, system.io.IOException, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, org.bouncycastle.bcpg.openpgp.PgpException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, org.bouncycastle.security.SecurityUtilityException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objParseSecretKeyFromSExprRaw = (JCObject)classType.Invoke("ParseSecretKeyFromSExprRaw", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut(), dupParam2 == null ? null : dupParam2.getJCOInstance());
            return new PgpSecretKey(objParseSecretKeyFromSExprRaw);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PgpSecretKey ParseSecretKeyFromSExprRaw(Stream inputStream, byte[] rawPassPhrase) throws Throwable, system.io.IOException, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentOutOfRangeException, org.bouncycastle.bcpg.openpgp.PgpException, system.FormatException, system.RankException, system.ArrayTypeMismatchException, org.bouncycastle.security.SecurityUtilityException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objParseSecretKeyFromSExprRaw = (JCObject)classType.Invoke("ParseSecretKeyFromSExprRaw", inputStream == null ? null : inputStream.getJCOInstance(), rawPassPhrase);
            return new PgpSecretKey(objParseSecretKeyFromSExprRaw);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PgpSecretKey ParseSecretKeyFromSExprRaw(Stream dupParam0, JCORefOut dupParam1) throws Throwable, system.io.IOException, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentOutOfRangeException, org.bouncycastle.bcpg.openpgp.PgpException, system.FormatException, system.RankException, system.ArrayTypeMismatchException, org.bouncycastle.security.SecurityUtilityException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objParseSecretKeyFromSExprRaw = (JCObject)classType.Invoke("ParseSecretKeyFromSExprRaw", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut());
            return new PgpSecretKey(objParseSecretKeyFromSExprRaw);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PgpSecretKey ParseSecretKeyFromSExprUtf8(Stream inputStream, char[] passPhrase, PgpPublicKey pubKey) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.io.IOException, org.bouncycastle.bcpg.openpgp.PgpException, system.IndexOutOfRangeException, org.bouncycastle.security.SecurityUtilityException, system.FormatException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objParseSecretKeyFromSExprUtf8 = (JCObject)classType.Invoke("ParseSecretKeyFromSExprUtf8", inputStream == null ? null : inputStream.getJCOInstance(), passPhrase, pubKey == null ? null : pubKey.getJCOInstance());
            return new PgpSecretKey(objParseSecretKeyFromSExprUtf8);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PgpSecretKey ParseSecretKeyFromSExprUtf8(Stream dupParam0, JCORefOut dupParam1, PgpPublicKey dupParam2) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.io.IOException, org.bouncycastle.bcpg.openpgp.PgpException, system.IndexOutOfRangeException, org.bouncycastle.security.SecurityUtilityException, system.FormatException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objParseSecretKeyFromSExprUtf8 = (JCObject)classType.Invoke("ParseSecretKeyFromSExprUtf8", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut(), dupParam2 == null ? null : dupParam2.getJCOInstance());
            return new PgpSecretKey(objParseSecretKeyFromSExprUtf8);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PgpSecretKey ParseSecretKeyFromSExprUtf8(Stream inputStream, char[] passPhrase) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.io.IOException, org.bouncycastle.bcpg.openpgp.PgpException, system.FormatException, system.IndexOutOfRangeException, org.bouncycastle.security.SecurityUtilityException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objParseSecretKeyFromSExprUtf8 = (JCObject)classType.Invoke("ParseSecretKeyFromSExprUtf8", inputStream == null ? null : inputStream.getJCOInstance(), passPhrase);
            return new PgpSecretKey(objParseSecretKeyFromSExprUtf8);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PgpSecretKey ParseSecretKeyFromSExprUtf8(Stream dupParam0, JCORefOut dupParam1) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OverflowException, system.io.IOException, org.bouncycastle.bcpg.openpgp.PgpException, system.FormatException, system.IndexOutOfRangeException, org.bouncycastle.security.SecurityUtilityException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objParseSecretKeyFromSExprUtf8 = (JCObject)classType.Invoke("ParseSecretKeyFromSExprUtf8", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut());
            return new PgpSecretKey(objParseSecretKeyFromSExprUtf8);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PgpSecretKey ReplacePublicKey(PgpSecretKey secretKey, PgpPublicKey publicKey) throws Throwable, system.ArgumentException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objReplacePublicKey = (JCObject)classType.Invoke("ReplacePublicKey", secretKey == null ? null : secretKey.getJCOInstance(), publicKey == null ? null : publicKey.getJCOInstance());
            return new PgpSecretKey(objReplacePublicKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Encode(Stream outStr) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Encode", outStr == null ? null : outStr.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public boolean getIsMasterKey() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IsMasterKey");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsPrivateKeyEmpty() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IsPrivateKeyEmpty");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsSigningKey() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IsSigningKey");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getS2kUsage() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("S2kUsage");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public long getKeyId() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (long)classInstance.Get("KeyId");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PgpPublicKey getPublicKey() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("PublicKey");
            return new PgpPublicKey(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public S2k getS2k() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("S2k");
            return new S2k(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SymmetricKeyAlgorithmTag getKeyEncryptionAlgorithm() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("KeyEncryptionAlgorithm");
            return new SymmetricKeyAlgorithmTag(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IEnumerable getUserAttributes() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("UserAttributes");
            return new IEnumerableImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IEnumerable getUserIds() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("UserIds");
            return new IEnumerableImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}