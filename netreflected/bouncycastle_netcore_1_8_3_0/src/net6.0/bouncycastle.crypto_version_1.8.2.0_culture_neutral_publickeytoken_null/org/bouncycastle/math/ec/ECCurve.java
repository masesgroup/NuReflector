/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package org.bouncycastle.math.ec;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.math.BigInteger;
import org.bouncycastle.math.ec.ECFieldElement;
import org.bouncycastle.math.ec.ECPoint;
import org.bouncycastle.math.ec.endo.ECEndomorphism;
import org.bouncycastle.math.ec.endo.ECEndomorphismImplementation;
import org.bouncycastle.math.ec.multiplier.ECMultiplier;
import org.bouncycastle.math.ec.multiplier.ECMultiplierImplementation;
import org.bouncycastle.math.ec.multiplier.PreCompInfo;
import org.bouncycastle.math.ec.multiplier.PreCompInfoImplementation;
import org.bouncycastle.math.field.IFiniteField;
import org.bouncycastle.math.field.IFiniteFieldImplementation;


/**
 * The base .NET class managing Org.BouncyCastle.Math.EC.ECCurve, BouncyCastle.Crypto, Version=1.8.2.0, Culture=neutral, PublicKeyToken=null.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Math.EC.ECCurve" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Math.EC.ECCurve</a>
 */
public class ECCurve extends NetObject  {
    /**
     * Fully assembly qualified name: BouncyCastle.Crypto, Version=1.8.2.0, Culture=neutral, PublicKeyToken=null
     */
    public static final String assemblyFullName = "BouncyCastle.Crypto, Version=1.8.2.0, Culture=neutral, PublicKeyToken=null";
    /**
     * Assembly name: BouncyCastle.Crypto
     */
    public static final String assemblyShortName = "BouncyCastle.Crypto";
    /**
     * Qualified class name: Org.BouncyCastle.Math.EC.ECCurve
     */
    public static final String className = "Org.BouncyCastle.Math.EC.ECCurve";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public ECCurve(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link ECCurve}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link ECCurve} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static ECCurve cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new ECCurve(from.getJCOInstance());
    }

    // Constructors section
    
    public ECCurve() throws Throwable {
    }

    
    // Methods section
    
    public boolean Equals(ECCurve other) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Equals", other == null ? null : other.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean IsValidFieldElement(BigInteger x) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("IsValidFieldElement", x == null ? null : x.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean SupportsCoordinateSystem(int coord) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("SupportsCoordinateSystem", coord);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int[] GetAllCoordinateSystems() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("GetAllCoordinateSystems");
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            int[] resultingArray = new int[resultingArrayList.size()];
            for(int indexGetAllCoordinateSystems = 0; indexGetAllCoordinateSystems < resultingArrayList.size(); indexGetAllCoordinateSystems++ ) {
				resultingArray[indexGetAllCoordinateSystems] = (int)resultingArrayList.get(indexGetAllCoordinateSystems);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ECFieldElement FromBigInteger(BigInteger x) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFromBigInteger = (JCObject)classInstance.Invoke("FromBigInteger", x == null ? null : x.getJCOInstance());
            return new ECFieldElement(objFromBigInteger);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ECPoint CreatePoint(BigInteger x, BigInteger y, boolean withCompression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreatePoint = (JCObject)classInstance.Invoke("CreatePoint", x == null ? null : x.getJCOInstance(), y == null ? null : y.getJCOInstance(), withCompression);
            return new ECPoint(objCreatePoint);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ECPoint CreatePoint(BigInteger x, BigInteger y) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreatePoint = (JCObject)classInstance.Invoke("CreatePoint", x == null ? null : x.getJCOInstance(), y == null ? null : y.getJCOInstance());
            return new ECPoint(objCreatePoint);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ECPoint DecodePoint(byte[] encoded) throws Throwable, system.ArgumentException, system.FormatException, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.ArithmeticException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objDecodePoint = (JCObject)classInstance.Invoke("DecodePoint", (java.lang.Object)encoded);
            return new ECPoint(objDecodePoint);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ECPoint DecodePoint(JCORefOut dupParam0) throws Throwable, system.ArgumentException, system.FormatException, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.ArithmeticException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objDecodePoint = (JCObject)classInstance.Invoke("DecodePoint", (java.lang.Object)dupParam0.getJCRefOut());
            return new ECPoint(objDecodePoint);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ECPoint ImportPoint(ECPoint p) throws Throwable, system.InvalidOperationException, system.RankException, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException, system.ArithmeticException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objImportPoint = (JCObject)classInstance.Invoke("ImportPoint", p == null ? null : p.getJCOInstance());
            return new ECPoint(objImportPoint);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ECPoint ValidatePoint(BigInteger x, BigInteger y, boolean withCompression) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException, system.ArithmeticException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objValidatePoint = (JCObject)classInstance.Invoke("ValidatePoint", x == null ? null : x.getJCOInstance(), y == null ? null : y.getJCOInstance(), withCompression);
            return new ECPoint(objValidatePoint);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ECPoint ValidatePoint(BigInteger x, BigInteger y) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException, system.ArithmeticException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objValidatePoint = (JCObject)classInstance.Invoke("ValidatePoint", x == null ? null : x.getJCOInstance(), y == null ? null : y.getJCOInstance());
            return new ECPoint(objValidatePoint);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ECEndomorphism GetEndomorphism() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetEndomorphism = (JCObject)classInstance.Invoke("GetEndomorphism");
            return new ECEndomorphismImplementation(objGetEndomorphism);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ECMultiplier GetMultiplier() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.ArgumentException, system.NotSupportedException, system.ObjectDisposedException, system.RankException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetMultiplier = (JCObject)classInstance.Invoke("GetMultiplier");
            return new ECMultiplierImplementation(objGetMultiplier);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PreCompInfo GetPreCompInfo(ECPoint point, java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetPreCompInfo = (JCObject)classInstance.Invoke("GetPreCompInfo", point == null ? null : point.getJCOInstance(), name);
            return new PreCompInfoImplementation(objGetPreCompInfo);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void NormalizeAll(ECPoint[] points, int off, int len, ECFieldElement iso) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("NormalizeAll", toObjectFromArray(points), off, len, iso == null ? null : iso.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void NormalizeAll(ECPoint[] points) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("NormalizeAll", (java.lang.Object)toObjectFromArray(points));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetPreCompInfo(ECPoint point, java.lang.String name, PreCompInfo preCompInfo) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetPreCompInfo", point == null ? null : point.getJCOInstance(), name, preCompInfo == null ? null : preCompInfo.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public int getCoordinateSystem() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("CoordinateSystem");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getFieldSize() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("FieldSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BigInteger getCofactor() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Cofactor");
            return new BigInteger(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BigInteger getOrder() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Order");
            return new BigInteger(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ECFieldElement getA() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("A");
            return new ECFieldElement(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ECFieldElement getB() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("B");
            return new ECFieldElement(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ECPoint getInfinity() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Infinity");
            return new ECPoint(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IFiniteField getField() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Field");
            return new IFiniteFieldImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}