/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package org.bouncycastle.cms;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import org.bouncycastle.cms.CmsSignedGenerator;
import org.bouncycastle.security.SecureRandom;
import org.bouncycastle.cms.CmsSignedData;
import org.bouncycastle.cms.CmsProcessable;
import org.bouncycastle.cms.CmsProcessableImplementation;
import org.bouncycastle.cms.SignerInformationStore;
import org.bouncycastle.cms.SignerInformation;
import org.bouncycastle.crypto.AsymmetricKeyParameter;
import org.bouncycastle.asn1.cms.AttributeTable;
import org.bouncycastle.cms.CmsAttributeTableGenerator;
import org.bouncycastle.cms.CmsAttributeTableGeneratorImplementation;
import org.bouncycastle.x509.X509Certificate;
import org.bouncycastle.cms.SignerInfoGenerator;


/**
 * The base .NET class managing Org.BouncyCastle.Cms.CmsSignedDataGenerator, BouncyCastle.Crypto, Version=1.8.2.0, Culture=neutral, PublicKeyToken=null.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Cms.CmsSignedDataGenerator" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Cms.CmsSignedDataGenerator</a>
 */
public class CmsSignedDataGenerator extends CmsSignedGenerator  {
    /**
     * Fully assembly qualified name: BouncyCastle.Crypto, Version=1.8.2.0, Culture=neutral, PublicKeyToken=null
     */
    public static final String assemblyFullName = "BouncyCastle.Crypto, Version=1.8.2.0, Culture=neutral, PublicKeyToken=null";
    /**
     * Assembly name: BouncyCastle.Crypto
     */
    public static final String assemblyShortName = "BouncyCastle.Crypto";
    /**
     * Qualified class name: Org.BouncyCastle.Cms.CmsSignedDataGenerator
     */
    public static final String className = "Org.BouncyCastle.Cms.CmsSignedDataGenerator";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public CmsSignedDataGenerator(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link CmsSignedDataGenerator}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link CmsSignedDataGenerator} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static CmsSignedDataGenerator cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new CmsSignedDataGenerator(from.getJCOInstance());
    }

    // Constructors section
    
    public CmsSignedDataGenerator() throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentException, system.InvalidOperationException, system.IndexOutOfRangeException, system.RankException, system.ArrayTypeMismatchException, org.bouncycastle.security.SecurityUtilityException, system.OverflowException, system.ObjectDisposedException, system.threading.AbandonedMutexException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CmsSignedDataGenerator(SecureRandom rand) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(rand == null ? null : rand.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    public CmsSignedData Generate(CmsProcessable content, boolean encapsulate) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.FormatException, org.bouncycastle.security.SecurityUtilityException, org.bouncycastle.cms.CmsException, system.io.IOException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGenerate = (JCObject)classInstance.Invoke("Generate", content == null ? null : content.getJCOInstance(), encapsulate);
            return new CmsSignedData(objGenerate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CmsSignedData Generate(CmsProcessable content) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.FormatException, org.bouncycastle.security.SecurityUtilityException, org.bouncycastle.cms.CmsException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGenerate = (JCObject)classInstance.Invoke("Generate", content == null ? null : content.getJCOInstance());
            return new CmsSignedData(objGenerate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CmsSignedData Generate(java.lang.String signedContentType, CmsProcessable content, boolean encapsulate) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.FormatException, system.InvalidCastException, org.bouncycastle.security.SecurityUtilityException, org.bouncycastle.cms.CmsException, system.io.IOException, org.bouncycastle.asn1.Asn1Exception {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGenerate = (JCObject)classInstance.Invoke("Generate", signedContentType, content == null ? null : content.getJCOInstance(), encapsulate);
            return new CmsSignedData(objGenerate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SignerInformationStore GenerateCounterSigners(SignerInformation signer) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.IndexOutOfRangeException, system.InvalidOperationException, system.FormatException, system.ArgumentOutOfRangeException, system.ArgumentException, system.RankException, system.ArrayTypeMismatchException, org.bouncycastle.security.SecurityUtilityException, org.bouncycastle.cms.CmsException, system.io.IOException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGenerateCounterSigners = (JCObject)classInstance.Invoke("GenerateCounterSigners", signer == null ? null : signer.getJCOInstance());
            return new SignerInformationStore(objGenerateCounterSigners);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddSigner(AsymmetricKeyParameter privateKey, byte[] subjectKeyID, java.lang.String digestOID, AttributeTable signedAttr, AttributeTable unsignedAttr) throws Throwable, system.ArgumentException, system.NotSupportedException, system.ArgumentNullException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddSigner", privateKey == null ? null : privateKey.getJCOInstance(), subjectKeyID, digestOID, signedAttr == null ? null : signedAttr.getJCOInstance(), unsignedAttr == null ? null : unsignedAttr.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddSigner(AsymmetricKeyParameter dupParam0, JCORefOut dupParam1, java.lang.String dupParam2, AttributeTable dupParam3, AttributeTable dupParam4) throws Throwable, system.ArgumentException, system.NotSupportedException, system.ArgumentNullException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddSigner", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut(), dupParam2, dupParam3 == null ? null : dupParam3.getJCOInstance(), dupParam4 == null ? null : dupParam4.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddSigner(AsymmetricKeyParameter privateKey, byte[] subjectKeyID, java.lang.String digestOID, CmsAttributeTableGenerator signedAttrGen, CmsAttributeTableGenerator unsignedAttrGen) throws Throwable, system.ArgumentException, system.NotSupportedException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddSigner", privateKey == null ? null : privateKey.getJCOInstance(), subjectKeyID, digestOID, signedAttrGen == null ? null : signedAttrGen.getJCOInstance(), unsignedAttrGen == null ? null : unsignedAttrGen.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddSigner(AsymmetricKeyParameter dupParam0, JCORefOut dupParam1, java.lang.String dupParam2, CmsAttributeTableGenerator dupParam3, CmsAttributeTableGenerator dupParam4) throws Throwable, system.ArgumentException, system.NotSupportedException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddSigner", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut(), dupParam2, dupParam3 == null ? null : dupParam3.getJCOInstance(), dupParam4 == null ? null : dupParam4.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddSigner(AsymmetricKeyParameter privateKey, byte[] subjectKeyID, java.lang.String encryptionOID, java.lang.String digestOID, AttributeTable signedAttr, AttributeTable unsignedAttr) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddSigner", privateKey == null ? null : privateKey.getJCOInstance(), subjectKeyID, encryptionOID, digestOID, signedAttr == null ? null : signedAttr.getJCOInstance(), unsignedAttr == null ? null : unsignedAttr.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddSigner(AsymmetricKeyParameter dupParam0, JCORefOut dupParam1, java.lang.String dupParam2, java.lang.String dupParam3, AttributeTable dupParam4, AttributeTable dupParam5) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddSigner", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut(), dupParam2, dupParam3, dupParam4 == null ? null : dupParam4.getJCOInstance(), dupParam5 == null ? null : dupParam5.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddSigner(AsymmetricKeyParameter privateKey, byte[] subjectKeyID, java.lang.String encryptionOID, java.lang.String digestOID, CmsAttributeTableGenerator signedAttrGen, CmsAttributeTableGenerator unsignedAttrGen) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddSigner", privateKey == null ? null : privateKey.getJCOInstance(), subjectKeyID, encryptionOID, digestOID, signedAttrGen == null ? null : signedAttrGen.getJCOInstance(), unsignedAttrGen == null ? null : unsignedAttrGen.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddSigner(AsymmetricKeyParameter dupParam0, JCORefOut dupParam1, java.lang.String dupParam2, java.lang.String dupParam3, CmsAttributeTableGenerator dupParam4, CmsAttributeTableGenerator dupParam5) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddSigner", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut(), dupParam2, dupParam3, dupParam4 == null ? null : dupParam4.getJCOInstance(), dupParam5 == null ? null : dupParam5.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddSigner(AsymmetricKeyParameter privateKey, byte[] subjectKeyID, java.lang.String encryptionOID, java.lang.String digestOID) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddSigner", privateKey == null ? null : privateKey.getJCOInstance(), subjectKeyID, encryptionOID, digestOID);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddSigner(AsymmetricKeyParameter dupParam0, JCORefOut dupParam1, java.lang.String dupParam2, java.lang.String dupParam3) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddSigner", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut(), dupParam2, dupParam3);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddSigner(AsymmetricKeyParameter privateKey, byte[] subjectKeyID, java.lang.String digestOID) throws Throwable, system.ArgumentException, system.NotSupportedException, system.ArgumentNullException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddSigner", privateKey == null ? null : privateKey.getJCOInstance(), subjectKeyID, digestOID);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddSigner(AsymmetricKeyParameter dupParam0, JCORefOut dupParam1, java.lang.String dupParam2) throws Throwable, system.ArgumentException, system.NotSupportedException, system.ArgumentNullException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddSigner", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut(), dupParam2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddSigner(AsymmetricKeyParameter privateKey, X509Certificate cert, java.lang.String digestOID, AttributeTable signedAttr, AttributeTable unsignedAttr) throws Throwable, system.ArgumentException, system.NotSupportedException, system.ArgumentNullException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.io.IOException, system.io.EndOfStreamException, org.bouncycastle.asn1.Asn1Exception, system.InvalidOperationException, org.bouncycastle.asn1.Asn1ParsingException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddSigner", privateKey == null ? null : privateKey.getJCOInstance(), cert == null ? null : cert.getJCOInstance(), digestOID, signedAttr == null ? null : signedAttr.getJCOInstance(), unsignedAttr == null ? null : unsignedAttr.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddSigner(AsymmetricKeyParameter privateKey, X509Certificate cert, java.lang.String digestOID, CmsAttributeTableGenerator signedAttrGen, CmsAttributeTableGenerator unsignedAttrGen) throws Throwable, system.ArgumentException, system.NotSupportedException, system.ArgumentNullException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.io.IOException, system.io.EndOfStreamException, org.bouncycastle.asn1.Asn1Exception, system.InvalidOperationException, org.bouncycastle.asn1.Asn1ParsingException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddSigner", privateKey == null ? null : privateKey.getJCOInstance(), cert == null ? null : cert.getJCOInstance(), digestOID, signedAttrGen == null ? null : signedAttrGen.getJCOInstance(), unsignedAttrGen == null ? null : unsignedAttrGen.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddSigner(AsymmetricKeyParameter privateKey, X509Certificate cert, java.lang.String encryptionOID, java.lang.String digestOID, AttributeTable signedAttr, AttributeTable unsignedAttr) throws Throwable, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentNullException, system.io.IOException, system.io.EndOfStreamException, system.IndexOutOfRangeException, org.bouncycastle.asn1.Asn1Exception, org.bouncycastle.asn1.Asn1ParsingException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddSigner", privateKey == null ? null : privateKey.getJCOInstance(), cert == null ? null : cert.getJCOInstance(), encryptionOID, digestOID, signedAttr == null ? null : signedAttr.getJCOInstance(), unsignedAttr == null ? null : unsignedAttr.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddSigner(AsymmetricKeyParameter privateKey, X509Certificate cert, java.lang.String encryptionOID, java.lang.String digestOID, CmsAttributeTableGenerator signedAttrGen, CmsAttributeTableGenerator unsignedAttrGen) throws Throwable, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentNullException, system.io.IOException, system.io.EndOfStreamException, system.IndexOutOfRangeException, org.bouncycastle.asn1.Asn1Exception, org.bouncycastle.asn1.Asn1ParsingException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddSigner", privateKey == null ? null : privateKey.getJCOInstance(), cert == null ? null : cert.getJCOInstance(), encryptionOID, digestOID, signedAttrGen == null ? null : signedAttrGen.getJCOInstance(), unsignedAttrGen == null ? null : unsignedAttrGen.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddSigner(AsymmetricKeyParameter privateKey, X509Certificate cert, java.lang.String encryptionOID, java.lang.String digestOID) throws Throwable, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.ArgumentNullException, system.io.IOException, system.io.EndOfStreamException, system.IndexOutOfRangeException, org.bouncycastle.asn1.Asn1Exception, org.bouncycastle.asn1.Asn1ParsingException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddSigner", privateKey == null ? null : privateKey.getJCOInstance(), cert == null ? null : cert.getJCOInstance(), encryptionOID, digestOID);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddSigner(AsymmetricKeyParameter privateKey, X509Certificate cert, java.lang.String digestOID) throws Throwable, system.ArgumentException, system.NotSupportedException, system.ArgumentNullException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.io.IOException, system.io.EndOfStreamException, org.bouncycastle.asn1.Asn1Exception, system.InvalidOperationException, org.bouncycastle.asn1.Asn1ParsingException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddSigner", privateKey == null ? null : privateKey.getJCOInstance(), cert == null ? null : cert.getJCOInstance(), digestOID);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddSignerInfoGenerator(SignerInfoGenerator signerInfoGenerator) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.io.IOException, org.bouncycastle.asn1.Asn1Exception {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddSignerInfoGenerator", signerInfoGenerator == null ? null : signerInfoGenerator.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}