/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package org.bouncycastle.tsp;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import org.bouncycastle.crypto.AsymmetricKeyParameter;
import org.bouncycastle.x509.X509Certificate;
import org.bouncycastle.asn1.cms.AttributeTable;
import org.bouncycastle.tsp.TimeStampToken;
import org.bouncycastle.tsp.TimeStampRequest;
import org.bouncycastle.math.BigInteger;
import system.DateTime;
import org.bouncycastle.x509.store.IX509Store;
import org.bouncycastle.x509.store.IX509StoreImplementation;
import org.bouncycastle.asn1.x509.GeneralName;


/**
 * The base .NET class managing Org.BouncyCastle.Tsp.TimeStampTokenGenerator, BouncyCastle.Crypto, Version=1.8.2.0, Culture=neutral, PublicKeyToken=null.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Tsp.TimeStampTokenGenerator" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Tsp.TimeStampTokenGenerator</a>
 */
public class TimeStampTokenGenerator extends NetObject  {
    /**
     * Fully assembly qualified name: BouncyCastle.Crypto, Version=1.8.2.0, Culture=neutral, PublicKeyToken=null
     */
    public static final String assemblyFullName = "BouncyCastle.Crypto, Version=1.8.2.0, Culture=neutral, PublicKeyToken=null";
    /**
     * Assembly name: BouncyCastle.Crypto
     */
    public static final String assemblyShortName = "BouncyCastle.Crypto";
    /**
     * Qualified class name: Org.BouncyCastle.Tsp.TimeStampTokenGenerator
     */
    public static final String className = "Org.BouncyCastle.Tsp.TimeStampTokenGenerator";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public TimeStampTokenGenerator(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link TimeStampTokenGenerator}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link TimeStampTokenGenerator} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static TimeStampTokenGenerator cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new TimeStampTokenGenerator(from.getJCOInstance());
    }

    // Constructors section
    
    public TimeStampTokenGenerator() throws Throwable {
    }

    public TimeStampTokenGenerator(AsymmetricKeyParameter key, X509Certificate cert, java.lang.String digestOID, java.lang.String tsaPolicyOID, AttributeTable signedAttr, AttributeTable unsignedAttr) throws Throwable, system.FormatException, system.ArgumentException, org.bouncycastle.tsp.TspValidationException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.io.IOException, system.io.EndOfStreamException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, org.bouncycastle.asn1.Asn1Exception, system.OutOfMemoryException, org.bouncycastle.asn1.Asn1ParsingException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.InvalidCastException, system.RankException, system.ArrayTypeMismatchException, org.bouncycastle.security.SecurityUtilityException, org.bouncycastle.tsp.TspException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(key == null ? null : key.getJCOInstance(), cert == null ? null : cert.getJCOInstance(), digestOID, tsaPolicyOID, signedAttr == null ? null : signedAttr.getJCOInstance(), unsignedAttr == null ? null : unsignedAttr.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeStampTokenGenerator(AsymmetricKeyParameter key, X509Certificate cert, java.lang.String digestOID, java.lang.String tsaPolicyOID) throws Throwable, system.FormatException, system.ArgumentException, org.bouncycastle.tsp.TspValidationException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.io.IOException, system.io.EndOfStreamException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, org.bouncycastle.asn1.Asn1Exception, system.OutOfMemoryException, system.InvalidOperationException, org.bouncycastle.asn1.Asn1ParsingException, system.NotSupportedException, system.InvalidCastException, system.RankException, system.ArrayTypeMismatchException, org.bouncycastle.security.SecurityUtilityException, org.bouncycastle.tsp.TspException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(key == null ? null : key.getJCOInstance(), cert == null ? null : cert.getJCOInstance(), digestOID, tsaPolicyOID));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    
    // Methods section
    
    public TimeStampToken Generate(TimeStampRequest request, BigInteger serialNumber, DateTime genTime) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.FormatException, system.InvalidTimeZoneException, system.security.SecurityException, system.UnauthorizedAccessException, system.io.IOException, system.OverflowException, org.bouncycastle.security.SecurityUtilityException, system.io.EndOfStreamException, org.bouncycastle.asn1.Asn1Exception, system.OutOfMemoryException, org.bouncycastle.asn1.Asn1ParsingException, org.bouncycastle.cms.CmsException, org.bouncycastle.security.certificates.CrlException, org.bouncycastle.tsp.TspValidationException, org.bouncycastle.tsp.TspException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGenerate = (JCObject)classInstance.Invoke("Generate", request == null ? null : request.getJCOInstance(), serialNumber == null ? null : serialNumber.getJCOInstance(), genTime == null ? null : genTime.getJCOInstance());
            return new TimeStampToken(objGenerate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetAccuracyMicros(int accuracyMicros) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetAccuracyMicros", accuracyMicros);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetAccuracyMillis(int accuracyMillis) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetAccuracyMillis", accuracyMillis);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetAccuracySeconds(int accuracySeconds) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetAccuracySeconds", accuracySeconds);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetCertificates(IX509Store certificates) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetCertificates", certificates == null ? null : certificates.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetCrls(IX509Store crls) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetCrls", crls == null ? null : crls.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetOrdering(boolean ordering) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetOrdering", ordering);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetTsa(GeneralName tsa) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetTsa", tsa == null ? null : tsa.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}