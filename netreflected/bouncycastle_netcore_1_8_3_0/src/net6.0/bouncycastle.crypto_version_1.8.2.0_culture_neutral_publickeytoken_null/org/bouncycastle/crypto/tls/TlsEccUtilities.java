/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package org.bouncycastle.crypto.tls;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import org.bouncycastle.crypto.parameters.ECDomainParameters;
import org.bouncycastle.crypto.parameters.ECPublicKeyParameters;
import org.bouncycastle.crypto.parameters.ECPrivateKeyParameters;
import system.collections.IDictionary;
import system.collections.IDictionaryImplementation;
import org.bouncycastle.math.BigInteger;
import org.bouncycastle.math.ec.ECPoint;
import system.io.Stream;
import org.bouncycastle.crypto.AsymmetricCipherKeyPair;
import org.bouncycastle.security.SecureRandom;
import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.math.ec.ECFieldElement;


/**
 * The base .NET class managing Org.BouncyCastle.Crypto.Tls.TlsEccUtilities, BouncyCastle.Crypto, Version=1.8.2.0, Culture=neutral, PublicKeyToken=null.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Crypto.Tls.TlsEccUtilities" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Crypto.Tls.TlsEccUtilities</a>
 */
public class TlsEccUtilities extends NetObject  {
    /**
     * Fully assembly qualified name: BouncyCastle.Crypto, Version=1.8.2.0, Culture=neutral, PublicKeyToken=null
     */
    public static final String assemblyFullName = "BouncyCastle.Crypto, Version=1.8.2.0, Culture=neutral, PublicKeyToken=null";
    /**
     * Assembly name: BouncyCastle.Crypto
     */
    public static final String assemblyShortName = "BouncyCastle.Crypto";
    /**
     * Qualified class name: Org.BouncyCastle.Crypto.Tls.TlsEccUtilities
     */
    public static final String className = "Org.BouncyCastle.Crypto.Tls.TlsEccUtilities";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public TlsEccUtilities(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link TlsEccUtilities}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link TlsEccUtilities} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static TlsEccUtilities cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new TlsEccUtilities(from.getJCOInstance());
    }

    // Constructors section
    
    public TlsEccUtilities() throws Throwable {
    }

    
    // Methods section
    
    public static boolean AreOnSameCurve(ECDomainParameters a, ECDomainParameters b) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("AreOnSameCurve", a == null ? null : a.getJCOInstance(), b == null ? null : b.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean ContainsEccCipherSuites(int[] cipherSuites) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("ContainsEccCipherSuites", (java.lang.Object)cipherSuites);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean ContainsEccCipherSuites(JCORefOut dupParam0) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("ContainsEccCipherSuites", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean HasAnySupportedNamedCurves() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("HasAnySupportedNamedCurves");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsCompressionPreferred(byte[] ecPointFormats, byte compressionFormat) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsCompressionPreferred", ecPointFormats, compressionFormat);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsCompressionPreferred(JCORefOut dupParam0, byte dupParam1) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsCompressionPreferred", dupParam0.getJCRefOut(), dupParam1);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsEccCipherSuite(int cipherSuite) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsEccCipherSuite", cipherSuite);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsSupportedNamedCurve(int namedCurve) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsSupportedNamedCurve", namedCurve);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] CalculateECDHBasicAgreement(ECPublicKeyParameters publicKey, ECPrivateKeyParameters privateKey) throws Throwable, system.InvalidOperationException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("CalculateECDHBasicAgreement", publicKey == null ? null : publicKey.getJCOInstance(), privateKey == null ? null : privateKey.getJCOInstance());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexCalculateECDHBasicAgreement = 0; indexCalculateECDHBasicAgreement < resultingArrayList.size(); indexCalculateECDHBasicAgreement++ ) {
				resultingArray[indexCalculateECDHBasicAgreement] = (byte)resultingArrayList.get(indexCalculateECDHBasicAgreement);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] CreateSupportedEllipticCurvesExtension(int[] namedCurves) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.InvalidOperationException, org.bouncycastle.crypto.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("CreateSupportedEllipticCurvesExtension", (java.lang.Object)namedCurves);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexCreateSupportedEllipticCurvesExtension = 0; indexCreateSupportedEllipticCurvesExtension < resultingArrayList.size(); indexCreateSupportedEllipticCurvesExtension++ ) {
				resultingArray[indexCreateSupportedEllipticCurvesExtension] = (byte)resultingArrayList.get(indexCreateSupportedEllipticCurvesExtension);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] CreateSupportedEllipticCurvesExtension(JCORefOut dupParam0) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.InvalidOperationException, org.bouncycastle.crypto.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("CreateSupportedEllipticCurvesExtension", (java.lang.Object)dupParam0.getJCRefOut());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexCreateSupportedEllipticCurvesExtension = 0; indexCreateSupportedEllipticCurvesExtension < resultingArrayList.size(); indexCreateSupportedEllipticCurvesExtension++ ) {
				resultingArray[indexCreateSupportedEllipticCurvesExtension] = (byte)resultingArrayList.get(indexCreateSupportedEllipticCurvesExtension);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] CreateSupportedPointFormatsExtension(byte[] ecPointFormats) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException, system.OutOfMemoryException, org.bouncycastle.crypto.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("CreateSupportedPointFormatsExtension", (java.lang.Object)ecPointFormats);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexCreateSupportedPointFormatsExtension = 0; indexCreateSupportedPointFormatsExtension < resultingArrayList.size(); indexCreateSupportedPointFormatsExtension++ ) {
				resultingArray[indexCreateSupportedPointFormatsExtension] = (byte)resultingArrayList.get(indexCreateSupportedPointFormatsExtension);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] CreateSupportedPointFormatsExtension(JCORefOut dupParam0) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException, system.OutOfMemoryException, org.bouncycastle.crypto.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("CreateSupportedPointFormatsExtension", (java.lang.Object)dupParam0.getJCRefOut());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexCreateSupportedPointFormatsExtension = 0; indexCreateSupportedPointFormatsExtension < resultingArrayList.size(); indexCreateSupportedPointFormatsExtension++ ) {
				resultingArray[indexCreateSupportedPointFormatsExtension] = (byte)resultingArrayList.get(indexCreateSupportedPointFormatsExtension);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] GetSupportedPointFormatsExtension(IDictionary extensions) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, org.bouncycastle.crypto.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("GetSupportedPointFormatsExtension", extensions == null ? null : extensions.getJCOInstance());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexGetSupportedPointFormatsExtension = 0; indexGetSupportedPointFormatsExtension < resultingArrayList.size(); indexGetSupportedPointFormatsExtension++ ) {
				resultingArray[indexGetSupportedPointFormatsExtension] = (byte)resultingArrayList.get(indexGetSupportedPointFormatsExtension);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] ReadSupportedPointFormatsExtension(byte[] extensionData) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, org.bouncycastle.crypto.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("ReadSupportedPointFormatsExtension", (java.lang.Object)extensionData);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexReadSupportedPointFormatsExtension = 0; indexReadSupportedPointFormatsExtension < resultingArrayList.size(); indexReadSupportedPointFormatsExtension++ ) {
				resultingArray[indexReadSupportedPointFormatsExtension] = (byte)resultingArrayList.get(indexReadSupportedPointFormatsExtension);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] ReadSupportedPointFormatsExtension(JCORefOut dupParam0) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, org.bouncycastle.crypto.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("ReadSupportedPointFormatsExtension", (java.lang.Object)dupParam0.getJCRefOut());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexReadSupportedPointFormatsExtension = 0; indexReadSupportedPointFormatsExtension < resultingArrayList.size(); indexReadSupportedPointFormatsExtension++ ) {
				resultingArray[indexReadSupportedPointFormatsExtension] = (byte)resultingArrayList.get(indexReadSupportedPointFormatsExtension);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] SerializeECFieldElement(int fieldSize, BigInteger x) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("SerializeECFieldElement", fieldSize, x == null ? null : x.getJCOInstance());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexSerializeECFieldElement = 0; indexSerializeECFieldElement < resultingArrayList.size(); indexSerializeECFieldElement++ ) {
				resultingArray[indexSerializeECFieldElement] = (byte)resultingArrayList.get(indexSerializeECFieldElement);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] SerializeECPoint(byte[] ecPointFormats, ECPoint point) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("SerializeECPoint", ecPointFormats, point == null ? null : point.getJCOInstance());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexSerializeECPoint = 0; indexSerializeECPoint < resultingArrayList.size(); indexSerializeECPoint++ ) {
				resultingArray[indexSerializeECPoint] = (byte)resultingArrayList.get(indexSerializeECPoint);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] SerializeECPoint(JCORefOut dupParam0, ECPoint dupParam1) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("SerializeECPoint", dupParam0.getJCRefOut(), dupParam1 == null ? null : dupParam1.getJCOInstance());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexSerializeECPoint = 0; indexSerializeECPoint < resultingArrayList.size(); indexSerializeECPoint++ ) {
				resultingArray[indexSerializeECPoint] = (byte)resultingArrayList.get(indexSerializeECPoint);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] SerializeECPublicKey(byte[] ecPointFormats, ECPublicKeyParameters keyParameters) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("SerializeECPublicKey", ecPointFormats, keyParameters == null ? null : keyParameters.getJCOInstance());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexSerializeECPublicKey = 0; indexSerializeECPublicKey < resultingArrayList.size(); indexSerializeECPublicKey++ ) {
				resultingArray[indexSerializeECPublicKey] = (byte)resultingArrayList.get(indexSerializeECPublicKey);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] SerializeECPublicKey(JCORefOut dupParam0, ECPublicKeyParameters dupParam1) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("SerializeECPublicKey", dupParam0.getJCRefOut(), dupParam1 == null ? null : dupParam1.getJCOInstance());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexSerializeECPublicKey = 0; indexSerializeECPublicKey < resultingArrayList.size(); indexSerializeECPublicKey++ ) {
				resultingArray[indexSerializeECPublicKey] = (byte)resultingArrayList.get(indexSerializeECPublicKey);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int ReadECExponent(int fieldSize, Stream input) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.io.EndOfStreamException, system.FormatException, system.OutOfMemoryException, system.IndexOutOfRangeException, org.bouncycastle.crypto.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("ReadECExponent", fieldSize, input == null ? null : input.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int[] GetSupportedEllipticCurvesExtension(IDictionary extensions) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.io.EndOfStreamException, system.OutOfMemoryException, org.bouncycastle.crypto.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("GetSupportedEllipticCurvesExtension", extensions == null ? null : extensions.getJCOInstance());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            int[] resultingArray = new int[resultingArrayList.size()];
            for(int indexGetSupportedEllipticCurvesExtension = 0; indexGetSupportedEllipticCurvesExtension < resultingArrayList.size(); indexGetSupportedEllipticCurvesExtension++ ) {
				resultingArray[indexGetSupportedEllipticCurvesExtension] = (int)resultingArrayList.get(indexGetSupportedEllipticCurvesExtension);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int[] ReadSupportedEllipticCurvesExtension(byte[] extensionData) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, system.io.EndOfStreamException, system.OutOfMemoryException, org.bouncycastle.crypto.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("ReadSupportedEllipticCurvesExtension", (java.lang.Object)extensionData);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            int[] resultingArray = new int[resultingArrayList.size()];
            for(int indexReadSupportedEllipticCurvesExtension = 0; indexReadSupportedEllipticCurvesExtension < resultingArrayList.size(); indexReadSupportedEllipticCurvesExtension++ ) {
				resultingArray[indexReadSupportedEllipticCurvesExtension] = (int)resultingArrayList.get(indexReadSupportedEllipticCurvesExtension);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int[] ReadSupportedEllipticCurvesExtension(JCORefOut dupParam0) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, system.io.EndOfStreamException, system.OutOfMemoryException, org.bouncycastle.crypto.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("ReadSupportedEllipticCurvesExtension", (java.lang.Object)dupParam0.getJCRefOut());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            int[] resultingArray = new int[resultingArrayList.size()];
            for(int indexReadSupportedEllipticCurvesExtension = 0; indexReadSupportedEllipticCurvesExtension < resultingArrayList.size(); indexReadSupportedEllipticCurvesExtension++ ) {
				resultingArray[indexReadSupportedEllipticCurvesExtension] = (int)resultingArrayList.get(indexReadSupportedEllipticCurvesExtension);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AsymmetricCipherKeyPair GenerateECKeyPair(SecureRandom random, ECDomainParameters ecParams) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, org.bouncycastle.security.InvalidParameterException, system.FormatException, system.ArithmeticException, org.bouncycastle.security.SecurityUtilityException, system.OverflowException, system.threading.AbandonedMutexException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGenerateECKeyPair = (JCObject)classType.Invoke("GenerateECKeyPair", random == null ? null : random.getJCOInstance(), ecParams == null ? null : ecParams.getJCOInstance());
            return new AsymmetricCipherKeyPair(objGenerateECKeyPair);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ECDomainParameters GetParametersForNamedCurve(int namedCurve) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.FormatException, system.ArithmeticException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetParametersForNamedCurve = (JCObject)classType.Invoke("GetParametersForNamedCurve", namedCurve);
            return new ECDomainParameters(objGetParametersForNamedCurve);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ECDomainParameters ReadECParameters(int[] namedCurves, byte[] ecPointFormats, Stream input) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.io.EndOfStreamException, system.OutOfMemoryException, org.bouncycastle.crypto.tls.TlsFatalAlert, system.FormatException, system.ArithmeticException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objReadECParameters = (JCObject)classType.Invoke("ReadECParameters", namedCurves, ecPointFormats, input == null ? null : input.getJCOInstance());
            return new ECDomainParameters(objReadECParameters);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ECDomainParameters ReadECParameters(JCORefOut dupParam0, JCORefOut dupParam1, Stream dupParam2) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.io.EndOfStreamException, system.OutOfMemoryException, org.bouncycastle.crypto.tls.TlsFatalAlert, system.FormatException, system.ArithmeticException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objReadECParameters = (JCObject)classType.Invoke("ReadECParameters", dupParam0.getJCRefOut(), dupParam1.getJCRefOut(), dupParam2 == null ? null : dupParam2.getJCOInstance());
            return new ECDomainParameters(objReadECParameters);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ECPrivateKeyParameters GenerateEphemeralClientKeyExchange(SecureRandom random, byte[] ecPointFormats, ECDomainParameters ecParams, Stream output) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, org.bouncycastle.security.InvalidParameterException, system.FormatException, system.ArithmeticException, org.bouncycastle.security.SecurityUtilityException, system.OverflowException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGenerateEphemeralClientKeyExchange = (JCObject)classType.Invoke("GenerateEphemeralClientKeyExchange", random == null ? null : random.getJCOInstance(), ecPointFormats, ecParams == null ? null : ecParams.getJCOInstance(), output == null ? null : output.getJCOInstance());
            return new ECPrivateKeyParameters(objGenerateEphemeralClientKeyExchange);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ECPrivateKeyParameters GenerateEphemeralClientKeyExchange(SecureRandom dupParam0, JCORefOut dupParam1, ECDomainParameters dupParam2, Stream dupParam3) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, org.bouncycastle.security.InvalidParameterException, system.FormatException, system.ArithmeticException, org.bouncycastle.security.SecurityUtilityException, system.OverflowException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGenerateEphemeralClientKeyExchange = (JCObject)classType.Invoke("GenerateEphemeralClientKeyExchange", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut(), dupParam2 == null ? null : dupParam2.getJCOInstance(), dupParam3 == null ? null : dupParam3.getJCOInstance());
            return new ECPrivateKeyParameters(objGenerateEphemeralClientKeyExchange);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ECPublicKeyParameters DeserializeECPublicKey(byte[] ecPointFormats, ECDomainParameters curve_params, byte[] encoding) throws Throwable, system.ArgumentNullException, system.PlatformNotSupportedException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.InvalidOperationException, org.bouncycastle.crypto.tls.TlsFatalAlert, system.ArgumentException, system.FormatException, system.RankException, system.ArgumentOutOfRangeException, system.ArrayTypeMismatchException, system.ArithmeticException, system.NotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objDeserializeECPublicKey = (JCObject)classType.Invoke("DeserializeECPublicKey", ecPointFormats, curve_params == null ? null : curve_params.getJCOInstance(), encoding);
            return new ECPublicKeyParameters(objDeserializeECPublicKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ECPublicKeyParameters DeserializeECPublicKey(JCORefOut dupParam0, ECDomainParameters dupParam1, JCORefOut dupParam2) throws Throwable, system.ArgumentNullException, system.PlatformNotSupportedException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.InvalidOperationException, org.bouncycastle.crypto.tls.TlsFatalAlert, system.ArgumentException, system.FormatException, system.RankException, system.ArgumentOutOfRangeException, system.ArrayTypeMismatchException, system.ArithmeticException, system.NotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objDeserializeECPublicKey = (JCObject)classType.Invoke("DeserializeECPublicKey", dupParam0.getJCRefOut(), dupParam1 == null ? null : dupParam1.getJCOInstance(), dupParam2.getJCRefOut());
            return new ECPublicKeyParameters(objDeserializeECPublicKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ECPublicKeyParameters ValidateECPublicKey(ECPublicKeyParameters key) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objValidateECPublicKey = (JCObject)classType.Invoke("ValidateECPublicKey", key == null ? null : key.getJCOInstance());
            return new ECPublicKeyParameters(objValidateECPublicKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static BigInteger DeserializeECFieldElement(int fieldSize, byte[] encoding) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.InvalidOperationException, org.bouncycastle.crypto.tls.TlsFatalAlert, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objDeserializeECFieldElement = (JCObject)classType.Invoke("DeserializeECFieldElement", fieldSize, encoding);
            return new BigInteger(objDeserializeECFieldElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static BigInteger DeserializeECFieldElement(int dupParam0, JCORefOut dupParam1) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.InvalidOperationException, org.bouncycastle.crypto.tls.TlsFatalAlert, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objDeserializeECFieldElement = (JCObject)classType.Invoke("DeserializeECFieldElement", dupParam0, dupParam1.getJCRefOut());
            return new BigInteger(objDeserializeECFieldElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static BigInteger ReadECFieldElement(int fieldSize, Stream input) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.io.EndOfStreamException, system.OutOfMemoryException, org.bouncycastle.crypto.tls.TlsFatalAlert, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objReadECFieldElement = (JCObject)classType.Invoke("ReadECFieldElement", fieldSize, input == null ? null : input.getJCOInstance());
            return new BigInteger(objReadECFieldElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static BigInteger ReadECParameter(Stream input) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.io.EndOfStreamException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objReadECParameter = (JCObject)classType.Invoke("ReadECParameter", input == null ? null : input.getJCOInstance());
            return new BigInteger(objReadECParameter);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ECPoint DeserializeECPoint(byte[] ecPointFormats, ECCurve curve, byte[] encoding) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.InvalidOperationException, org.bouncycastle.crypto.tls.TlsFatalAlert, system.FormatException, system.ArithmeticException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objDeserializeECPoint = (JCObject)classType.Invoke("DeserializeECPoint", ecPointFormats, curve == null ? null : curve.getJCOInstance(), encoding);
            return new ECPoint(objDeserializeECPoint);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ECPoint DeserializeECPoint(JCORefOut dupParam0, ECCurve dupParam1, JCORefOut dupParam2) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.InvalidOperationException, org.bouncycastle.crypto.tls.TlsFatalAlert, system.FormatException, system.ArithmeticException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objDeserializeECPoint = (JCObject)classType.Invoke("DeserializeECPoint", dupParam0.getJCRefOut(), dupParam1 == null ? null : dupParam1.getJCOInstance(), dupParam2.getJCRefOut());
            return new ECPoint(objDeserializeECPoint);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String GetNameOfNamedCurve(int namedCurve) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (java.lang.String)classType.Invoke("GetNameOfNamedCurve", namedCurve);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void AddSupportedEllipticCurvesExtension(IDictionary extensions, int[] namedCurves) throws Throwable, system.ArgumentNullException, system.PlatformNotSupportedException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.InvalidOperationException, org.bouncycastle.crypto.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("AddSupportedEllipticCurvesExtension", extensions == null ? null : extensions.getJCOInstance(), namedCurves);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void AddSupportedEllipticCurvesExtension(IDictionary dupParam0, JCORefOut dupParam1) throws Throwable, system.ArgumentNullException, system.PlatformNotSupportedException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.InvalidOperationException, org.bouncycastle.crypto.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("AddSupportedEllipticCurvesExtension", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void AddSupportedPointFormatsExtension(IDictionary extensions, byte[] ecPointFormats) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException, system.OutOfMemoryException, org.bouncycastle.crypto.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("AddSupportedPointFormatsExtension", extensions == null ? null : extensions.getJCOInstance(), ecPointFormats);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void AddSupportedPointFormatsExtension(IDictionary dupParam0, JCORefOut dupParam1) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException, system.OutOfMemoryException, org.bouncycastle.crypto.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("AddSupportedPointFormatsExtension", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteECExponent(int k, Stream output) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteECExponent", k, output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteECFieldElement(int fieldSize, BigInteger x, Stream output) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteECFieldElement", fieldSize, x == null ? null : x.getJCOInstance(), output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteECFieldElement(ECFieldElement x, Stream output) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteECFieldElement", x == null ? null : x.getJCOInstance(), output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteECParameter(BigInteger x, Stream output) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteECParameter", x == null ? null : x.getJCOInstance(), output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteECPoint(byte[] ecPointFormats, ECPoint point, Stream output) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteECPoint", ecPointFormats, point == null ? null : point.getJCOInstance(), output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteECPoint(JCORefOut dupParam0, ECPoint dupParam1, Stream dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteECPoint", dupParam0.getJCRefOut(), dupParam1 == null ? null : dupParam1.getJCOInstance(), dupParam2 == null ? null : dupParam2.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteExplicitECParameters(byte[] ecPointFormats, ECDomainParameters ecParameters, Stream output) throws Throwable, system.ArgumentNullException, system.PlatformNotSupportedException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.InvalidOperationException, org.bouncycastle.crypto.tls.TlsFatalAlert, system.RankException, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteExplicitECParameters", ecPointFormats, ecParameters == null ? null : ecParameters.getJCOInstance(), output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteExplicitECParameters(JCORefOut dupParam0, ECDomainParameters dupParam1, Stream dupParam2) throws Throwable, system.ArgumentNullException, system.PlatformNotSupportedException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.InvalidOperationException, org.bouncycastle.crypto.tls.TlsFatalAlert, system.RankException, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteExplicitECParameters", dupParam0.getJCRefOut(), dupParam1 == null ? null : dupParam1.getJCOInstance(), dupParam2 == null ? null : dupParam2.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteNamedECParameters(int namedCurve, Stream output) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.InvalidOperationException, org.bouncycastle.crypto.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteNamedECParameters", namedCurve, output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}