/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package graphql.types;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;

// Import section
import graphql.types.IProvideMetadata;
import graphql.types.IProvideMetadataImplementation;
import graphql.types.IProvideDescription;
import graphql.types.IProvideDescriptionImplementation;
import graphql.types.IGraphType;
import graphql.types.IGraphTypeImplementation;
import graphql.utilities.ISchemaNodeVisitor;
import graphql.utilities.ISchemaNodeVisitorImplementation;
import graphql.conversion.INameConverter;
import graphql.conversion.INameConverterImplementation;
import graphql.ExperimentalFeatures;
import graphql.instrumentation.IFieldMiddlewareBuilder;
import graphql.instrumentation.IFieldMiddlewareBuilderImplementation;
import graphql.introspection.ISchemaComparer;
import graphql.introspection.ISchemaComparerImplementation;
import graphql.introspection.ISchemaFilter;
import graphql.introspection.ISchemaFilterImplementation;
import graphql.types.FieldType;
import graphql.types.IObjectGraphType;
import graphql.types.IObjectGraphTypeImplementation;
import graphql.types.SchemaDirectives;
import graphql.types.SchemaTypes;


/**
 * The base .NET class managing GraphQL.Types.ISchema, GraphQL, Version=4.6.1.0, Culture=neutral, PublicKeyToken=null.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/GraphQL.Types.ISchema" target="_top">https://docs.microsoft.com/en-us/dotnet/api/GraphQL.Types.ISchema</a>
 */
public interface ISchema extends IJCOBridgeReflected, IProvideMetadata, IProvideDescription {
    /**
     * Fully assembly qualified name: GraphQL, Version=4.6.1.0, Culture=neutral, PublicKeyToken=null
     */
    public static final String assemblyFullName = "GraphQL, Version=4.6.1.0, Culture=neutral, PublicKeyToken=null";
    /**
     * Assembly name: GraphQL
     */
    public static final String assemblyShortName = "GraphQL";
    /**
     * Qualified class name: GraphQL.Types.ISchema
     */
    public static final String className = "GraphQL.Types.ISchema";
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link ISchema}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link ISchema} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static ISchema ToISchema(IJCOBridgeReflected from) throws Throwable {
        JCOBridge bridge = JCOBridgeInstance.getInstance("GraphQL, Version=4.6.1.0, Culture=neutral, PublicKeyToken=null");
        JCType classType = bridge.GetType(className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        NetType.AssertCast(classType, from);
        return new ISchemaImplementation(from.getJCOInstance());
    }

    /**
     * Returns the reflected Assembly name
     * 
     * @return A {@link String} representing the Fullname of reflected Assembly
     */
    public String getJCOAssemblyName();

    /**
     * Returns the reflected Class name
     * 
     * @return A {@link String} representing the Fullname of reflected Class
     */
    public String getJCOClassName();

    /**
     * Returns the reflected Class name used to build the object
     * 
     * @return A {@link String} representing the name used to allocated the object
     *         in CLR context
     */
    public String getJCOObjectName();

    /**
     * Returns the instantiated class
     * 
     * @return An {@link java.lang.Object} representing the instance of the instantiated Class
     */
    public java.lang.Object getJCOInstance();

    /**
     * Returns the instantiated class Type
     * 
     * @return A {@link JCType} representing the Type of the instantiated Class
     */
    public JCType getJCOType();

    // Methods section
    

    public void Initialize() throws Throwable;

    public void RegisterType(IGraphType type) throws Throwable;

    public void RegisterType(NetType type) throws Throwable;

    public void RegisterTypeMapping(NetType clrType, NetType graphType) throws Throwable;

    public void RegisterVisitor(ISchemaNodeVisitor visitor) throws Throwable;

    public void RegisterVisitor(NetType type) throws Throwable;


    
    // Properties section
    
    public boolean getInitialized() throws Throwable;

    public INameConverter getNameConverter() throws Throwable;

    public ExperimentalFeatures getFeatures() throws Throwable;

    public void setFeatures(ExperimentalFeatures Features) throws Throwable;

    public IFieldMiddlewareBuilder getFieldMiddleware() throws Throwable;

    public ISchemaComparer getComparer() throws Throwable;

    public void setComparer(ISchemaComparer Comparer) throws Throwable;

    public ISchemaFilter getFilter() throws Throwable;

    public void setFilter(ISchemaFilter Filter) throws Throwable;

    public FieldType getSchemaMetaFieldType() throws Throwable;

    public FieldType getTypeMetaFieldType() throws Throwable;

    public FieldType getTypeNameMetaFieldType() throws Throwable;

    public IObjectGraphType getMutation() throws Throwable;

    public void setMutation(IObjectGraphType Mutation) throws Throwable;

    public IObjectGraphType getQuery() throws Throwable;

    public void setQuery(IObjectGraphType Query) throws Throwable;

    public IObjectGraphType getSubscription() throws Throwable;

    public void setSubscription(IObjectGraphType Subscription) throws Throwable;

    public SchemaDirectives getDirectives() throws Throwable;

    public SchemaTypes getAllTypes() throws Throwable;



    // Instance Events section
    

}