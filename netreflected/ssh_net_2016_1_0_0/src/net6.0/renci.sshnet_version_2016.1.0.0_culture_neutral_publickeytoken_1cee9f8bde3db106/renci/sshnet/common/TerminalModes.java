/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package renci.sshnet.common;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;

// Import section
// PACKAGE_IMPORT_SECTION

/**
 * The base .NET class managing Renci.SshNet.Common.TerminalModes, Renci.SshNet, Version=2016.1.0.0, Culture=neutral, PublicKeyToken=1cee9f8bde3db106.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Renci.SshNet.Common.TerminalModes" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Renci.SshNet.Common.TerminalModes</a>
 */
public class TerminalModes extends NetObject  {
    /**
     * Fully assembly qualified name: Renci.SshNet, Version=2016.1.0.0, Culture=neutral, PublicKeyToken=1cee9f8bde3db106
     */
    public static final String assemblyFullName = "Renci.SshNet, Version=2016.1.0.0, Culture=neutral, PublicKeyToken=1cee9f8bde3db106";
    /**
     * Assembly name: Renci.SshNet
     */
    public static final String assemblyShortName = "Renci.SshNet";
    /**
     * Qualified class name: Renci.SshNet.Common.TerminalModes
     */
    public static final String className = "Renci.SshNet.Common.TerminalModes";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumReflected = createEnum();
    JCEnum classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    static JCEnum createEnum() {
        try {
            String enumToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating Enum %s", enumToCreate);
            JCEnum enumCreated = bridge.GetEnum(enumToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created Enum: %s",
                        (enumCreated != null) ? enumCreated.toString() : "Returned null value");
            return enumCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public TerminalModes(java.lang.Object instance) {
        super(instance);
        if (instance instanceof JCObject) {
            try {
                String enumName = NetEnum.GetName(classType, (JCObject)instance);
                classInstance = enumReflected.fromValue(enumName);
            } catch (Throwable t) {
                JCOReflector.writeLog(t);
                classInstance = enumReflected;
            }
        } else if (instance instanceof JCEnum) {
            classInstance = (JCEnum)instance;
        }
    }

    public TerminalModes() {
        super();
        // add reference to assemblyName.dll file
        try {
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
        } catch (Throwable jcne) {
            JCOReflector.writeLog(jcne);
        }
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    final static TerminalModes getFrom(JCEnum object, String value) {
        try {
            return new TerminalModes(object.fromValue(value));
        } catch (JCException e) {
            return new TerminalModes(object);
        }
    }

    // Enum fields section
    
    public static TerminalModes TTY_OP_END = getFrom(enumReflected, "TTY_OP_END");
    public static TerminalModes VINTR = getFrom(enumReflected, "VINTR");
    public static TerminalModes VQUIT = getFrom(enumReflected, "VQUIT");
    public static TerminalModes VERASE = getFrom(enumReflected, "VERASE");
    public static TerminalModes VKILL = getFrom(enumReflected, "VKILL");
    public static TerminalModes VEOF = getFrom(enumReflected, "VEOF");
    public static TerminalModes VEOL = getFrom(enumReflected, "VEOL");
    public static TerminalModes VEOL2 = getFrom(enumReflected, "VEOL2");
    public static TerminalModes VSTART = getFrom(enumReflected, "VSTART");
    public static TerminalModes VSTOP = getFrom(enumReflected, "VSTOP");
    public static TerminalModes VSUSP = getFrom(enumReflected, "VSUSP");
    public static TerminalModes VDSUSP = getFrom(enumReflected, "VDSUSP");
    public static TerminalModes VREPRINT = getFrom(enumReflected, "VREPRINT");
    public static TerminalModes VWERASE = getFrom(enumReflected, "VWERASE");
    public static TerminalModes VLNEXT = getFrom(enumReflected, "VLNEXT");
    public static TerminalModes VFLUSH = getFrom(enumReflected, "VFLUSH");
    public static TerminalModes VSWTCH = getFrom(enumReflected, "VSWTCH");
    public static TerminalModes VSTATUS = getFrom(enumReflected, "VSTATUS");
    public static TerminalModes VDISCARD = getFrom(enumReflected, "VDISCARD");
    public static TerminalModes IGNPAR = getFrom(enumReflected, "IGNPAR");
    public static TerminalModes PARMRK = getFrom(enumReflected, "PARMRK");
    public static TerminalModes INPCK = getFrom(enumReflected, "INPCK");
    public static TerminalModes ISTRIP = getFrom(enumReflected, "ISTRIP");
    public static TerminalModes INLCR = getFrom(enumReflected, "INLCR");
    public static TerminalModes IGNCR = getFrom(enumReflected, "IGNCR");
    public static TerminalModes ICRNL = getFrom(enumReflected, "ICRNL");
    public static TerminalModes IUCLC = getFrom(enumReflected, "IUCLC");
    public static TerminalModes IXON = getFrom(enumReflected, "IXON");
    public static TerminalModes IXANY = getFrom(enumReflected, "IXANY");
    public static TerminalModes IXOFF = getFrom(enumReflected, "IXOFF");
    public static TerminalModes IMAXBEL = getFrom(enumReflected, "IMAXBEL");
    public static TerminalModes ISIG = getFrom(enumReflected, "ISIG");
    public static TerminalModes ICANON = getFrom(enumReflected, "ICANON");
    public static TerminalModes XCASE = getFrom(enumReflected, "XCASE");
    public static TerminalModes ECHO = getFrom(enumReflected, "ECHO");
    public static TerminalModes ECHOE = getFrom(enumReflected, "ECHOE");
    public static TerminalModes ECHOK = getFrom(enumReflected, "ECHOK");
    public static TerminalModes ECHONL = getFrom(enumReflected, "ECHONL");
    public static TerminalModes NOFLSH = getFrom(enumReflected, "NOFLSH");
    public static TerminalModes TOSTOP = getFrom(enumReflected, "TOSTOP");
    public static TerminalModes IEXTEN = getFrom(enumReflected, "IEXTEN");
    public static TerminalModes ECHOCTL = getFrom(enumReflected, "ECHOCTL");
    public static TerminalModes ECHOKE = getFrom(enumReflected, "ECHOKE");
    public static TerminalModes PENDIN = getFrom(enumReflected, "PENDIN");
    public static TerminalModes OPOST = getFrom(enumReflected, "OPOST");
    public static TerminalModes OLCUC = getFrom(enumReflected, "OLCUC");
    public static TerminalModes ONLCR = getFrom(enumReflected, "ONLCR");
    public static TerminalModes OCRNL = getFrom(enumReflected, "OCRNL");
    public static TerminalModes ONOCR = getFrom(enumReflected, "ONOCR");
    public static TerminalModes ONLRET = getFrom(enumReflected, "ONLRET");
    public static TerminalModes CS7 = getFrom(enumReflected, "CS7");
    public static TerminalModes CS8 = getFrom(enumReflected, "CS8");
    public static TerminalModes PARENB = getFrom(enumReflected, "PARENB");
    public static TerminalModes PARODD = getFrom(enumReflected, "PARODD");
    public static TerminalModes TTY_OP_ISPEED = getFrom(enumReflected, "TTY_OP_ISPEED");
    public static TerminalModes TTY_OP_OSPEED = getFrom(enumReflected, "TTY_OP_OSPEED");


    // Flags management section


}