/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.azure.cognitiveservices.contentmoderator;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import microsoft.azure.cognitiveservices.contentmoderator.models.Frames;
import microsoft.azure.cognitiveservices.contentmoderator.IReviews;
import microsoft.azure.cognitiveservices.contentmoderator.IReviewsImplementation;
import microsoft.azure.cognitiveservices.contentmoderator.models.Job;
import microsoft.azure.cognitiveservices.contentmoderator.models.JobId;
import microsoft.azure.cognitiveservices.contentmoderator.models.Content;
import microsoft.azure.cognitiveservices.contentmoderator.models.Review;
import system.threading.tasks.Task;
import system.io.Stream;
import system.threading.CancellationToken;


/**
 * The base .NET class managing Microsoft.Azure.CognitiveServices.ContentModerator.ReviewsExtensions, Microsoft.Azure.CognitiveServices.ContentModerator, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.Azure.CognitiveServices.ContentModerator.ReviewsExtensions" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Microsoft.Azure.CognitiveServices.ContentModerator.ReviewsExtensions</a>
 */
public class ReviewsExtensions extends NetObject  {
    /**
     * Fully assembly qualified name: Microsoft.Azure.CognitiveServices.ContentModerator, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
     */
    public static final String assemblyFullName = "Microsoft.Azure.CognitiveServices.ContentModerator, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
    /**
     * Assembly name: Microsoft.Azure.CognitiveServices.ContentModerator
     */
    public static final String assemblyShortName = "Microsoft.Azure.CognitiveServices.ContentModerator";
    /**
     * Qualified class name: Microsoft.Azure.CognitiveServices.ContentModerator.ReviewsExtensions
     */
    public static final String className = "Microsoft.Azure.CognitiveServices.ContentModerator.ReviewsExtensions";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public ReviewsExtensions(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link ReviewsExtensions}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link ReviewsExtensions} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static ReviewsExtensions cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new ReviewsExtensions(from.getJCOInstance());
    }

    // Constructors section
    
    public ReviewsExtensions() throws Throwable {
    }

    
    // Methods section
    
    public static Job GetJobDetails(IReviews operations, java.lang.String teamName, java.lang.String jobId) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetJobDetails = (JCObject)classType.Invoke("GetJobDetails", operations == null ? null : operations.getJCOInstance(), teamName, jobId);
            return new Job(objGetJobDetails);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static JobId CreateJob(IReviews operations, java.lang.String teamName, java.lang.String contentType, java.lang.String contentId, java.lang.String workflowName, java.lang.String jobContentType, Content content, java.lang.String callBackEndpoint) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCreateJob = (JCObject)classType.Invoke("CreateJob", operations == null ? null : operations.getJCOInstance(), teamName, contentType, contentId, workflowName, jobContentType, content == null ? null : content.getJCOInstance(), callBackEndpoint);
            return new JobId(objCreateJob);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Review GetReview(IReviews operations, java.lang.String teamName, java.lang.String reviewId) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetReview = (JCObject)classType.Invoke("GetReview", operations == null ? null : operations.getJCOInstance(), teamName, reviewId);
            return new Review(objGetReview);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task AddVideoTranscriptAsync(IReviews operations, java.lang.String teamName, java.lang.String reviewId, Stream vTTfile, CancellationToken cancellationToken) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objAddVideoTranscriptAsync = (JCObject)classType.Invoke("AddVideoTranscriptAsync", operations == null ? null : operations.getJCOInstance(), teamName, reviewId, vTTfile == null ? null : vTTfile.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objAddVideoTranscriptAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task PublishVideoReviewAsync(IReviews operations, java.lang.String teamName, java.lang.String reviewId, CancellationToken cancellationToken) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objPublishVideoReviewAsync = (JCObject)classType.Invoke("PublishVideoReviewAsync", operations == null ? null : operations.getJCOInstance(), teamName, reviewId, cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objPublishVideoReviewAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void AddVideoTranscript(IReviews operations, java.lang.String teamName, java.lang.String reviewId, Stream vTTfile) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("AddVideoTranscript", operations == null ? null : operations.getJCOInstance(), teamName, reviewId, vTTfile == null ? null : vTTfile.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void PublishVideoReview(IReviews operations, java.lang.String teamName, java.lang.String reviewId) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("PublishVideoReview", operations == null ? null : operations.getJCOInstance(), teamName, reviewId);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}