/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package ibm.data.db2;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import ibm.data.db2types.DB2Binary;
import ibm.data.db2types.DB2Blob;
import ibm.data.db2types.DB2Clob;
import ibm.data.db2types.DB2Date;
import ibm.data.db2types.DB2DateTime;
import ibm.data.db2types.DB2Decimal;
import ibm.data.db2types.DB2DecimalFloat;
import ibm.data.db2types.DB2Double;
import ibm.data.db2types.DB2Int16;
import ibm.data.db2types.DB2Int32;
import ibm.data.db2types.DB2Int64;
import ibm.data.db2types.DB2Real;
import ibm.data.db2types.DB2Real370;
import ibm.data.db2types.DB2RowId;
import ibm.data.db2types.DB2String;
import ibm.data.db2types.DB2Time;
import ibm.data.db2types.DB2TimeStamp;
import ibm.data.db2types.DB2Xml;
import ibm.data.db2types.DB2XsrObjectId;


/**
 * The base .NET class managing IBM.Data.Db2.IDB2GetTypedData, IBM.Data.Db2, Version=6.0.0.200, Culture=neutral, PublicKeyToken=7c307b91aa13d208.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/IBM.Data.Db2.IDB2GetTypedData" target="_top">https://docs.microsoft.com/en-us/dotnet/api/IBM.Data.Db2.IDB2GetTypedData</a>
 */
public class IDB2GetTypedDataImplementation extends NetObject implements IDB2GetTypedData {
    /**
     * Fully assembly qualified name: IBM.Data.Db2, Version=6.0.0.200, Culture=neutral, PublicKeyToken=7c307b91aa13d208
     */
    public static final String assemblyFullName = "IBM.Data.Db2, Version=6.0.0.200, Culture=neutral, PublicKeyToken=7c307b91aa13d208";
    /**
     * Assembly name: IBM.Data.Db2
     */
    public static final String assemblyShortName = "IBM.Data.Db2";
    /**
     * Qualified class name: IBM.Data.Db2.IDB2GetTypedData
     */
    public static final String className = "IBM.Data.Db2.IDB2GetTypedData";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public IDB2GetTypedDataImplementation(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link IDB2GetTypedData}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link IDB2GetTypedData} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static IDB2GetTypedData ToIDB2GetTypedData(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new IDB2GetTypedDataImplementation(from.getJCOInstance());
    }

    // Methods section
    
    public DB2Binary GetDB2Binary(int i) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDB2Binary = (JCObject)classInstance.Invoke("GetDB2Binary", i);
            return new DB2Binary(objGetDB2Binary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DB2Blob GetDB2Blob(int i) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDB2Blob = (JCObject)classInstance.Invoke("GetDB2Blob", i);
            return new DB2Blob(objGetDB2Blob);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DB2Clob GetDB2Clob(int i) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDB2Clob = (JCObject)classInstance.Invoke("GetDB2Clob", i);
            return new DB2Clob(objGetDB2Clob);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DB2Date GetDB2Date(int i) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDB2Date = (JCObject)classInstance.Invoke("GetDB2Date", i);
            return new DB2Date(objGetDB2Date);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DB2DateTime GetDB2DateTime(int i) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDB2DateTime = (JCObject)classInstance.Invoke("GetDB2DateTime", i);
            return new DB2DateTime(objGetDB2DateTime);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DB2Decimal GetDB2Decimal(int i) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDB2Decimal = (JCObject)classInstance.Invoke("GetDB2Decimal", i);
            return new DB2Decimal(objGetDB2Decimal);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DB2DecimalFloat GetDB2DecimalFloat(int i) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDB2DecimalFloat = (JCObject)classInstance.Invoke("GetDB2DecimalFloat", i);
            return new DB2DecimalFloat(objGetDB2DecimalFloat);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DB2Double GetDB2Double(int i) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDB2Double = (JCObject)classInstance.Invoke("GetDB2Double", i);
            return new DB2Double(objGetDB2Double);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DB2Int16 GetDB2Int16(int i) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDB2Int16 = (JCObject)classInstance.Invoke("GetDB2Int16", i);
            return new DB2Int16(objGetDB2Int16);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DB2Int32 GetDB2Int32(int i) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDB2Int32 = (JCObject)classInstance.Invoke("GetDB2Int32", i);
            return new DB2Int32(objGetDB2Int32);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DB2Int64 GetDB2Int64(int i) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDB2Int64 = (JCObject)classInstance.Invoke("GetDB2Int64", i);
            return new DB2Int64(objGetDB2Int64);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DB2Real GetDB2Real(int i) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDB2Real = (JCObject)classInstance.Invoke("GetDB2Real", i);
            return new DB2Real(objGetDB2Real);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DB2Real370 GetDB2Real370(int i) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDB2Real370 = (JCObject)classInstance.Invoke("GetDB2Real370", i);
            return new DB2Real370(objGetDB2Real370);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DB2RowId GetDB2RowId(int i) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDB2RowId = (JCObject)classInstance.Invoke("GetDB2RowId", i);
            return new DB2RowId(objGetDB2RowId);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DB2String GetDB2String(int i) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDB2String = (JCObject)classInstance.Invoke("GetDB2String", i);
            return new DB2String(objGetDB2String);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DB2Time GetDB2Time(int i) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDB2Time = (JCObject)classInstance.Invoke("GetDB2Time", i);
            return new DB2Time(objGetDB2Time);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DB2TimeStamp GetDB2TimeStamp(int i) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDB2TimeStamp = (JCObject)classInstance.Invoke("GetDB2TimeStamp", i);
            return new DB2TimeStamp(objGetDB2TimeStamp);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DB2Xml GetDB2Xml(int i) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDB2Xml = (JCObject)classInstance.Invoke("GetDB2Xml", i);
            return new DB2Xml(objGetDB2Xml);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DB2XsrObjectId GetDB2XsrObjectId(int column) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDB2XsrObjectId = (JCObject)classInstance.Invoke("GetDB2XsrObjectId", column);
            return new DB2XsrObjectId(objGetDB2XsrObjectId);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int GetDB2Values(NetObject[] values) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Invoke("GetDB2Values", (java.lang.Object)toObjectFromArray(values));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetDB2Value(int i) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDB2Value = (JCObject)classInstance.Invoke("GetDB2Value", i);
            return new NetObject(objGetDB2Value);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}