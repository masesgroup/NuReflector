/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package ibm.data.db2;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;

// Import section
import ibm.data.db2types.DB2Binary;
import ibm.data.db2types.DB2Blob;
import ibm.data.db2types.DB2Clob;
import ibm.data.db2types.DB2Date;
import ibm.data.db2types.DB2DateTime;
import ibm.data.db2types.DB2Decimal;
import ibm.data.db2types.DB2DecimalFloat;
import ibm.data.db2types.DB2Double;
import ibm.data.db2types.DB2Int16;
import ibm.data.db2types.DB2Int32;
import ibm.data.db2types.DB2Int64;
import ibm.data.db2types.DB2Real;
import ibm.data.db2types.DB2Real370;
import ibm.data.db2types.DB2RowId;
import ibm.data.db2types.DB2String;
import ibm.data.db2types.DB2Time;
import ibm.data.db2types.DB2TimeStamp;
import ibm.data.db2types.DB2Xml;
import ibm.data.db2types.DB2XsrObjectId;


/**
 * The base .NET class managing IBM.Data.Db2.IDB2GetTypedData, IBM.Data.Db2, Version=6.0.0.200, Culture=neutral, PublicKeyToken=7c307b91aa13d208.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/IBM.Data.Db2.IDB2GetTypedData" target="_top">https://docs.microsoft.com/en-us/dotnet/api/IBM.Data.Db2.IDB2GetTypedData</a>
 */
public interface IDB2GetTypedData extends IJCOBridgeReflected {
    /**
     * Fully assembly qualified name: IBM.Data.Db2, Version=6.0.0.200, Culture=neutral, PublicKeyToken=7c307b91aa13d208
     */
    public static final String assemblyFullName = "IBM.Data.Db2, Version=6.0.0.200, Culture=neutral, PublicKeyToken=7c307b91aa13d208";
    /**
     * Assembly name: IBM.Data.Db2
     */
    public static final String assemblyShortName = "IBM.Data.Db2";
    /**
     * Qualified class name: IBM.Data.Db2.IDB2GetTypedData
     */
    public static final String className = "IBM.Data.Db2.IDB2GetTypedData";
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link IDB2GetTypedData}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link IDB2GetTypedData} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static IDB2GetTypedData ToIDB2GetTypedData(IJCOBridgeReflected from) throws Throwable {
        JCOBridge bridge = JCOBridgeInstance.getInstance("IBM.Data.Db2, Version=6.0.0.200, Culture=neutral, PublicKeyToken=7c307b91aa13d208");
        JCType classType = bridge.GetType(className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        NetType.AssertCast(classType, from);
        return new IDB2GetTypedDataImplementation(from.getJCOInstance());
    }

    /**
     * Returns the reflected Assembly name
     * 
     * @return A {@link String} representing the Fullname of reflected Assembly
     */
    public String getJCOAssemblyName();

    /**
     * Returns the reflected Class name
     * 
     * @return A {@link String} representing the Fullname of reflected Class
     */
    public String getJCOClassName();

    /**
     * Returns the reflected Class name used to build the object
     * 
     * @return A {@link String} representing the name used to allocated the object
     *         in CLR context
     */
    public String getJCOObjectName();

    /**
     * Returns the instantiated class
     * 
     * @return An {@link java.lang.Object} representing the instance of the instantiated Class
     */
    public java.lang.Object getJCOInstance();

    /**
     * Returns the instantiated class Type
     * 
     * @return A {@link JCType} representing the Type of the instantiated Class
     */
    public JCType getJCOType();

    // Methods section
    
    public DB2Binary GetDB2Binary(int i) throws Throwable;

    public DB2Blob GetDB2Blob(int i) throws Throwable;

    public DB2Clob GetDB2Clob(int i) throws Throwable;

    public DB2Date GetDB2Date(int i) throws Throwable;

    public DB2DateTime GetDB2DateTime(int i) throws Throwable;

    public DB2Decimal GetDB2Decimal(int i) throws Throwable;

    public DB2DecimalFloat GetDB2DecimalFloat(int i) throws Throwable;

    public DB2Double GetDB2Double(int i) throws Throwable;

    public DB2Int16 GetDB2Int16(int i) throws Throwable;

    public DB2Int32 GetDB2Int32(int i) throws Throwable;

    public DB2Int64 GetDB2Int64(int i) throws Throwable;

    public DB2Real GetDB2Real(int i) throws Throwable;

    public DB2Real370 GetDB2Real370(int i) throws Throwable;

    public DB2RowId GetDB2RowId(int i) throws Throwable;

    public DB2String GetDB2String(int i) throws Throwable;

    public DB2Time GetDB2Time(int i) throws Throwable;

    public DB2TimeStamp GetDB2TimeStamp(int i) throws Throwable;

    public DB2Xml GetDB2Xml(int i) throws Throwable;

    public DB2XsrObjectId GetDB2XsrObjectId(int column) throws Throwable;

    public int GetDB2Values(NetObject[] values) throws Throwable;

    public NetObject GetDB2Value(int i) throws Throwable;


    
    // Properties section
    


    // Instance Events section
    

}