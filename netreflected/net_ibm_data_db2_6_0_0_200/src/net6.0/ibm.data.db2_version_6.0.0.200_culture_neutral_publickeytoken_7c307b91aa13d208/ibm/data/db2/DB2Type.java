/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package ibm.data.db2;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;

// Import section
// PACKAGE_IMPORT_SECTION

/**
 * The base .NET class managing IBM.Data.Db2.DB2Type, IBM.Data.Db2, Version=6.0.0.200, Culture=neutral, PublicKeyToken=7c307b91aa13d208.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/IBM.Data.Db2.DB2Type" target="_top">https://docs.microsoft.com/en-us/dotnet/api/IBM.Data.Db2.DB2Type</a>
 */
public class DB2Type extends NetObject  {
    /**
     * Fully assembly qualified name: IBM.Data.Db2, Version=6.0.0.200, Culture=neutral, PublicKeyToken=7c307b91aa13d208
     */
    public static final String assemblyFullName = "IBM.Data.Db2, Version=6.0.0.200, Culture=neutral, PublicKeyToken=7c307b91aa13d208";
    /**
     * Assembly name: IBM.Data.Db2
     */
    public static final String assemblyShortName = "IBM.Data.Db2";
    /**
     * Qualified class name: IBM.Data.Db2.DB2Type
     */
    public static final String className = "IBM.Data.Db2.DB2Type";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumReflected = createEnum();
    JCEnum classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    static JCEnum createEnum() {
        try {
            String enumToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating Enum %s", enumToCreate);
            JCEnum enumCreated = bridge.GetEnum(enumToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created Enum: %s",
                        (enumCreated != null) ? enumCreated.toString() : "Returned null value");
            return enumCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public DB2Type(java.lang.Object instance) {
        super(instance);
        if (instance instanceof JCObject) {
            try {
                String enumName = NetEnum.GetName(classType, (JCObject)instance);
                classInstance = enumReflected.fromValue(enumName);
            } catch (Throwable t) {
                JCOReflector.writeLog(t);
                classInstance = enumReflected;
            }
        } else if (instance instanceof JCEnum) {
            classInstance = (JCEnum)instance;
        }
    }

    public DB2Type() {
        super();
        // add reference to assemblyName.dll file
        try {
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
        } catch (Throwable jcne) {
            JCOReflector.writeLog(jcne);
        }
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    final static DB2Type getFrom(JCEnum object, String value) {
        try {
            return new DB2Type(object.fromValue(value));
        } catch (JCException e) {
            return new DB2Type(object);
        }
    }

    // Enum fields section
    
    public static DB2Type Invalid = getFrom(enumReflected, "Invalid");
    public static DB2Type SmallInt = getFrom(enumReflected, "SmallInt");
    public static DB2Type Integer = getFrom(enumReflected, "Integer");
    public static DB2Type BigInt = getFrom(enumReflected, "BigInt");
    public static DB2Type Real = getFrom(enumReflected, "Real");
    public static DB2Type Double = getFrom(enumReflected, "Double");
    public static DB2Type Float = getFrom(enumReflected, "Float");
    public static DB2Type Decimal = getFrom(enumReflected, "Decimal");
    public static DB2Type Numeric = getFrom(enumReflected, "Numeric");
    public static DB2Type Date = getFrom(enumReflected, "Date");
    public static DB2Type Time = getFrom(enumReflected, "Time");
    public static DB2Type Timestamp = getFrom(enumReflected, "Timestamp");
    public static DB2Type Char = getFrom(enumReflected, "Char");
    public static DB2Type VarChar = getFrom(enumReflected, "VarChar");
    public static DB2Type LongVarChar = getFrom(enumReflected, "LongVarChar");
    public static DB2Type Binary = getFrom(enumReflected, "Binary");
    public static DB2Type VarBinary = getFrom(enumReflected, "VarBinary");
    public static DB2Type LongVarBinary = getFrom(enumReflected, "LongVarBinary");
    public static DB2Type Graphic = getFrom(enumReflected, "Graphic");
    public static DB2Type VarGraphic = getFrom(enumReflected, "VarGraphic");
    public static DB2Type LongVarGraphic = getFrom(enumReflected, "LongVarGraphic");
    public static DB2Type Clob = getFrom(enumReflected, "Clob");
    public static DB2Type Blob = getFrom(enumReflected, "Blob");
    public static DB2Type DbClob = getFrom(enumReflected, "DbClob");
    public static DB2Type Datalink = getFrom(enumReflected, "Datalink");
    public static DB2Type RowId = getFrom(enumReflected, "RowId");
    public static DB2Type Xml = getFrom(enumReflected, "Xml");
    public static DB2Type Real370 = getFrom(enumReflected, "Real370");
    public static DB2Type DecimalFloat = getFrom(enumReflected, "DecimalFloat");
    public static DB2Type DynArray = getFrom(enumReflected, "DynArray");
    public static DB2Type BigSerial = getFrom(enumReflected, "BigSerial");
    public static DB2Type BinaryXml = getFrom(enumReflected, "BinaryXml");
    public static DB2Type TimeStampWithTimeZone = getFrom(enumReflected, "TimeStampWithTimeZone");
    public static DB2Type Cursor = getFrom(enumReflected, "Cursor");
    public static DB2Type Serial = getFrom(enumReflected, "Serial");
    public static DB2Type Int8 = getFrom(enumReflected, "Int8");
    public static DB2Type Serial8 = getFrom(enumReflected, "Serial8");
    public static DB2Type Money = getFrom(enumReflected, "Money");
    public static DB2Type DateTime = getFrom(enumReflected, "DateTime");
    public static DB2Type Text = getFrom(enumReflected, "Text");
    public static DB2Type Byte = getFrom(enumReflected, "Byte");
    public static DB2Type Char1 = getFrom(enumReflected, "Char1");
    public static DB2Type SmallFloat = getFrom(enumReflected, "SmallFloat");
    public static DB2Type Null = getFrom(enumReflected, "Null");
    public static DB2Type IntervalYearMonth = getFrom(enumReflected, "IntervalYearMonth");
    public static DB2Type IntervalDayFraction = getFrom(enumReflected, "IntervalDayFraction");
    public static DB2Type NChar = getFrom(enumReflected, "NChar");
    public static DB2Type NVarChar = getFrom(enumReflected, "NVarChar");
    public static DB2Type Set = getFrom(enumReflected, "Set");
    public static DB2Type MultiSet = getFrom(enumReflected, "MultiSet");
    public static DB2Type List = getFrom(enumReflected, "List");
    public static DB2Type Row = getFrom(enumReflected, "Row");
    public static DB2Type SQLUDTVar = getFrom(enumReflected, "SQLUDTVar");
    public static DB2Type SQLUDTFixed = getFrom(enumReflected, "SQLUDTFixed");
    public static DB2Type SmartLobLocator = getFrom(enumReflected, "SmartLobLocator");
    public static DB2Type Boolean = getFrom(enumReflected, "Boolean");
    public static DB2Type Other = getFrom(enumReflected, "Other");


    // Flags management section


}