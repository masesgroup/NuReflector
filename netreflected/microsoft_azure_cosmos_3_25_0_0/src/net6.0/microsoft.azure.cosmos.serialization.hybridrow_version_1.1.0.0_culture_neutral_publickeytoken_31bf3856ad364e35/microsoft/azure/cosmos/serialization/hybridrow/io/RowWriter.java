/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.azure.cosmos.serialization.hybridrow.io;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.ValueType;
import microsoft.azure.cosmos.serialization.hybridrow.Result;
import microsoft.azure.cosmos.core.utf8.UtfAnyString;
import system.DateTime;
import system.Decimal;
import microsoft.azure.cosmos.serialization.hybridrow.Float128;
import system.Single;
import system.Guid;
import system.SByte;
import microsoft.azure.cosmos.serialization.hybridrow.MongoDbObjectId;
import microsoft.azure.cosmos.core.utf8.Utf8Span;
import system.UInt16;
import system.UInt32;
import system.UInt64;
import microsoft.azure.cosmos.serialization.hybridrow.UnixDateTime;
import microsoft.azure.cosmos.serialization.hybridrow.layouts.Layout;
import microsoft.azure.cosmos.serialization.hybridrow.layouts.LayoutResolver;


/**
 * The base .NET class managing Microsoft.Azure.Cosmos.Serialization.HybridRow.IO.RowWriter, Microsoft.Azure.Cosmos.Serialization.HybridRow, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.Azure.Cosmos.Serialization.HybridRow.IO.RowWriter" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Microsoft.Azure.Cosmos.Serialization.HybridRow.IO.RowWriter</a>
 */
public class RowWriter extends ValueType  {
    /**
     * Fully assembly qualified name: Microsoft.Azure.Cosmos.Serialization.HybridRow, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
     */
    public static final String assemblyFullName = "Microsoft.Azure.Cosmos.Serialization.HybridRow, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
    /**
     * Assembly name: Microsoft.Azure.Cosmos.Serialization.HybridRow
     */
    public static final String assemblyShortName = "Microsoft.Azure.Cosmos.Serialization.HybridRow";
    /**
     * Qualified class name: Microsoft.Azure.Cosmos.Serialization.HybridRow.IO.RowWriter
     */
    public static final String className = "Microsoft.Azure.Cosmos.Serialization.HybridRow.IO.RowWriter";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public RowWriter(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link RowWriter}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link RowWriter} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static RowWriter cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new RowWriter(from.getJCOInstance());
    }

    // Constructors section
    
    public RowWriter() throws Throwable {
    }



    
    // Methods section
    
    public Result WriteBinary(UtfAnyString path, byte[] value) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteBinary = (JCObject)classInstance.Invoke("WriteBinary", path == null ? null : path.getJCOInstance(), value);
            return new Result(objWriteBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteBinary(UtfAnyString dupParam0, JCORefOut dupParam1) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteBinary = (JCObject)classInstance.Invoke("WriteBinary", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut());
            return new Result(objWriteBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteBool(UtfAnyString path, boolean value) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteBool = (JCObject)classInstance.Invoke("WriteBool", path == null ? null : path.getJCOInstance(), value);
            return new Result(objWriteBool);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteDateTime(UtfAnyString path, DateTime value) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteDateTime = (JCObject)classInstance.Invoke("WriteDateTime", path == null ? null : path.getJCOInstance(), value == null ? null : value.getJCOInstance());
            return new Result(objWriteDateTime);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteDecimal(UtfAnyString path, Decimal value) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteDecimal = (JCObject)classInstance.Invoke("WriteDecimal", path == null ? null : path.getJCOInstance(), value == null ? null : value.getJCOInstance());
            return new Result(objWriteDecimal);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteFloat128(UtfAnyString path, Float128 value) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteFloat128 = (JCObject)classInstance.Invoke("WriteFloat128", path == null ? null : path.getJCOInstance(), value == null ? null : value.getJCOInstance());
            return new Result(objWriteFloat128);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteFloat32(UtfAnyString path, Single value) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteFloat32 = (JCObject)classInstance.Invoke("WriteFloat32", path == null ? null : path.getJCOInstance(), value == null ? null : value.getJCOInstance());
            return new Result(objWriteFloat32);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteFloat64(UtfAnyString path, double value) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteFloat64 = (JCObject)classInstance.Invoke("WriteFloat64", path == null ? null : path.getJCOInstance(), value);
            return new Result(objWriteFloat64);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteGuid(UtfAnyString path, Guid value) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteGuid = (JCObject)classInstance.Invoke("WriteGuid", path == null ? null : path.getJCOInstance(), value == null ? null : value.getJCOInstance());
            return new Result(objWriteGuid);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteInt16(UtfAnyString path, short value) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteInt16 = (JCObject)classInstance.Invoke("WriteInt16", path == null ? null : path.getJCOInstance(), value);
            return new Result(objWriteInt16);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteInt32(UtfAnyString path, int value) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteInt32 = (JCObject)classInstance.Invoke("WriteInt32", path == null ? null : path.getJCOInstance(), value);
            return new Result(objWriteInt32);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteInt64(UtfAnyString path, long value) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteInt64 = (JCObject)classInstance.Invoke("WriteInt64", path == null ? null : path.getJCOInstance(), value);
            return new Result(objWriteInt64);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteInt8(UtfAnyString path, SByte value) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteInt8 = (JCObject)classInstance.Invoke("WriteInt8", path == null ? null : path.getJCOInstance(), value == null ? null : value.getJCOInstance());
            return new Result(objWriteInt8);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteMongoDbObjectId(UtfAnyString path, MongoDbObjectId value) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteMongoDbObjectId = (JCObject)classInstance.Invoke("WriteMongoDbObjectId", path == null ? null : path.getJCOInstance(), value == null ? null : value.getJCOInstance());
            return new Result(objWriteMongoDbObjectId);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteNull(UtfAnyString path) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteNull = (JCObject)classInstance.Invoke("WriteNull", path == null ? null : path.getJCOInstance());
            return new Result(objWriteNull);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteString(UtfAnyString path, Utf8Span value) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteString = (JCObject)classInstance.Invoke("WriteString", path == null ? null : path.getJCOInstance(), value == null ? null : value.getJCOInstance());
            return new Result(objWriteString);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteString(UtfAnyString path, java.lang.String value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.PlatformNotSupportedException, system.FormatException, microsoft.azure.cosmos.core.ContractViolationException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteString = (JCObject)classInstance.Invoke("WriteString", path == null ? null : path.getJCOInstance(), value);
            return new Result(objWriteString);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteUInt16(UtfAnyString path, UInt16 value) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteUInt16 = (JCObject)classInstance.Invoke("WriteUInt16", path == null ? null : path.getJCOInstance(), value == null ? null : value.getJCOInstance());
            return new Result(objWriteUInt16);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteUInt32(UtfAnyString path, UInt32 value) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteUInt32 = (JCObject)classInstance.Invoke("WriteUInt32", path == null ? null : path.getJCOInstance(), value == null ? null : value.getJCOInstance());
            return new Result(objWriteUInt32);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteUInt64(UtfAnyString path, UInt64 value) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteUInt64 = (JCObject)classInstance.Invoke("WriteUInt64", path == null ? null : path.getJCOInstance(), value == null ? null : value.getJCOInstance());
            return new Result(objWriteUInt64);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteUInt8(UtfAnyString path, byte value) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteUInt8 = (JCObject)classInstance.Invoke("WriteUInt8", path == null ? null : path.getJCOInstance(), value);
            return new Result(objWriteUInt8);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteUnixDateTime(UtfAnyString path, UnixDateTime value) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteUnixDateTime = (JCObject)classInstance.Invoke("WriteUnixDateTime", path == null ? null : path.getJCOInstance(), value == null ? null : value.getJCOInstance());
            return new Result(objWriteUnixDateTime);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteVarInt(UtfAnyString path, long value) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteVarInt = (JCObject)classInstance.Invoke("WriteVarInt", path == null ? null : path.getJCOInstance(), value);
            return new Result(objWriteVarInt);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result WriteVarUInt(UtfAnyString path, UInt64 value) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.FormatException, system.ArgumentOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWriteVarUInt = (JCObject)classInstance.Invoke("WriteVarUInt", path == null ? null : path.getJCOInstance(), value == null ? null : value.getJCOInstance());
            return new Result(objWriteVarUInt);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public int getLength() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("Length");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Layout getLayout() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Layout");
            return new Layout(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LayoutResolver getResolver() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Resolver");
            return new LayoutResolver(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}