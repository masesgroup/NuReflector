/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.azure.cosmos.serialization.hybridrow.io;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.ValueType;
import microsoft.azure.cosmos.serialization.hybridrow.RowBuffer;
import microsoft.azure.cosmos.serialization.hybridrow.io.RowReader;
import microsoft.azure.cosmos.serialization.hybridrow.Result;
import system.DateTime;
import system.Decimal;
import microsoft.azure.cosmos.serialization.hybridrow.Float128;
import system.Single;
import system.Guid;
import system.SByte;
import microsoft.azure.cosmos.serialization.hybridrow.MongoDbObjectId;
import microsoft.azure.cosmos.serialization.hybridrow.NullValue;
import microsoft.azure.cosmos.core.utf8.Utf8Span;
import microsoft.azure.cosmos.core.utf8.Utf8String;
import system.UInt16;
import system.UInt32;
import system.UInt64;
import microsoft.azure.cosmos.serialization.hybridrow.UnixDateTime;
import microsoft.azure.cosmos.core.utf8.UtfAnyString;
import microsoft.azure.cosmos.serialization.hybridrow.HybridRowHeader;
import microsoft.azure.cosmos.serialization.hybridrow.layouts.LayoutType;
import microsoft.azure.cosmos.serialization.hybridrow.layouts.TypeArgumentList;
import microsoft.azure.cosmos.serialization.hybridrow.schemas.StorageKind;


/**
 * The base .NET class managing Microsoft.Azure.Cosmos.Serialization.HybridRow.IO.RowReader, Microsoft.Azure.Cosmos.Serialization.HybridRow, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.Azure.Cosmos.Serialization.HybridRow.IO.RowReader" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Microsoft.Azure.Cosmos.Serialization.HybridRow.IO.RowReader</a>
 */
public class RowReader extends ValueType  {
    /**
     * Fully assembly qualified name: Microsoft.Azure.Cosmos.Serialization.HybridRow, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
     */
    public static final String assemblyFullName = "Microsoft.Azure.Cosmos.Serialization.HybridRow, Version=1.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
    /**
     * Assembly name: Microsoft.Azure.Cosmos.Serialization.HybridRow
     */
    public static final String assemblyShortName = "Microsoft.Azure.Cosmos.Serialization.HybridRow";
    /**
     * Qualified class name: Microsoft.Azure.Cosmos.Serialization.HybridRow.IO.RowReader
     */
    public static final String className = "Microsoft.Azure.Cosmos.Serialization.HybridRow.IO.RowReader";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public RowReader(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link RowReader}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link RowReader} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static RowReader cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new RowReader(from.getJCOInstance());
    }

    // Constructors section
    
    public RowReader() throws Throwable {
    }

    public RowReader(RowBuffer row) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.IndexOutOfRangeException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(row == null ? null : row.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    
    // Methods section
    
    public boolean Read() throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.FormatException, microsoft.azure.cosmos.core.ContractViolationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Read");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RowReader ReadScope() throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadScope = (JCObject)classInstance.Invoke("ReadScope");
            return new RowReader(objReadScope);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadBinary(JCORefOut value) throws Throwable, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadBinary = (JCObject)classInstance.Invoke("ReadBinary", value.getJCRefOut());
            return new Result(objReadBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadBool(JCORefOut<java.util.concurrent.atomic.AtomicBoolean> value) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadBool = (JCObject)classInstance.Invoke("ReadBool", value.getJCRefOut());
            return new Result(objReadBool);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadDateTime(JCORefOut<DateTime> value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadDateTime = (JCObject)classInstance.Invoke("ReadDateTime", value.getJCRefOut());
            return new Result(objReadDateTime);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadDecimal(JCORefOut<Decimal> value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadDecimal = (JCObject)classInstance.Invoke("ReadDecimal", value.getJCRefOut());
            return new Result(objReadDecimal);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadFloat128(JCORefOut<Float128> value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadFloat128 = (JCObject)classInstance.Invoke("ReadFloat128", value.getJCRefOut());
            return new Result(objReadFloat128);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadFloat32(JCORefOut<Single> value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadFloat32 = (JCObject)classInstance.Invoke("ReadFloat32", value.getJCRefOut());
            return new Result(objReadFloat32);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadFloat64(JCORefOut<java.util.concurrent.atomic.AtomicReference<java.lang.Double>> value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadFloat64 = (JCObject)classInstance.Invoke("ReadFloat64", value.getJCRefOut());
            return new Result(objReadFloat64);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadGuid(JCORefOut<Guid> value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadGuid = (JCObject)classInstance.Invoke("ReadGuid", value.getJCRefOut());
            return new Result(objReadGuid);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadInt16(JCORefOut<java.util.concurrent.atomic.AtomicReference<java.lang.Short>> value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadInt16 = (JCObject)classInstance.Invoke("ReadInt16", value.getJCRefOut());
            return new Result(objReadInt16);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadInt32(JCORefOut<java.util.concurrent.atomic.AtomicInteger> value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadInt32 = (JCObject)classInstance.Invoke("ReadInt32", value.getJCRefOut());
            return new Result(objReadInt32);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadInt64(JCORefOut<java.util.concurrent.atomic.AtomicLong> value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadInt64 = (JCObject)classInstance.Invoke("ReadInt64", value.getJCRefOut());
            return new Result(objReadInt64);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadInt8(JCORefOut<SByte> value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.IndexOutOfRangeException, system.PlatformNotSupportedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadInt8 = (JCObject)classInstance.Invoke("ReadInt8", value.getJCRefOut());
            return new Result(objReadInt8);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadMongoDbObjectId(JCORefOut<MongoDbObjectId> value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadMongoDbObjectId = (JCObject)classInstance.Invoke("ReadMongoDbObjectId", value.getJCRefOut());
            return new Result(objReadMongoDbObjectId);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadNull(JCORefOut<NullValue> value) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadNull = (JCObject)classInstance.Invoke("ReadNull", value.getJCRefOut());
            return new Result(objReadNull);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadString(JCORefOut<Utf8Span> value) throws Throwable, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadString = (JCObject)classInstance.Invoke("ReadString", value.getJCRefOut());
            return new Result(objReadString);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadString(JCORefOut<Utf8String> value) throws Throwable, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadString = (JCObject)classInstance.Invoke("ReadString", value.getJCRefOut());
            return new Result(objReadString);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadString(JCORefOut value) throws Throwable, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadString = (JCObject)classInstance.Invoke("ReadString", value.getJCRefOut());
            return new Result(objReadString);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadUInt16(JCORefOut<UInt16> value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadUInt16 = (JCObject)classInstance.Invoke("ReadUInt16", value.getJCRefOut());
            return new Result(objReadUInt16);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadUInt32(JCORefOut<UInt32> value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadUInt32 = (JCObject)classInstance.Invoke("ReadUInt32", value.getJCRefOut());
            return new Result(objReadUInt32);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadUInt64(JCORefOut<UInt64> value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadUInt64 = (JCObject)classInstance.Invoke("ReadUInt64", value.getJCRefOut());
            return new Result(objReadUInt64);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadUInt8(JCORefOut<java.util.concurrent.atomic.AtomicReference<java.lang.Byte>> value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.IndexOutOfRangeException, system.PlatformNotSupportedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadUInt8 = (JCObject)classInstance.Invoke("ReadUInt8", value.getJCRefOut());
            return new Result(objReadUInt8);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadUnixDateTime(JCORefOut<UnixDateTime> value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadUnixDateTime = (JCObject)classInstance.Invoke("ReadUnixDateTime", value.getJCRefOut());
            return new Result(objReadUnixDateTime);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadVarInt(JCORefOut<java.util.concurrent.atomic.AtomicLong> value) throws Throwable, system.IndexOutOfRangeException, system.PlatformNotSupportedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadVarInt = (JCObject)classInstance.Invoke("ReadVarInt", value.getJCRefOut());
            return new Result(objReadVarInt);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result ReadVarUInt(JCORefOut<UInt64> value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.IndexOutOfRangeException, system.PlatformNotSupportedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReadVarUInt = (JCObject)classInstance.Invoke("ReadVarUInt", value.getJCRefOut());
            return new Result(objReadVarUInt);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Result SkipScope(JCORefOut<RowReader> nestedReader) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.IndexOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSkipScope = (JCObject)classInstance.Invoke("SkipScope", nestedReader.getJCRefOut());
            return new Result(objSkipScope);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public boolean getHasValue() throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, microsoft.azure.cosmos.core.ContractViolationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("HasValue");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getIndex() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("Index");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getLength() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("Length");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Utf8Span getPathSpan() throws Throwable, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("PathSpan");
            return new Utf8Span(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public UtfAnyString getPath() throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Path");
            return new UtfAnyString(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public HybridRowHeader getHeader() throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Header");
            return new HybridRowHeader(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LayoutType getType() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Type");
            return new LayoutType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TypeArgumentList getTypeArgs() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("TypeArgs");
            return new TypeArgumentList(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StorageKind getStorage() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Storage");
            return new StorageKind(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}