/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.azure.management.redis;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import microsoft.azure.management.redis.models.RedisAccessKeys;
import microsoft.azure.management.redis.IRedisOperations;
import microsoft.azure.management.redis.IRedisOperationsImplementation;
import microsoft.azure.management.redis.models.RedisRegenerateKeyParameters;
import microsoft.azure.management.redis.models.RedisForceRebootResponse;
import microsoft.azure.management.redis.models.RedisRebootParameters;
import microsoft.azure.management.redis.models.RedisResource;
import microsoft.azure.management.redis.models.RedisCreateParameters;
import microsoft.azure.management.redis.models.RedisUpdateParameters;
import system.threading.tasks.Task;
import system.threading.CancellationToken;
import microsoft.azure.management.redis.models.ExportRDBParameters;
import microsoft.azure.management.redis.models.ImportRDBParameters;
import microsoft.azure.management.redis.models.CheckNameAvailabilityParameters;


/**
 * The base .NET class managing Microsoft.Azure.Management.Redis.RedisOperationsExtensions, Microsoft.Azure.Management.Redis, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.Azure.Management.Redis.RedisOperationsExtensions" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Microsoft.Azure.Management.Redis.RedisOperationsExtensions</a>
 */
public class RedisOperationsExtensions extends NetObject  {
    /**
     * Fully assembly qualified name: Microsoft.Azure.Management.Redis, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
     */
    public static final String assemblyFullName = "Microsoft.Azure.Management.Redis, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
    /**
     * Assembly name: Microsoft.Azure.Management.Redis
     */
    public static final String assemblyShortName = "Microsoft.Azure.Management.Redis";
    /**
     * Qualified class name: Microsoft.Azure.Management.Redis.RedisOperationsExtensions
     */
    public static final String className = "Microsoft.Azure.Management.Redis.RedisOperationsExtensions";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public RedisOperationsExtensions(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link RedisOperationsExtensions}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link RedisOperationsExtensions} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static RedisOperationsExtensions cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new RedisOperationsExtensions(from.getJCOInstance());
    }

    // Constructors section
    
    public RedisOperationsExtensions() throws Throwable {
    }

    
    // Methods section
    
    public static RedisAccessKeys ListKeys(IRedisOperations operations, java.lang.String resourceGroupName, java.lang.String name) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objListKeys = (JCObject)classType.Invoke("ListKeys", operations == null ? null : operations.getJCOInstance(), resourceGroupName, name);
            return new RedisAccessKeys(objListKeys);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RedisAccessKeys RegenerateKey(IRedisOperations operations, java.lang.String resourceGroupName, java.lang.String name, RedisRegenerateKeyParameters parameters) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objRegenerateKey = (JCObject)classType.Invoke("RegenerateKey", operations == null ? null : operations.getJCOInstance(), resourceGroupName, name, parameters == null ? null : parameters.getJCOInstance());
            return new RedisAccessKeys(objRegenerateKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RedisForceRebootResponse ForceReboot(IRedisOperations operations, java.lang.String resourceGroupName, java.lang.String name, RedisRebootParameters parameters) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objForceReboot = (JCObject)classType.Invoke("ForceReboot", operations == null ? null : operations.getJCOInstance(), resourceGroupName, name, parameters == null ? null : parameters.getJCOInstance());
            return new RedisForceRebootResponse(objForceReboot);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RedisResource BeginCreate(IRedisOperations operations, java.lang.String resourceGroupName, java.lang.String name, RedisCreateParameters parameters) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objBeginCreate = (JCObject)classType.Invoke("BeginCreate", operations == null ? null : operations.getJCOInstance(), resourceGroupName, name, parameters == null ? null : parameters.getJCOInstance());
            return new RedisResource(objBeginCreate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RedisResource Create(IRedisOperations operations, java.lang.String resourceGroupName, java.lang.String name, RedisCreateParameters parameters) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCreate = (JCObject)classType.Invoke("Create", operations == null ? null : operations.getJCOInstance(), resourceGroupName, name, parameters == null ? null : parameters.getJCOInstance());
            return new RedisResource(objCreate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RedisResource Get(IRedisOperations operations, java.lang.String resourceGroupName, java.lang.String name) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGet = (JCObject)classType.Invoke("Get", operations == null ? null : operations.getJCOInstance(), resourceGroupName, name);
            return new RedisResource(objGet);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RedisResource Update(IRedisOperations operations, java.lang.String resourceGroupName, java.lang.String name, RedisUpdateParameters parameters) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objUpdate = (JCObject)classType.Invoke("Update", operations == null ? null : operations.getJCOInstance(), resourceGroupName, name, parameters == null ? null : parameters.getJCOInstance());
            return new RedisResource(objUpdate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task BeginDeleteAsync(IRedisOperations operations, java.lang.String resourceGroupName, java.lang.String name, CancellationToken cancellationToken) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objBeginDeleteAsync = (JCObject)classType.Invoke("BeginDeleteAsync", operations == null ? null : operations.getJCOInstance(), resourceGroupName, name, cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBeginDeleteAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task BeginExportDataAsync(IRedisOperations operations, java.lang.String resourceGroupName, java.lang.String name, ExportRDBParameters parameters, CancellationToken cancellationToken) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objBeginExportDataAsync = (JCObject)classType.Invoke("BeginExportDataAsync", operations == null ? null : operations.getJCOInstance(), resourceGroupName, name, parameters == null ? null : parameters.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBeginExportDataAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task BeginImportDataAsync(IRedisOperations operations, java.lang.String resourceGroupName, java.lang.String name, ImportRDBParameters parameters, CancellationToken cancellationToken) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objBeginImportDataAsync = (JCObject)classType.Invoke("BeginImportDataAsync", operations == null ? null : operations.getJCOInstance(), resourceGroupName, name, parameters == null ? null : parameters.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBeginImportDataAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task CheckNameAvailabilityAsync(IRedisOperations operations, CheckNameAvailabilityParameters parameters, CancellationToken cancellationToken) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCheckNameAvailabilityAsync = (JCObject)classType.Invoke("CheckNameAvailabilityAsync", operations == null ? null : operations.getJCOInstance(), parameters == null ? null : parameters.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objCheckNameAvailabilityAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task DeleteAsync(IRedisOperations operations, java.lang.String resourceGroupName, java.lang.String name, CancellationToken cancellationToken) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objDeleteAsync = (JCObject)classType.Invoke("DeleteAsync", operations == null ? null : operations.getJCOInstance(), resourceGroupName, name, cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objDeleteAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task ExportDataAsync(IRedisOperations operations, java.lang.String resourceGroupName, java.lang.String name, ExportRDBParameters parameters, CancellationToken cancellationToken) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objExportDataAsync = (JCObject)classType.Invoke("ExportDataAsync", operations == null ? null : operations.getJCOInstance(), resourceGroupName, name, parameters == null ? null : parameters.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objExportDataAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task ImportDataAsync(IRedisOperations operations, java.lang.String resourceGroupName, java.lang.String name, ImportRDBParameters parameters, CancellationToken cancellationToken) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objImportDataAsync = (JCObject)classType.Invoke("ImportDataAsync", operations == null ? null : operations.getJCOInstance(), resourceGroupName, name, parameters == null ? null : parameters.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objImportDataAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void BeginDelete(IRedisOperations operations, java.lang.String resourceGroupName, java.lang.String name) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("BeginDelete", operations == null ? null : operations.getJCOInstance(), resourceGroupName, name);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void BeginExportData(IRedisOperations operations, java.lang.String resourceGroupName, java.lang.String name, ExportRDBParameters parameters) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("BeginExportData", operations == null ? null : operations.getJCOInstance(), resourceGroupName, name, parameters == null ? null : parameters.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void BeginImportData(IRedisOperations operations, java.lang.String resourceGroupName, java.lang.String name, ImportRDBParameters parameters) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("BeginImportData", operations == null ? null : operations.getJCOInstance(), resourceGroupName, name, parameters == null ? null : parameters.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void CheckNameAvailability(IRedisOperations operations, CheckNameAvailabilityParameters parameters) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("CheckNameAvailability", operations == null ? null : operations.getJCOInstance(), parameters == null ? null : parameters.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Delete(IRedisOperations operations, java.lang.String resourceGroupName, java.lang.String name) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Delete", operations == null ? null : operations.getJCOInstance(), resourceGroupName, name);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void ExportData(IRedisOperations operations, java.lang.String resourceGroupName, java.lang.String name, ExportRDBParameters parameters) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("ExportData", operations == null ? null : operations.getJCOInstance(), resourceGroupName, name, parameters == null ? null : parameters.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void ImportData(IRedisOperations operations, java.lang.String resourceGroupName, java.lang.String name, ImportRDBParameters parameters) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("ImportData", operations == null ? null : operations.getJCOInstance(), resourceGroupName, name, parameters == null ? null : parameters.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}