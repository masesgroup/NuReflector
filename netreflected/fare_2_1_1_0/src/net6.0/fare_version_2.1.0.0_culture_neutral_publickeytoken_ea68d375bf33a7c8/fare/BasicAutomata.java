/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package fare;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import fare.Automaton;


/**
 * The base .NET class managing Fare.BasicAutomata, Fare, Version=2.1.0.0, Culture=neutral, PublicKeyToken=ea68d375bf33a7c8.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Fare.BasicAutomata" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Fare.BasicAutomata</a>
 */
public class BasicAutomata extends NetObject  {
    /**
     * Fully assembly qualified name: Fare, Version=2.1.0.0, Culture=neutral, PublicKeyToken=ea68d375bf33a7c8
     */
    public static final String assemblyFullName = "Fare, Version=2.1.0.0, Culture=neutral, PublicKeyToken=ea68d375bf33a7c8";
    /**
     * Assembly name: Fare
     */
    public static final String assemblyShortName = "Fare";
    /**
     * Qualified class name: Fare.BasicAutomata
     */
    public static final String className = "Fare.BasicAutomata";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public BasicAutomata(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link BasicAutomata}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link BasicAutomata} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static BasicAutomata cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new BasicAutomata(from.getJCOInstance());
    }

    // Constructors section
    
    public BasicAutomata() throws Throwable {
    }

    
    // Methods section
    
    public static Automaton MakeAnyChar() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMakeAnyChar = (JCObject)classType.Invoke("MakeAnyChar");
            return new Automaton(objMakeAnyChar);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Automaton MakeAnyString() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMakeAnyString = (JCObject)classType.Invoke("MakeAnyString");
            return new Automaton(objMakeAnyString);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Automaton MakeChar(char c) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMakeChar = (JCObject)classType.Invoke("MakeChar", c);
            return new Automaton(objMakeChar);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Automaton MakeCharRange(char min, char max) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMakeCharRange = (JCObject)classType.Invoke("MakeCharRange", min, max);
            return new Automaton(objMakeCharRange);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Automaton MakeCharSet(java.lang.String set) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMakeCharSet = (JCObject)classType.Invoke("MakeCharSet", set);
            return new Automaton(objMakeCharSet);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Automaton MakeDecimalValue(java.lang.String value) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMakeDecimalValue = (JCObject)classType.Invoke("MakeDecimalValue", value);
            return new Automaton(objMakeDecimalValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Automaton MakeEmpty() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMakeEmpty = (JCObject)classType.Invoke("MakeEmpty");
            return new Automaton(objMakeEmpty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Automaton MakeEmptyString() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMakeEmptyString = (JCObject)classType.Invoke("MakeEmptyString");
            return new Automaton(objMakeEmptyString);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Automaton MakeFractionDigits(int i) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.IndexOutOfRangeException, system.InvalidOperationException, system.PlatformNotSupportedException, system.FormatException, system.ArgumentOutOfRangeException, system.collections.generic.KeyNotFoundException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMakeFractionDigits = (JCObject)classType.Invoke("MakeFractionDigits", i);
            return new Automaton(objMakeFractionDigits);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Automaton MakeIntegerValue(java.lang.String value) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMakeIntegerValue = (JCObject)classType.Invoke("MakeIntegerValue", value);
            return new Automaton(objMakeIntegerValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Automaton MakeInterval(int min, int max, int digits) throws Throwable, system.PlatformNotSupportedException, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.ArrayTypeMismatchException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMakeInterval = (JCObject)classType.Invoke("MakeInterval", min, max, digits);
            return new Automaton(objMakeInterval);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Automaton MakeMaxInteger(java.lang.String n) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.collections.generic.KeyNotFoundException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMakeMaxInteger = (JCObject)classType.Invoke("MakeMaxInteger", n);
            return new Automaton(objMakeMaxInteger);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Automaton MakeMinInteger(java.lang.String n) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.collections.generic.KeyNotFoundException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMakeMinInteger = (JCObject)classType.Invoke("MakeMinInteger", n);
            return new Automaton(objMakeMinInteger);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Automaton MakeString(java.lang.String s) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMakeString = (JCObject)classType.Invoke("MakeString", s);
            return new Automaton(objMakeString);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Automaton MakeStringMatcher(java.lang.String s) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.RankException, system.ArgumentOutOfRangeException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMakeStringMatcher = (JCObject)classType.Invoke("MakeStringMatcher", s);
            return new Automaton(objMakeStringMatcher);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Automaton MakeTotalDigits(int i) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.FormatException, system.collections.generic.KeyNotFoundException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMakeTotalDigits = (JCObject)classType.Invoke("MakeTotalDigits", i);
            return new Automaton(objMakeTotalDigits);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}