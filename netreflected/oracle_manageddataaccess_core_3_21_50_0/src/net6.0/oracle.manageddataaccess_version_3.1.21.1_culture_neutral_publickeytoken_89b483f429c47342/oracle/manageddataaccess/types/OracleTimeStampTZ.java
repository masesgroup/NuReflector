/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package oracle.manageddataaccess.types;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.ValueType;
import system.DateTime;
import oracle.manageddataaccess.types.OracleTimeStampTZ;
import oracle.manageddataaccess.types.OracleDate;
import oracle.manageddataaccess.types.OracleIntervalDS;
import oracle.manageddataaccess.types.OracleIntervalYM;
import oracle.manageddataaccess.types.OracleTimeStamp;
import oracle.manageddataaccess.types.OracleTimeStampLTZ;
import system.TimeSpan;
import system.xml.XmlQualifiedName;
import system.xml.schema.XmlSchemaSet;
import system.xml.schema.XmlSchema;
import system.xml.XmlReader;
import system.xml.XmlWriter;
import system.xml.serialization.IXmlSerializable;
import system.xml.serialization.IXmlSerializableImplementation;


/**
 * The base .NET class managing Oracle.ManagedDataAccess.Types.OracleTimeStampTZ, Oracle.ManagedDataAccess, Version=3.1.21.1, Culture=neutral, PublicKeyToken=89b483f429c47342.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Oracle.ManagedDataAccess.Types.OracleTimeStampTZ" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Oracle.ManagedDataAccess.Types.OracleTimeStampTZ</a>
 */
public class OracleTimeStampTZ extends ValueType implements system.xml.serialization.IXmlSerializable {
    /**
     * Fully assembly qualified name: Oracle.ManagedDataAccess, Version=3.1.21.1, Culture=neutral, PublicKeyToken=89b483f429c47342
     */
    public static final String assemblyFullName = "Oracle.ManagedDataAccess, Version=3.1.21.1, Culture=neutral, PublicKeyToken=89b483f429c47342";
    /**
     * Assembly name: Oracle.ManagedDataAccess
     */
    public static final String assemblyShortName = "Oracle.ManagedDataAccess";
    /**
     * Qualified class name: Oracle.ManagedDataAccess.Types.OracleTimeStampTZ
     */
    public static final String className = "Oracle.ManagedDataAccess.Types.OracleTimeStampTZ";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public OracleTimeStampTZ(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link OracleTimeStampTZ}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link OracleTimeStampTZ} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static OracleTimeStampTZ cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new OracleTimeStampTZ(from.getJCOInstance());
    }

    // Constructors section
    
    public OracleTimeStampTZ() throws Throwable {
    }

    public OracleTimeStampTZ(byte[] binData) throws Throwable, system.PlatformNotSupportedException, system.OverflowException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.FormatException, system.ArgumentNullException, system.NotSupportedException, system.RankException, system.ArrayTypeMismatchException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, oracle.manageddataaccess.client.OracleException, system.InvalidTimeZoneException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject((java.lang.Object)binData));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampTZ(int year, int month, int day, int hour, int minute, int second, double millisecond, java.lang.String timeZone) throws Throwable, system.PlatformNotSupportedException, system.OverflowException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.FormatException, system.ArgumentNullException, system.NotSupportedException, system.RankException, system.ArrayTypeMismatchException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, oracle.manageddataaccess.client.OracleException, system.InvalidTimeZoneException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(year, month, day, hour, minute, second, millisecond, timeZone));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampTZ(int year, int month, int day, int hour, int minute, int second, double millisecond) throws Throwable, system.PlatformNotSupportedException, system.OverflowException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.FormatException, system.ArgumentNullException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.RankException, system.NotSupportedException, system.io.FileNotFoundException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, oracle.manageddataaccess.client.OracleException, system.InvalidTimeZoneException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(year, month, day, hour, minute, second, millisecond));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampTZ(int year, int month, int day, int hour, int minute, int second, int nanosecond, java.lang.String timeZone) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, system.BadImageFormatException, system.threading.SynchronizationLockException, oracle.manageddataaccess.client.OracleException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(year, month, day, hour, minute, second, nanosecond, timeZone));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampTZ(int year, int month, int day, int hour, int minute, int second, int nanosecond) throws Throwable, system.PlatformNotSupportedException, system.OverflowException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.FormatException, system.ArgumentNullException, system.NotSupportedException, system.RankException, system.ArrayTypeMismatchException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, oracle.manageddataaccess.client.OracleException, system.InvalidTimeZoneException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(year, month, day, hour, minute, second, nanosecond));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampTZ(int year, int month, int day, int hour, int minute, int second, java.lang.String timeZone) throws Throwable, system.PlatformNotSupportedException, system.OverflowException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.FormatException, system.ArgumentNullException, system.NotSupportedException, system.RankException, system.ArrayTypeMismatchException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, oracle.manageddataaccess.client.OracleException, system.InvalidTimeZoneException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(year, month, day, hour, minute, second, timeZone));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampTZ(int year, int month, int day, int hour, int minute, int second) throws Throwable, system.PlatformNotSupportedException, system.OverflowException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.FormatException, system.ArgumentNullException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.RankException, system.NotSupportedException, system.io.FileNotFoundException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, oracle.manageddataaccess.client.OracleException, system.InvalidTimeZoneException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(year, month, day, hour, minute, second));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampTZ(int year, int month, int day, java.lang.String timeZone) throws Throwable, system.PlatformNotSupportedException, system.OverflowException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.FormatException, system.ArgumentNullException, system.NotSupportedException, system.RankException, system.ArrayTypeMismatchException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, oracle.manageddataaccess.client.OracleException, system.InvalidTimeZoneException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(year, month, day, timeZone));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampTZ(int year, int month, int day) throws Throwable, system.PlatformNotSupportedException, system.OverflowException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.FormatException, system.ArgumentNullException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.RankException, system.NotSupportedException, system.io.FileNotFoundException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, oracle.manageddataaccess.client.OracleException, system.InvalidTimeZoneException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(year, month, day));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampTZ(DateTime data, java.lang.String timeZone) throws Throwable, system.PlatformNotSupportedException, system.OverflowException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.FormatException, system.ArgumentNullException, system.NotSupportedException, system.RankException, system.ArrayTypeMismatchException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, system.threading.LockRecursionException, system.threading.SynchronizationLockException, oracle.manageddataaccess.client.OracleException, system.InvalidTimeZoneException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(data == null ? null : data.getJCOInstance(), timeZone));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampTZ(DateTime data) throws Throwable, system.PlatformNotSupportedException, system.OverflowException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.FormatException, system.ArgumentNullException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.RankException, system.NotSupportedException, system.io.FileNotFoundException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, system.threading.LockRecursionException, system.threading.SynchronizationLockException, oracle.manageddataaccess.client.OracleException, system.InvalidTimeZoneException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(data == null ? null : data.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampTZ(java.lang.String tsStr) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, oracle.manageddataaccess.client.OracleException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(tsStr));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    
    // Methods section
    
    public static boolean Equals(OracleTimeStampTZ value1, OracleTimeStampTZ value2) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.threading.SynchronizationLockException, oracle.manageddataaccess.client.OracleException, system.collections.generic.KeyNotFoundException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("Equals", value1 == null ? null : value1.getJCOInstance(), value2 == null ? null : value2.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean GreaterThan(OracleTimeStampTZ value1, OracleTimeStampTZ value2) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.threading.SynchronizationLockException, oracle.manageddataaccess.client.OracleException, system.collections.generic.KeyNotFoundException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("GreaterThan", value1 == null ? null : value1.getJCOInstance(), value2 == null ? null : value2.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean GreaterThanOrEqual(OracleTimeStampTZ value1, OracleTimeStampTZ value2) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.threading.SynchronizationLockException, oracle.manageddataaccess.client.OracleException, system.collections.generic.KeyNotFoundException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("GreaterThanOrEqual", value1 == null ? null : value1.getJCOInstance(), value2 == null ? null : value2.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean LessThan(OracleTimeStampTZ value1, OracleTimeStampTZ value2) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.threading.SynchronizationLockException, oracle.manageddataaccess.client.OracleException, system.collections.generic.KeyNotFoundException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("LessThan", value1 == null ? null : value1.getJCOInstance(), value2 == null ? null : value2.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean LessThanOrEqual(OracleTimeStampTZ value1, OracleTimeStampTZ value2) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.threading.SynchronizationLockException, oracle.manageddataaccess.client.OracleException, system.collections.generic.KeyNotFoundException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("LessThanOrEqual", value1 == null ? null : value1.getJCOInstance(), value2 == null ? null : value2.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean NotEquals(OracleTimeStampTZ value1, OracleTimeStampTZ value2) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.threading.SynchronizationLockException, oracle.manageddataaccess.client.OracleException, system.collections.generic.KeyNotFoundException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("NotEquals", value1 == null ? null : value1.getJCOInstance(), value2 == null ? null : value2.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int CompareTo(NetObject obj) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.threading.SynchronizationLockException, oracle.manageddataaccess.client.OracleException, system.collections.generic.KeyNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Invoke("CompareTo", obj == null ? null : obj.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleDate ToOracleDate() throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, system.threading.LockRecursionException, system.threading.SynchronizationLockException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objToOracleDate = (JCObject)classInstance.Invoke("ToOracleDate");
            return new OracleDate(objToOracleDate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleIntervalDS GetDaysBetween(OracleTimeStampTZ value) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, oracle.manageddataaccess.client.OracleException, oracle.manageddataaccess.types.OracleNullValueException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDaysBetween = (JCObject)classInstance.Invoke("GetDaysBetween", value == null ? null : value.getJCOInstance());
            return new OracleIntervalDS(objGetDaysBetween);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleIntervalYM GetYearsBetween(OracleTimeStampTZ value) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, oracle.manageddataaccess.client.OracleException, oracle.manageddataaccess.types.OracleNullValueException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetYearsBetween = (JCObject)classInstance.Invoke("GetYearsBetween", value == null ? null : value.getJCOInstance());
            return new OracleIntervalYM(objGetYearsBetween);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStamp ToOracleTimeStamp() throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.threading.SynchronizationLockException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objToOracleTimeStamp = (JCObject)classInstance.Invoke("ToOracleTimeStamp");
            return new OracleTimeStamp(objToOracleTimeStamp);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampLTZ ToLocalTime() throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.threading.SynchronizationLockException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objToLocalTime = (JCObject)classInstance.Invoke("ToLocalTime");
            return new OracleTimeStampLTZ(objToLocalTime);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampLTZ ToOracleTimeStampLTZ() throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.threading.SynchronizationLockException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objToOracleTimeStampLTZ = (JCObject)classInstance.Invoke("ToOracleTimeStampLTZ");
            return new OracleTimeStampLTZ(objToOracleTimeStampLTZ);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampTZ AddDays(double days) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, oracle.manageddataaccess.client.OracleException, oracle.manageddataaccess.types.OracleNullValueException, system.collections.generic.KeyNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddDays = (JCObject)classInstance.Invoke("AddDays", days);
            return new OracleTimeStampTZ(objAddDays);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampTZ AddHours(double hours) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, oracle.manageddataaccess.client.OracleException, oracle.manageddataaccess.types.OracleNullValueException, system.collections.generic.KeyNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddHours = (JCObject)classInstance.Invoke("AddHours", hours);
            return new OracleTimeStampTZ(objAddHours);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampTZ AddMilliseconds(double milliseconds) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, oracle.manageddataaccess.client.OracleException, oracle.manageddataaccess.types.OracleNullValueException, system.collections.generic.KeyNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddMilliseconds = (JCObject)classInstance.Invoke("AddMilliseconds", milliseconds);
            return new OracleTimeStampTZ(objAddMilliseconds);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampTZ AddMinutes(double minutes) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, oracle.manageddataaccess.client.OracleException, oracle.manageddataaccess.types.OracleNullValueException, system.collections.generic.KeyNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddMinutes = (JCObject)classInstance.Invoke("AddMinutes", minutes);
            return new OracleTimeStampTZ(objAddMinutes);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampTZ AddMonths(long months) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, oracle.manageddataaccess.client.OracleException, system.collections.generic.KeyNotFoundException, oracle.manageddataaccess.types.OracleNullValueException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddMonths = (JCObject)classInstance.Invoke("AddMonths", months);
            return new OracleTimeStampTZ(objAddMonths);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampTZ AddNanoseconds(long nanoseconds) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, oracle.manageddataaccess.client.OracleException, oracle.manageddataaccess.types.OracleNullValueException, system.collections.generic.KeyNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddNanoseconds = (JCObject)classInstance.Invoke("AddNanoseconds", nanoseconds);
            return new OracleTimeStampTZ(objAddNanoseconds);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampTZ AddSeconds(double seconds) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, oracle.manageddataaccess.client.OracleException, oracle.manageddataaccess.types.OracleNullValueException, system.collections.generic.KeyNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddSeconds = (JCObject)classInstance.Invoke("AddSeconds", seconds);
            return new OracleTimeStampTZ(objAddSeconds);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampTZ AddYears(int years) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, system.BadImageFormatException, system.io.IOException, oracle.manageddataaccess.client.OracleException, oracle.manageddataaccess.types.OracleNullValueException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddYears = (JCObject)classInstance.Invoke("AddYears", years);
            return new OracleTimeStampTZ(objAddYears);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static OracleTimeStampTZ GetSysDate() throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, system.threading.LockRecursionException, system.threading.SynchronizationLockException, oracle.manageddataaccess.client.OracleException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetSysDate = (JCObject)classType.Invoke("GetSysDate");
            return new OracleTimeStampTZ(objGetSysDate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static OracleTimeStampTZ Parse(java.lang.String tsStr) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, oracle.manageddataaccess.client.OracleException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objParse = (JCObject)classType.Invoke("Parse", tsStr);
            return new OracleTimeStampTZ(objParse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static OracleTimeStampTZ SetPrecision(OracleTimeStampTZ value1, int fracSecPrecision) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, system.BadImageFormatException, oracle.manageddataaccess.types.OracleNullValueException, oracle.manageddataaccess.client.OracleException, system.ArithmeticException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objSetPrecision = (JCObject)classType.Invoke("SetPrecision", value1 == null ? null : value1.getJCOInstance(), fracSecPrecision);
            return new OracleTimeStampTZ(objSetPrecision);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OracleTimeStampTZ ToUniversalTime() throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, system.threading.LockRecursionException, system.threading.SynchronizationLockException, oracle.manageddataaccess.client.OracleException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objToUniversalTime = (JCObject)classInstance.Invoke("ToUniversalTime");
            return new OracleTimeStampTZ(objToUniversalTime);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan GetTimeZoneOffset() throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidTimeZoneException, system.OverflowException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.RankException, system.NotSupportedException, system.OutOfMemoryException, system.componentmodel.Win32Exception, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, oracle.manageddataaccess.client.OracleException, oracle.manageddataaccess.types.OracleNullValueException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetTimeZoneOffset = (JCObject)classInstance.Invoke("GetTimeZoneOffset");
            return new TimeSpan(objGetTimeZoneOffset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetXsdType = (JCObject)classType.Invoke("GetXsdType", schemaSet == null ? null : schemaSet.getJCOInstance());
            return new XmlQualifiedName(objGetXsdType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIXmlSerializable method available in IXmlSerializable to obtain an object with an invocable method
     */
    @Deprecated 
    public XmlSchema GetSchema() throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIXmlSerializable to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIXmlSerializable method available in IXmlSerializable to obtain an object with an invocable method
     */
    @Deprecated 
    public void ReadXml(XmlReader reader) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIXmlSerializable to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIXmlSerializable method available in IXmlSerializable to obtain an object with an invocable method
     */
    @Deprecated 
    public void WriteXml(XmlWriter writer) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIXmlSerializable to obtain the full interface.");
    }


    
    // Properties section
    
    public boolean getIsNull() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IsNull");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] getBinData() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.collections.generic.KeyNotFoundException, system.BadImageFormatException, system.FormatException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, oracle.manageddataaccess.types.OracleNullValueException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("BinData");
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
			for(int indexBinData = 0; indexBinData < resultingArrayList.size(); indexBinData++ ) {
				resultingArray[indexBinData] = (byte)resultingArrayList.get(indexBinData);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getMillisecond() throws Throwable, system.PlatformNotSupportedException, system.OverflowException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.FormatException, system.ArgumentNullException, system.NotSupportedException, system.RankException, system.ArrayTypeMismatchException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, oracle.manageddataaccess.client.OracleException, system.InvalidTimeZoneException, oracle.manageddataaccess.types.OracleNullValueException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (double)classInstance.Get("Millisecond");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getDay() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.collections.generic.KeyNotFoundException, system.BadImageFormatException, system.FormatException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, oracle.manageddataaccess.types.OracleNullValueException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("Day");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getHour() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.collections.generic.KeyNotFoundException, system.BadImageFormatException, system.FormatException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, oracle.manageddataaccess.types.OracleNullValueException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("Hour");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMinute() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.collections.generic.KeyNotFoundException, system.BadImageFormatException, system.FormatException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, oracle.manageddataaccess.types.OracleNullValueException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("Minute");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMonth() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.collections.generic.KeyNotFoundException, system.BadImageFormatException, system.FormatException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, oracle.manageddataaccess.types.OracleNullValueException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("Month");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getNanosecond() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.collections.generic.KeyNotFoundException, system.BadImageFormatException, system.FormatException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, oracle.manageddataaccess.types.OracleNullValueException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("Nanosecond");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getSecond() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.collections.generic.KeyNotFoundException, system.BadImageFormatException, system.FormatException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, oracle.manageddataaccess.types.OracleNullValueException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("Second");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getYear() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.collections.generic.KeyNotFoundException, system.BadImageFormatException, system.FormatException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, oracle.manageddataaccess.types.OracleNullValueException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("Year");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DateTime getValue() throws Throwable, system.PlatformNotSupportedException, system.OverflowException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.FormatException, system.ArgumentNullException, system.NotSupportedException, system.RankException, system.ArrayTypeMismatchException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, oracle.manageddataaccess.types.OracleTypeException, oracle.manageddataaccess.client.OracleException, system.InvalidTimeZoneException, oracle.manageddataaccess.types.OracleNullValueException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Value");
            return new DateTime(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTimeZone() throws Throwable, system.PlatformNotSupportedException, system.OverflowException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException, system.FormatException, system.ArgumentNullException, system.NotSupportedException, system.RankException, system.ArrayTypeMismatchException, system.componentmodel.Win32Exception, system.OutOfMemoryException, system.io.FileNotFoundException, system.AccessViolationException, system.NotImplementedException, system.ObjectDisposedException, system.collections.generic.KeyNotFoundException, system.threading.LockRecursionException, system.threading.SynchronizationLockException, oracle.manageddataaccess.types.OracleNullValueException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("TimeZone");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}