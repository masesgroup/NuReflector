/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package npgsqltypes;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.ValueType;
import system.TimeSpan;
import npgsqltypes.NpgsqlTimeSpan;
import system.collections.IComparer;
import system.collections.IComparerImplementation;


/**
 * The base .NET class managing NpgsqlTypes.NpgsqlTimeSpan, Npgsql, Version=6.0.3.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/NpgsqlTypes.NpgsqlTimeSpan" target="_top">https://docs.microsoft.com/en-us/dotnet/api/NpgsqlTypes.NpgsqlTimeSpan</a>
 */
public class NpgsqlTimeSpan extends ValueType implements system.collections.IComparer {
    /**
     * Fully assembly qualified name: Npgsql, Version=6.0.3.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7
     */
    public static final String assemblyFullName = "Npgsql, Version=6.0.3.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7";
    /**
     * Assembly name: Npgsql
     */
    public static final String assemblyShortName = "Npgsql";
    /**
     * Qualified class name: NpgsqlTypes.NpgsqlTimeSpan
     */
    public static final String className = "NpgsqlTypes.NpgsqlTimeSpan";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public NpgsqlTimeSpan(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link NpgsqlTimeSpan}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link NpgsqlTimeSpan} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static NpgsqlTimeSpan cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new NpgsqlTimeSpan(from.getJCOInstance());
    }

    // Constructors section
    
    public NpgsqlTimeSpan() throws Throwable {
    }

    public NpgsqlTimeSpan(int years, int months, int days, int hours, int minutes, int seconds, int milliseconds) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(years, months, days, hours, minutes, seconds, milliseconds));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NpgsqlTimeSpan(int months, int days, int hours, int minutes, int seconds, int milliseconds) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(months, days, hours, minutes, seconds, milliseconds));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NpgsqlTimeSpan(int days, int hours, int minutes, int seconds, int milliseconds) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(days, hours, minutes, seconds, milliseconds));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NpgsqlTimeSpan(int days, int hours, int minutes, int seconds) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(days, hours, minutes, seconds));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NpgsqlTimeSpan(int months, int days, long ticks) throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(months, days, ticks));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NpgsqlTimeSpan(long ticks) throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(ticks));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NpgsqlTimeSpan(TimeSpan timespan) throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(timespan == null ? null : timespan.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    
    // Methods section
    
    public boolean Equals(NpgsqlTimeSpan other) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Equals", other == null ? null : other.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean TryParse(java.lang.String str, JCORefOut<NpgsqlTimeSpan> result) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.globalization.CultureNotFoundException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.OverflowException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("TryParse", str, result.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int Compare(NpgsqlTimeSpan x, NpgsqlTimeSpan y) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("Compare", x == null ? null : x.getJCOInstance(), y == null ? null : y.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int CompareTo(NpgsqlTimeSpan other) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Invoke("CompareTo", other == null ? null : other.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int CompareTo(NetObject other) throws Throwable, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Invoke("CompareTo", other == null ? null : other.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NpgsqlTimeSpan Add(JCORefOut<NpgsqlTimeSpan> interval) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAdd = (JCObject)classInstance.Invoke("Add", interval.getJCRefOut());
            return new NpgsqlTimeSpan(objAdd);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NpgsqlTimeSpan Canonicalize() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCanonicalize = (JCObject)classInstance.Invoke("Canonicalize");
            return new NpgsqlTimeSpan(objCanonicalize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NpgsqlTimeSpan Duration() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objDuration = (JCObject)classInstance.Invoke("Duration");
            return new NpgsqlTimeSpan(objDuration);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NpgsqlTimeSpan FromDays(double days) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objFromDays = (JCObject)classType.Invoke("FromDays", days);
            return new NpgsqlTimeSpan(objFromDays);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NpgsqlTimeSpan FromHours(double hours) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objFromHours = (JCObject)classType.Invoke("FromHours", hours);
            return new NpgsqlTimeSpan(objFromHours);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NpgsqlTimeSpan FromMicroseconds(double micro) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objFromMicroseconds = (JCObject)classType.Invoke("FromMicroseconds", micro);
            return new NpgsqlTimeSpan(objFromMicroseconds);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NpgsqlTimeSpan FromMilliseconds(double milli) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objFromMilliseconds = (JCObject)classType.Invoke("FromMilliseconds", milli);
            return new NpgsqlTimeSpan(objFromMilliseconds);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NpgsqlTimeSpan FromMinutes(double minutes) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objFromMinutes = (JCObject)classType.Invoke("FromMinutes", minutes);
            return new NpgsqlTimeSpan(objFromMinutes);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NpgsqlTimeSpan FromMonths(double months) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objFromMonths = (JCObject)classType.Invoke("FromMonths", months);
            return new NpgsqlTimeSpan(objFromMonths);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NpgsqlTimeSpan FromSeconds(double seconds) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objFromSeconds = (JCObject)classType.Invoke("FromSeconds", seconds);
            return new NpgsqlTimeSpan(objFromSeconds);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NpgsqlTimeSpan FromTicks(long ticks) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objFromTicks = (JCObject)classType.Invoke("FromTicks", ticks);
            return new NpgsqlTimeSpan(objFromTicks);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NpgsqlTimeSpan JustifyDays() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objJustifyDays = (JCObject)classInstance.Invoke("JustifyDays");
            return new NpgsqlTimeSpan(objJustifyDays);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NpgsqlTimeSpan JustifyInterval() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objJustifyInterval = (JCObject)classInstance.Invoke("JustifyInterval");
            return new NpgsqlTimeSpan(objJustifyInterval);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NpgsqlTimeSpan JustifyMonths() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objJustifyMonths = (JCObject)classInstance.Invoke("JustifyMonths");
            return new NpgsqlTimeSpan(objJustifyMonths);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NpgsqlTimeSpan Negate() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objNegate = (JCObject)classInstance.Invoke("Negate");
            return new NpgsqlTimeSpan(objNegate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NpgsqlTimeSpan Parse(java.lang.String str) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.TypeInitializationException, system.OverflowException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objParse = (JCObject)classType.Invoke("Parse", str);
            return new NpgsqlTimeSpan(objParse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NpgsqlTimeSpan Plus(JCORefOut<NpgsqlTimeSpan> x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objPlus = (JCObject)classType.Invoke("Plus", x.getJCRefOut());
            return new NpgsqlTimeSpan(objPlus);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NpgsqlTimeSpan Subtract(JCORefOut<NpgsqlTimeSpan> interval) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSubtract = (JCObject)classInstance.Invoke("Subtract", interval.getJCRefOut());
            return new NpgsqlTimeSpan(objSubtract);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NpgsqlTimeSpan ToNpgsqlTimeSpan(TimeSpan timespan) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objToNpgsqlTimeSpan = (JCObject)classType.Invoke("ToNpgsqlTimeSpan", timespan == null ? null : timespan.getJCOInstance());
            return new NpgsqlTimeSpan(objToNpgsqlTimeSpan);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NpgsqlTimeSpan UnjustifyDays() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objUnjustifyDays = (JCObject)classInstance.Invoke("UnjustifyDays");
            return new NpgsqlTimeSpan(objUnjustifyDays);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NpgsqlTimeSpan UnjustifyInterval() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objUnjustifyInterval = (JCObject)classInstance.Invoke("UnjustifyInterval");
            return new NpgsqlTimeSpan(objUnjustifyInterval);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NpgsqlTimeSpan UnjustifyMonths() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objUnjustifyMonths = (JCObject)classInstance.Invoke("UnjustifyMonths");
            return new NpgsqlTimeSpan(objUnjustifyMonths);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static TimeSpan ToTimeSpan(JCORefOut<NpgsqlTimeSpan> interval) throws Throwable, system.InvalidCastException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objToTimeSpan = (JCObject)classType.Invoke("ToTimeSpan", interval.getJCRefOut());
            return new TimeSpan(objToTimeSpan);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIComparer method available in IComparer to obtain an object with an invocable method
     */
    @Deprecated 
    public int Compare(NetObject x, NetObject y) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIComparer to obtain the full interface.");
    }


    
    // Properties section
    
    public double getTotalDays() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (double)classInstance.Get("TotalDays");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getTotalHours() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (double)classInstance.Get("TotalHours");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getTotalMicroseconds() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (double)classInstance.Get("TotalMicroseconds");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getTotalMilliseconds() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (double)classInstance.Get("TotalMilliseconds");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getTotalMinutes() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (double)classInstance.Get("TotalMinutes");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getTotalMonths() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (double)classInstance.Get("TotalMonths");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getTotalSeconds() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (double)classInstance.Get("TotalSeconds");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getDays() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("Days");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getHours() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("Hours");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMicroseconds() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("Microseconds");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMilliseconds() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("Milliseconds");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMinutes() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("Minutes");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getMonths() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("Months");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getSeconds() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("Seconds");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public long getTicks() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (long)classInstance.Get("Ticks");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public long getTotalTicks() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (long)classInstance.Get("TotalTicks");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getTime() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Time");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}