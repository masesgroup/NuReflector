/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package npgsqltypes;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;

// Import section
// PACKAGE_IMPORT_SECTION

/**
 * The base .NET class managing NpgsqlTypes.NpgsqlDbType, Npgsql, Version=6.0.3.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/NpgsqlTypes.NpgsqlDbType" target="_top">https://docs.microsoft.com/en-us/dotnet/api/NpgsqlTypes.NpgsqlDbType</a>
 */
public class NpgsqlDbType extends NetObject  {
    /**
     * Fully assembly qualified name: Npgsql, Version=6.0.3.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7
     */
    public static final String assemblyFullName = "Npgsql, Version=6.0.3.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7";
    /**
     * Assembly name: Npgsql
     */
    public static final String assemblyShortName = "Npgsql";
    /**
     * Qualified class name: NpgsqlTypes.NpgsqlDbType
     */
    public static final String className = "NpgsqlTypes.NpgsqlDbType";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumReflected = createEnum();
    JCEnum classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    static JCEnum createEnum() {
        try {
            String enumToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating Enum %s", enumToCreate);
            JCEnum enumCreated = bridge.GetEnum(enumToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created Enum: %s",
                        (enumCreated != null) ? enumCreated.toString() : "Returned null value");
            return enumCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public NpgsqlDbType(java.lang.Object instance) {
        super(instance);
        if (instance instanceof JCObject) {
            try {
                String enumName = NetEnum.GetName(classType, (JCObject)instance);
                classInstance = enumReflected.fromValue(enumName);
            } catch (Throwable t) {
                JCOReflector.writeLog(t);
                classInstance = enumReflected;
            }
        } else if (instance instanceof JCEnum) {
            classInstance = (JCEnum)instance;
        }
    }

    public NpgsqlDbType() {
        super();
        // add reference to assemblyName.dll file
        try {
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
        } catch (Throwable jcne) {
            JCOReflector.writeLog(jcne);
        }
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    final static NpgsqlDbType getFrom(JCEnum object, String value) {
        try {
            return new NpgsqlDbType(object.fromValue(value));
        } catch (JCException e) {
            return new NpgsqlDbType(object);
        }
    }

    // Enum fields section
    
    public static NpgsqlDbType Bigint = getFrom(enumReflected, "Bigint");
    public static NpgsqlDbType Boolean = getFrom(enumReflected, "Boolean");
    public static NpgsqlDbType Box = getFrom(enumReflected, "Box");
    public static NpgsqlDbType Bytea = getFrom(enumReflected, "Bytea");
    public static NpgsqlDbType Circle = getFrom(enumReflected, "Circle");
    public static NpgsqlDbType Char = getFrom(enumReflected, "Char");
    public static NpgsqlDbType Date = getFrom(enumReflected, "Date");
    public static NpgsqlDbType Double = getFrom(enumReflected, "Double");
    public static NpgsqlDbType Integer = getFrom(enumReflected, "Integer");
    public static NpgsqlDbType Line = getFrom(enumReflected, "Line");
    public static NpgsqlDbType LSeg = getFrom(enumReflected, "LSeg");
    public static NpgsqlDbType Money = getFrom(enumReflected, "Money");
    public static NpgsqlDbType Numeric = getFrom(enumReflected, "Numeric");
    public static NpgsqlDbType Path = getFrom(enumReflected, "Path");
    public static NpgsqlDbType Point = getFrom(enumReflected, "Point");
    public static NpgsqlDbType Polygon = getFrom(enumReflected, "Polygon");
    public static NpgsqlDbType Real = getFrom(enumReflected, "Real");
    public static NpgsqlDbType Smallint = getFrom(enumReflected, "Smallint");
    public static NpgsqlDbType Text = getFrom(enumReflected, "Text");
    public static NpgsqlDbType Time = getFrom(enumReflected, "Time");
    public static NpgsqlDbType Timestamp = getFrom(enumReflected, "Timestamp");
    public static NpgsqlDbType Varchar = getFrom(enumReflected, "Varchar");
    public static NpgsqlDbType Refcursor = getFrom(enumReflected, "Refcursor");
    public static NpgsqlDbType Inet = getFrom(enumReflected, "Inet");
    public static NpgsqlDbType Bit = getFrom(enumReflected, "Bit");
    public static NpgsqlDbType TimestampTz = getFrom(enumReflected, "TimestampTz");
    public static NpgsqlDbType TimestampTZ = getFrom(enumReflected, "TimestampTZ");
    public static NpgsqlDbType Uuid = getFrom(enumReflected, "Uuid");
    public static NpgsqlDbType Xml = getFrom(enumReflected, "Xml");
    public static NpgsqlDbType Oidvector = getFrom(enumReflected, "Oidvector");
    public static NpgsqlDbType Interval = getFrom(enumReflected, "Interval");
    public static NpgsqlDbType TimeTz = getFrom(enumReflected, "TimeTz");
    public static NpgsqlDbType TimeTZ = getFrom(enumReflected, "TimeTZ");
    public static NpgsqlDbType Name = getFrom(enumReflected, "Name");
    public static NpgsqlDbType Abstime = getFrom(enumReflected, "Abstime");
    public static NpgsqlDbType MacAddr = getFrom(enumReflected, "MacAddr");
    public static NpgsqlDbType Json = getFrom(enumReflected, "Json");
    public static NpgsqlDbType Jsonb = getFrom(enumReflected, "Jsonb");
    public static NpgsqlDbType Hstore = getFrom(enumReflected, "Hstore");
    public static NpgsqlDbType InternalChar = getFrom(enumReflected, "InternalChar");
    public static NpgsqlDbType Varbit = getFrom(enumReflected, "Varbit");
    public static NpgsqlDbType Unknown = getFrom(enumReflected, "Unknown");
    public static NpgsqlDbType Oid = getFrom(enumReflected, "Oid");
    public static NpgsqlDbType Xid = getFrom(enumReflected, "Xid");
    public static NpgsqlDbType Cid = getFrom(enumReflected, "Cid");
    public static NpgsqlDbType Cidr = getFrom(enumReflected, "Cidr");
    public static NpgsqlDbType TsVector = getFrom(enumReflected, "TsVector");
    public static NpgsqlDbType TsQuery = getFrom(enumReflected, "TsQuery");
    public static NpgsqlDbType Regtype = getFrom(enumReflected, "Regtype");
    public static NpgsqlDbType Geometry = getFrom(enumReflected, "Geometry");
    public static NpgsqlDbType Citext = getFrom(enumReflected, "Citext");
    public static NpgsqlDbType Int2Vector = getFrom(enumReflected, "Int2Vector");
    public static NpgsqlDbType Tid = getFrom(enumReflected, "Tid");
    public static NpgsqlDbType MacAddr8 = getFrom(enumReflected, "MacAddr8");
    public static NpgsqlDbType Geography = getFrom(enumReflected, "Geography");
    public static NpgsqlDbType Regconfig = getFrom(enumReflected, "Regconfig");
    public static NpgsqlDbType JsonPath = getFrom(enumReflected, "JsonPath");
    public static NpgsqlDbType PgLsn = getFrom(enumReflected, "PgLsn");
    public static NpgsqlDbType LTree = getFrom(enumReflected, "LTree");
    public static NpgsqlDbType LQuery = getFrom(enumReflected, "LQuery");
    public static NpgsqlDbType LTxtQuery = getFrom(enumReflected, "LTxtQuery");
    public static NpgsqlDbType Xid8 = getFrom(enumReflected, "Xid8");
    public static NpgsqlDbType Multirange = getFrom(enumReflected, "Multirange");
    public static NpgsqlDbType BigIntMultirange = getFrom(enumReflected, "BigIntMultirange");
    public static NpgsqlDbType DateMultirange = getFrom(enumReflected, "DateMultirange");
    public static NpgsqlDbType IntegerMultirange = getFrom(enumReflected, "IntegerMultirange");
    public static NpgsqlDbType NumericMultirange = getFrom(enumReflected, "NumericMultirange");
    public static NpgsqlDbType TimestampMultirange = getFrom(enumReflected, "TimestampMultirange");
    public static NpgsqlDbType TimestampTzMultirange = getFrom(enumReflected, "TimestampTzMultirange");
    public static NpgsqlDbType Range = getFrom(enumReflected, "Range");
    public static NpgsqlDbType BigIntRange = getFrom(enumReflected, "BigIntRange");
    public static NpgsqlDbType DateRange = getFrom(enumReflected, "DateRange");
    public static NpgsqlDbType IntegerRange = getFrom(enumReflected, "IntegerRange");
    public static NpgsqlDbType NumericRange = getFrom(enumReflected, "NumericRange");
    public static NpgsqlDbType TimestampRange = getFrom(enumReflected, "TimestampRange");
    public static NpgsqlDbType TimestampTzRange = getFrom(enumReflected, "TimestampTzRange");
    public static NpgsqlDbType Array = getFrom(enumReflected, "Array");


    // Flags management section


}