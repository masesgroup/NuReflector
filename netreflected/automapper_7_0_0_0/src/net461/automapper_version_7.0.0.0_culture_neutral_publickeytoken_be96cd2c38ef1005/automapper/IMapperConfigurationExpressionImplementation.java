/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package automapper;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import automapper.IProfileExpression;
import automapper.IProfileExpressionImplementation;
import automapper.configuration.conventions.IMemberConfiguration;
import automapper.configuration.conventions.IMemberConfigurationImplementation;
import automapper.IMappingExpression;
import automapper.IMappingExpressionImplementation;
import automapper.MemberList;
import automapper.mappers.IConditionalObjectMapper;
import automapper.mappers.IConditionalObjectMapperImplementation;
import automapper.Profile;
import system.reflection.Assembly;
import automapper.AdvancedConfiguration;
import automapper.INamingConvention;
import automapper.INamingConventionImplementation;


/**
 * The base .NET class managing AutoMapper.IMapperConfigurationExpression, AutoMapper, Version=7.0.0.0, Culture=neutral, PublicKeyToken=be96cd2c38ef1005.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/AutoMapper.IMapperConfigurationExpression" target="_top">https://docs.microsoft.com/en-us/dotnet/api/AutoMapper.IMapperConfigurationExpression</a>
 */
public class IMapperConfigurationExpressionImplementation extends NetObject implements IMapperConfigurationExpression {
    /**
     * Fully assembly qualified name: AutoMapper, Version=7.0.0.0, Culture=neutral, PublicKeyToken=be96cd2c38ef1005
     */
    public static final String assemblyFullName = "AutoMapper, Version=7.0.0.0, Culture=neutral, PublicKeyToken=be96cd2c38ef1005";
    /**
     * Assembly name: AutoMapper
     */
    public static final String assemblyShortName = "AutoMapper";
    /**
     * Qualified class name: AutoMapper.IMapperConfigurationExpression
     */
    public static final String className = "AutoMapper.IMapperConfigurationExpression";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public IMapperConfigurationExpressionImplementation(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link IMapperConfigurationExpression}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link IMapperConfigurationExpression} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static IMapperConfigurationExpression ToIMapperConfigurationExpression(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new IMapperConfigurationExpressionImplementation(from.getJCOInstance());
    }

    // Methods section
    
    public IMemberConfiguration AddMemberConfiguration() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddMemberConfiguration = (JCObject)classInstance.Invoke("AddMemberConfiguration");
            return new IMemberConfigurationImplementation(objAddMemberConfiguration);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMappingExpression CreateMap(NetType sourceType, NetType destinationType) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateMap = (JCObject)classInstance.Invoke("CreateMap", sourceType == null ? null : sourceType.getJCOInstance(), destinationType == null ? null : destinationType.getJCOInstance());
            return new IMappingExpressionImplementation(objCreateMap);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMappingExpression CreateMap(NetType sourceType, NetType destinationType, MemberList memberList) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateMap = (JCObject)classInstance.Invoke("CreateMap", sourceType == null ? null : sourceType.getJCOInstance(), destinationType == null ? null : destinationType.getJCOInstance(), memberList == null ? null : memberList.getJCOInstance());
            return new IMappingExpressionImplementation(objCreateMap);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConditionalObjectMapper AddConditionalObjectMapper() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddConditionalObjectMapper = (JCObject)classInstance.Invoke("AddConditionalObjectMapper");
            return new IConditionalObjectMapperImplementation(objAddConditionalObjectMapper);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddGlobalIgnore(java.lang.String propertyNameStartingWith) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddGlobalIgnore", propertyNameStartingWith);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddProfile(Profile profile) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddProfile", profile == null ? null : profile.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddProfile(NetType profileType) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddProfile", profileType == null ? null : profileType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddProfiles(Assembly... assembliesToScan) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddProfiles", (java.lang.Object)toObjectFromArray(assembliesToScan));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddProfiles(java.lang.String... assemblyNamesToScan) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddProfiles", (java.lang.Object)assemblyNamesToScan);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddProfiles(JCORefOut dupParam0) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddProfiles", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddProfiles(NetType... typesFromAssembliesContainingProfiles) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddProfiles", (java.lang.Object)toObjectFromArray(typesFromAssembliesContainingProfiles));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ClearPrefixes() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("ClearPrefixes");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void DisableConstructorMapping() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("DisableConstructorMapping");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void IncludeSourceExtensionMethods(NetType type) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("IncludeSourceExtensionMethods", type == null ? null : type.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RecognizeAlias(java.lang.String original, java.lang.String alias) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RecognizeAlias", original, alias);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RecognizeDestinationPostfixes(java.lang.String... postfixes) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RecognizeDestinationPostfixes", (java.lang.Object)postfixes);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RecognizeDestinationPostfixes(JCORefOut dupParam0) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RecognizeDestinationPostfixes", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RecognizeDestinationPrefixes(java.lang.String... prefixes) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RecognizeDestinationPrefixes", (java.lang.Object)prefixes);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RecognizeDestinationPrefixes(JCORefOut dupParam0) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RecognizeDestinationPrefixes", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RecognizePostfixes(java.lang.String... postfixes) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RecognizePostfixes", (java.lang.Object)postfixes);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RecognizePostfixes(JCORefOut dupParam0) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RecognizePostfixes", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RecognizePrefixes(java.lang.String... prefixes) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RecognizePrefixes", (java.lang.Object)prefixes);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RecognizePrefixes(JCORefOut dupParam0) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RecognizePrefixes", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ReplaceMemberName(java.lang.String original, java.lang.String newValue) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("ReplaceMemberName", original, newValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public AdvancedConfiguration getAdvanced() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Advanced");
            return new AdvancedConfiguration(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public INamingConvention getDestinationMemberNamingConvention() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("DestinationMemberNamingConvention");
            return new INamingConventionImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDestinationMemberNamingConvention(INamingConvention DestinationMemberNamingConvention) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("DestinationMemberNamingConvention", DestinationMemberNamingConvention == null ? null : DestinationMemberNamingConvention.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public INamingConvention getSourceMemberNamingConvention() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("SourceMemberNamingConvention");
            return new INamingConventionImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSourceMemberNamingConvention(INamingConvention SourceMemberNamingConvention) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("SourceMemberNamingConvention", SourceMemberNamingConvention == null ? null : SourceMemberNamingConvention.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getProfileName() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("ProfileName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}