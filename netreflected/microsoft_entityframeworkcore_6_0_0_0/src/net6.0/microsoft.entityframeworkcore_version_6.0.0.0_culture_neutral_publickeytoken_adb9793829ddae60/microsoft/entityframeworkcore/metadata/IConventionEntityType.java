/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.entityframeworkcore.metadata;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;

// Import section
import microsoft.entityframeworkcore.metadata.IReadOnlyEntityType;
import microsoft.entityframeworkcore.metadata.IReadOnlyEntityTypeImplementation;
import microsoft.entityframeworkcore.metadata.IReadOnlyTypeBase;
import microsoft.entityframeworkcore.metadata.IReadOnlyTypeBaseImplementation;
import microsoft.entityframeworkcore.infrastructure.IReadOnlyAnnotatable;
import microsoft.entityframeworkcore.infrastructure.IReadOnlyAnnotatableImplementation;
import microsoft.entityframeworkcore.metadata.IConventionTypeBase;
import microsoft.entityframeworkcore.metadata.IConventionTypeBaseImplementation;
import microsoft.entityframeworkcore.metadata.IConventionAnnotatable;
import microsoft.entityframeworkcore.metadata.IConventionAnnotatableImplementation;
import microsoft.entityframeworkcore.ChangeTrackingStrategy;
import microsoft.entityframeworkcore.infrastructure.IAnnotation;
import microsoft.entityframeworkcore.infrastructure.IAnnotationImplementation;
import microsoft.entityframeworkcore.metadata.ConfigurationSource;
import microsoft.entityframeworkcore.metadata.IConventionAnnotation;
import microsoft.entityframeworkcore.metadata.IConventionAnnotationImplementation;
import microsoft.entityframeworkcore.metadata.IConventionEntityType;
import microsoft.entityframeworkcore.metadata.IConventionEntityTypeImplementation;
import microsoft.entityframeworkcore.metadata.IConventionForeignKey;
import microsoft.entityframeworkcore.metadata.IConventionForeignKeyImplementation;
import microsoft.entityframeworkcore.metadata.IConventionProperty;
import microsoft.entityframeworkcore.metadata.IConventionPropertyImplementation;
import microsoft.entityframeworkcore.metadata.IConventionKey;
import microsoft.entityframeworkcore.metadata.IConventionKeyImplementation;
import microsoft.entityframeworkcore.metadata.IReadOnlyProperty;
import microsoft.entityframeworkcore.metadata.IReadOnlyPropertyImplementation;
import microsoft.entityframeworkcore.metadata.IReadOnlyKey;
import microsoft.entityframeworkcore.metadata.IReadOnlyKeyImplementation;
import microsoft.entityframeworkcore.metadata.IReadOnlyForeignKey;
import microsoft.entityframeworkcore.metadata.IReadOnlyForeignKeyImplementation;
import microsoft.entityframeworkcore.metadata.IConventionIndex;
import microsoft.entityframeworkcore.metadata.IConventionIndexImplementation;
import microsoft.entityframeworkcore.metadata.IReadOnlyIndex;
import microsoft.entityframeworkcore.metadata.IReadOnlyIndexImplementation;
import microsoft.entityframeworkcore.metadata.IConventionNavigation;
import microsoft.entityframeworkcore.metadata.IConventionNavigationImplementation;
import system.reflection.MemberInfo;
import microsoft.entityframeworkcore.metadata.IConventionServiceProperty;
import microsoft.entityframeworkcore.metadata.IConventionServicePropertyImplementation;
import microsoft.entityframeworkcore.metadata.IReadOnlyServiceProperty;
import microsoft.entityframeworkcore.metadata.IReadOnlyServicePropertyImplementation;
import microsoft.entityframeworkcore.metadata.IConventionSkipNavigation;
import microsoft.entityframeworkcore.metadata.IConventionSkipNavigationImplementation;
import microsoft.entityframeworkcore.metadata.IReadOnlySkipNavigation;
import microsoft.entityframeworkcore.metadata.IReadOnlySkipNavigationImplementation;
import microsoft.entityframeworkcore.PropertyAccessMode;
import system.linq.expressions.LambdaExpression;
import system.reflection.PropertyInfo;
import microsoft.entityframeworkcore.infrastructure.MetadataDebugStringOptions;
import microsoft.entityframeworkcore.metadata.builders.IConventionAnnotatableBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionAnnotatableBuilderImplementation;
import microsoft.entityframeworkcore.metadata.IConventionModel;
import microsoft.entityframeworkcore.metadata.IConventionModelImplementation;


/**
 * The base .NET class managing Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType, Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType</a>
 */
public interface IConventionEntityType extends IJCOBridgeReflected, IReadOnlyEntityType, IReadOnlyTypeBase, IReadOnlyAnnotatable, IConventionTypeBase, IConventionAnnotatable {
    /**
     * Fully assembly qualified name: Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60
     */
    public static final String assemblyFullName = "Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60";
    /**
     * Assembly name: Microsoft.EntityFrameworkCore
     */
    public static final String assemblyShortName = "Microsoft.EntityFrameworkCore";
    /**
     * Qualified class name: Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType
     */
    public static final String className = "Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType";
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link IConventionEntityType}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link IConventionEntityType} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static IConventionEntityType ToIConventionEntityType(IJCOBridgeReflected from) throws Throwable {
        JCOBridge bridge = JCOBridgeInstance.getInstance("Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60");
        JCType classType = bridge.GetType(className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        NetType.AssertCast(classType, from);
        return new IConventionEntityTypeImplementation(from.getJCOInstance());
    }

    /**
     * Returns the reflected Assembly name
     * 
     * @return A {@link String} representing the Fullname of reflected Assembly
     */
    public String getJCOAssemblyName();

    /**
     * Returns the reflected Class name
     * 
     * @return A {@link String} representing the Fullname of reflected Class
     */
    public String getJCOClassName();

    /**
     * Returns the reflected Class name used to build the object
     * 
     * @return A {@link String} representing the name used to allocated the object
     *         in CLR context
     */
    public String getJCOObjectName();

    /**
     * Returns the instantiated class
     * 
     * @return An {@link java.lang.Object} representing the instance of the instantiated Class
     */
    public java.lang.Object getJCOInstance();

    /**
     * Returns the instantiated class Type
     * 
     * @return A {@link JCType} representing the Type of the instantiated Class
     */
    public JCType getJCOType();

    // Methods section
    











    public ConfigurationSource GetConfigurationSource() throws Throwable;





    public IConventionEntityType FindClosestCommonParent(IReadOnlyEntityType otherEntityType) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException;

    public IConventionEntityType GetRootType() throws Throwable;

    public IConventionEntityType LeastDerivedType(IReadOnlyEntityType otherEntityType) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException;

    public IConventionEntityType SetBaseType(IConventionEntityType entityType, boolean fromDataAnnotation) throws Throwable;

    public IConventionForeignKey AddForeignKey(IConventionProperty property, IConventionKey principalKey, IConventionEntityType principalEntityType, boolean fromDataAnnotation) throws Throwable;

    public IConventionForeignKey FindForeignKey(IReadOnlyProperty property, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType) throws Throwable;

    public IConventionForeignKey FindOwnership() throws Throwable;

    public IConventionForeignKey RemoveForeignKey(IReadOnlyForeignKey foreignKey) throws Throwable;

    public IConventionIndex AddIndex(IConventionProperty property, boolean fromDataAnnotation) throws Throwable;

    public IConventionIndex AddIndex(IConventionProperty property, java.lang.String name, boolean fromDataAnnotation) throws Throwable;

    public IConventionIndex FindIndex(IReadOnlyProperty property) throws Throwable;

    public IConventionIndex FindIndex(java.lang.String name) throws Throwable;

    public IConventionIndex RemoveIndex(IReadOnlyIndex index) throws Throwable;

    public IConventionKey AddKey(IConventionProperty property, boolean fromDataAnnotation) throws Throwable;

    public IConventionKey FindKey(IReadOnlyProperty property) throws Throwable;

    public IConventionKey FindPrimaryKey() throws Throwable;

    public IConventionKey RemoveKey(IReadOnlyKey key) throws Throwable;

    public IConventionKey SetPrimaryKey(IConventionProperty property, boolean fromDataAnnotation) throws Throwable;

    public IConventionNavigation FindDeclaredNavigation(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException;

    public IConventionNavigation FindNavigation(MemberInfo memberInfo) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException;

    public IConventionNavigation FindNavigation(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException;

    public IConventionProperty AddIndexerProperty(java.lang.String name, NetType propertyType, boolean setTypeConfigurationSource, boolean fromDataAnnotation) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, system.ArgumentException, system.FormatException, system.ArrayTypeMismatchException;

    public IConventionProperty AddProperty(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException;

    public IConventionProperty AddProperty(java.lang.String name, boolean fromDataAnnotation) throws Throwable;

    public IConventionProperty AddProperty(java.lang.String name, NetType propertyType, boolean setTypeConfigurationSource, boolean fromDataAnnotation) throws Throwable;

    public IConventionProperty AddProperty(java.lang.String name, NetType propertyType, MemberInfo memberInfo, boolean setTypeConfigurationSource, boolean fromDataAnnotation) throws Throwable;

    public IConventionProperty FindDeclaredProperty(java.lang.String name) throws Throwable;

    public IConventionProperty FindDiscriminatorProperty() throws Throwable;

    public IConventionProperty FindProperty(MemberInfo memberInfo) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException;

    public IConventionProperty FindProperty(java.lang.String name) throws Throwable;

    public IConventionProperty GetProperty(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.FormatException;

    public IConventionProperty RemoveProperty(IReadOnlyProperty property) throws Throwable;

    public IConventionProperty RemoveProperty(java.lang.String name) throws Throwable;

    public IConventionProperty SetDiscriminatorProperty(IReadOnlyProperty property, boolean fromDataAnnotation) throws Throwable;

    public IConventionServiceProperty AddServiceProperty(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable;

    public IConventionServiceProperty FindServiceProperty(java.lang.String name) throws Throwable;

    public IConventionServiceProperty RemoveServiceProperty(IReadOnlyServiceProperty property) throws Throwable;

    public IConventionServiceProperty RemoveServiceProperty(java.lang.String name) throws Throwable;

    public IConventionSkipNavigation AddSkipNavigation(java.lang.String name, MemberInfo memberInfo, IConventionEntityType targetEntityType, boolean collection, boolean onDependent, boolean fromDataAnnotation) throws Throwable;

    public IConventionSkipNavigation FindDeclaredSkipNavigation(java.lang.String name) throws Throwable;

    public IConventionSkipNavigation FindSkipNavigation(MemberInfo memberInfo) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException;

    public IConventionSkipNavigation FindSkipNavigation(java.lang.String name) throws Throwable;

    public IConventionSkipNavigation RemoveSkipNavigation(IReadOnlySkipNavigation navigation) throws Throwable;




    public LambdaExpression SetQueryFilter(LambdaExpression queryFilter, boolean fromDataAnnotation) throws Throwable;


    public NetObject RemoveDiscriminatorValue() throws Throwable;

    public NetObject SetDiscriminatorValue(NetObject value, boolean fromDataAnnotation) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.ArrayTypeMismatchException, system.OutOfMemoryException;










    public void HasBaseType(IConventionEntityType entityType, boolean fromDataAnnotation) throws Throwable;


    
    // Properties section
    
    public boolean getIsKeyless() throws Throwable;

    public IConventionEntityType getBaseType() throws Throwable;

    public IConventionEntityType getDefiningEntityType() throws Throwable;

    public IConventionModel getModel() throws Throwable;



    // Instance Events section
    

}