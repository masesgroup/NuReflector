/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.entityframeworkcore.metadata.builders;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import microsoft.entityframeworkcore.metadata.builders.IConventionAnnotatableBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionAnnotatableBuilderImplementation;
import system.reflection.MemberInfo;
import microsoft.entityframeworkcore.metadata.IConventionIndex;
import microsoft.entityframeworkcore.metadata.IConventionIndexImplementation;
import microsoft.entityframeworkcore.metadata.IConventionKey;
import microsoft.entityframeworkcore.metadata.IConventionKeyImplementation;
import microsoft.entityframeworkcore.metadata.IConventionForeignKey;
import microsoft.entityframeworkcore.metadata.IConventionForeignKeyImplementation;
import microsoft.entityframeworkcore.metadata.IConventionSkipNavigation;
import microsoft.entityframeworkcore.metadata.IConventionSkipNavigationImplementation;
import microsoft.entityframeworkcore.metadata.IConventionEntityType;
import microsoft.entityframeworkcore.metadata.IConventionEntityTypeImplementation;
import system.linq.expressions.LambdaExpression;
import microsoft.entityframeworkcore.metadata.builders.IConventionDiscriminatorBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionDiscriminatorBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionEntityTypeBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionEntityTypeBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionForeignKeyBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionForeignKeyBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionIndexBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionIndexBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionKeyBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionKeyBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionPropertyBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionPropertyBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionServicePropertyBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionServicePropertyBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionSkipNavigationBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionSkipNavigationBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionModelBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionModelBuilderImplementation;
import microsoft.entityframeworkcore.metadata.IConventionAnnotatable;
import microsoft.entityframeworkcore.metadata.IConventionAnnotatableImplementation;


/**
 * The base .NET class managing Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder, Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</a>
 */
public class IConventionEntityTypeBuilderImplementation extends NetObject implements IConventionEntityTypeBuilder {
    /**
     * Fully assembly qualified name: Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60
     */
    public static final String assemblyFullName = "Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60";
    /**
     * Assembly name: Microsoft.EntityFrameworkCore
     */
    public static final String assemblyShortName = "Microsoft.EntityFrameworkCore";
    /**
     * Qualified class name: Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder
     */
    public static final String className = "Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public IConventionEntityTypeBuilderImplementation(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link IConventionEntityTypeBuilder}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link IConventionEntityTypeBuilder} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static IConventionEntityTypeBuilder ToIConventionEntityTypeBuilder(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new IConventionEntityTypeBuilderImplementation(from.getJCOInstance());
    }

    // Methods section
    
    public boolean CanAddNavigation(java.lang.String navigationName, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanAddNavigation", navigationName, fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanHaveIndexerProperty(NetType propertyType, java.lang.String propertyName, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanHaveIndexerProperty", propertyType == null ? null : propertyType.getJCOInstance(), propertyName, fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanHaveNavigation(MemberInfo navigation, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanHaveNavigation", navigation == null ? null : navigation.getJCOInstance(), fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanHaveNavigation(java.lang.String navigationName, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanHaveNavigation", navigationName, fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanHaveNavigation(java.lang.String navigationName, NetType type, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanHaveNavigation", navigationName, type == null ? null : type.getJCOInstance(), fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanHaveProperty(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanHaveProperty", memberInfo == null ? null : memberInfo.getJCOInstance(), fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanHaveProperty(NetType propertyType, java.lang.String propertyName, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanHaveProperty", propertyType == null ? null : propertyType.getJCOInstance(), propertyName, fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanHaveServiceProperty(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanHaveServiceProperty", memberInfo == null ? null : memberInfo.getJCOInstance(), fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanHaveSkipNavigation(MemberInfo navigation, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanHaveSkipNavigation", navigation == null ? null : navigation.getJCOInstance(), fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanHaveSkipNavigation(java.lang.String skipNavigationName, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanHaveSkipNavigation", skipNavigationName, fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanHaveSkipNavigation(java.lang.String skipNavigationName, NetType type, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanHaveSkipNavigation", skipNavigationName, type == null ? null : type.getJCOInstance(), fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanIgnore(java.lang.String memberName, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanIgnore", memberName, fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanRemoveAnnotation(java.lang.String name, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanRemoveAnnotation", name, fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanRemoveDiscriminator(boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanRemoveDiscriminator", fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanRemoveIndex(IConventionIndex index, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanRemoveIndex", index == null ? null : index.getJCOInstance(), fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanRemoveKey(boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanRemoveKey", fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanRemoveKey(IConventionKey key, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanRemoveKey", key == null ? null : key.getJCOInstance(), fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanRemoveRelationship(IConventionForeignKey foreignKey, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanRemoveRelationship", foreignKey == null ? null : foreignKey.getJCOInstance(), fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanRemoveSkipNavigation(IConventionSkipNavigation skipNavigation, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanRemoveSkipNavigation", skipNavigation == null ? null : skipNavigation.getJCOInstance(), fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanSetAnnotation(java.lang.String name, NetObject value, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanSetAnnotation", name, value == null ? null : value.getJCOInstance(), fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanSetBaseType(IConventionEntityType baseEntityType, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanSetBaseType", baseEntityType == null ? null : baseEntityType.getJCOInstance(), fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanSetDefiningQuery(LambdaExpression query, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanSetDefiningQuery", query == null ? null : query.getJCOInstance(), fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanSetDiscriminator(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanSetDiscriminator", memberInfo == null ? null : memberInfo.getJCOInstance(), fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanSetDiscriminator(java.lang.String name, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanSetDiscriminator", name, fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanSetDiscriminator(java.lang.String name, NetType type, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanSetDiscriminator", name, type == null ? null : type.getJCOInstance(), fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanSetDiscriminator(NetType type, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanSetDiscriminator", type == null ? null : type.getJCOInstance(), fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanSetQueryFilter(LambdaExpression filter, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanSetQueryFilter", filter == null ? null : filter.getJCOInstance(), fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean IsIgnored(java.lang.String memberName, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("IsIgnored", memberName, fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionAnnotatableBuilder HasAnnotation(java.lang.String name, NetObject value, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasAnnotation = (JCObject)classInstance.Invoke("HasAnnotation", name, value == null ? null : value.getJCOInstance(), fromDataAnnotation);
            return new IConventionAnnotatableBuilderImplementation(objHasAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionAnnotatableBuilder HasNoAnnotation(java.lang.String name, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasNoAnnotation = (JCObject)classInstance.Invoke("HasNoAnnotation", name, fromDataAnnotation);
            return new IConventionAnnotatableBuilderImplementation(objHasNoAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionAnnotatableBuilder HasNonNullAnnotation(java.lang.String name, NetObject value, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasNonNullAnnotation = (JCObject)classInstance.Invoke("HasNonNullAnnotation", name, value == null ? null : value.getJCOInstance(), fromDataAnnotation);
            return new IConventionAnnotatableBuilderImplementation(objHasNonNullAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionAnnotatableBuilder RemoveAnnotation(java.lang.String name, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRemoveAnnotation = (JCObject)classInstance.Invoke("RemoveAnnotation", name, fromDataAnnotation);
            return new IConventionAnnotatableBuilderImplementation(objRemoveAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionAnnotatableBuilder SetOrRemoveAnnotation(java.lang.String name, NetObject value, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetOrRemoveAnnotation = (JCObject)classInstance.Invoke("SetOrRemoveAnnotation", name, value == null ? null : value.getJCOInstance(), fromDataAnnotation);
            return new IConventionAnnotatableBuilderImplementation(objSetOrRemoveAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionDiscriminatorBuilder HasDiscriminator(boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasDiscriminator = (JCObject)classInstance.Invoke("HasDiscriminator", fromDataAnnotation);
            return new IConventionDiscriminatorBuilderImplementation(objHasDiscriminator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionDiscriminatorBuilder HasDiscriminator(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasDiscriminator = (JCObject)classInstance.Invoke("HasDiscriminator", memberInfo == null ? null : memberInfo.getJCOInstance(), fromDataAnnotation);
            return new IConventionDiscriminatorBuilderImplementation(objHasDiscriminator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionDiscriminatorBuilder HasDiscriminator(java.lang.String name, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasDiscriminator = (JCObject)classInstance.Invoke("HasDiscriminator", name, fromDataAnnotation);
            return new IConventionDiscriminatorBuilderImplementation(objHasDiscriminator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionDiscriminatorBuilder HasDiscriminator(java.lang.String name, NetType type, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasDiscriminator = (JCObject)classInstance.Invoke("HasDiscriminator", name, type == null ? null : type.getJCOInstance(), fromDataAnnotation);
            return new IConventionDiscriminatorBuilderImplementation(objHasDiscriminator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionDiscriminatorBuilder HasDiscriminator(NetType type, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasDiscriminator = (JCObject)classInstance.Invoke("HasDiscriminator", type == null ? null : type.getJCOInstance(), fromDataAnnotation);
            return new IConventionDiscriminatorBuilderImplementation(objHasDiscriminator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionEntityTypeBuilder HasBaseType(IConventionEntityType baseEntityType, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasBaseType = (JCObject)classInstance.Invoke("HasBaseType", baseEntityType == null ? null : baseEntityType.getJCOInstance(), fromDataAnnotation);
            return new IConventionEntityTypeBuilderImplementation(objHasBaseType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionEntityTypeBuilder HasDefiningQuery(LambdaExpression query, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasDefiningQuery = (JCObject)classInstance.Invoke("HasDefiningQuery", query == null ? null : query.getJCOInstance(), fromDataAnnotation);
            return new IConventionEntityTypeBuilderImplementation(objHasDefiningQuery);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionEntityTypeBuilder HasNoDeclaredDiscriminator(boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasNoDeclaredDiscriminator = (JCObject)classInstance.Invoke("HasNoDeclaredDiscriminator", fromDataAnnotation);
            return new IConventionEntityTypeBuilderImplementation(objHasNoDeclaredDiscriminator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionEntityTypeBuilder HasNoDiscriminator(boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasNoDiscriminator = (JCObject)classInstance.Invoke("HasNoDiscriminator", fromDataAnnotation);
            return new IConventionEntityTypeBuilderImplementation(objHasNoDiscriminator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionEntityTypeBuilder HasNoIndex(IConventionIndex index, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasNoIndex = (JCObject)classInstance.Invoke("HasNoIndex", index == null ? null : index.getJCOInstance(), fromDataAnnotation);
            return new IConventionEntityTypeBuilderImplementation(objHasNoIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionEntityTypeBuilder HasNoKey(boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasNoKey = (JCObject)classInstance.Invoke("HasNoKey", fromDataAnnotation);
            return new IConventionEntityTypeBuilderImplementation(objHasNoKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionEntityTypeBuilder HasNoKey(IConventionKey key, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasNoKey = (JCObject)classInstance.Invoke("HasNoKey", key == null ? null : key.getJCOInstance(), fromDataAnnotation);
            return new IConventionEntityTypeBuilderImplementation(objHasNoKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionEntityTypeBuilder HasNoRelationship(IConventionForeignKey foreignKey, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasNoRelationship = (JCObject)classInstance.Invoke("HasNoRelationship", foreignKey == null ? null : foreignKey.getJCOInstance(), fromDataAnnotation);
            return new IConventionEntityTypeBuilderImplementation(objHasNoRelationship);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionEntityTypeBuilder HasNoSkipNavigation(IConventionSkipNavigation skipNavigation, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasNoSkipNavigation = (JCObject)classInstance.Invoke("HasNoSkipNavigation", skipNavigation == null ? null : skipNavigation.getJCOInstance(), fromDataAnnotation);
            return new IConventionEntityTypeBuilderImplementation(objHasNoSkipNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionEntityTypeBuilder HasQueryFilter(LambdaExpression filter, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasQueryFilter = (JCObject)classInstance.Invoke("HasQueryFilter", filter == null ? null : filter.getJCOInstance(), fromDataAnnotation);
            return new IConventionEntityTypeBuilderImplementation(objHasQueryFilter);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionEntityTypeBuilder Ignore(java.lang.String memberName, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objIgnore = (JCObject)classInstance.Invoke("Ignore", memberName, fromDataAnnotation);
            return new IConventionEntityTypeBuilderImplementation(objIgnore);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionForeignKeyBuilder HasOwnership(IConventionEntityType targetEntityType, MemberInfo navigation, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasOwnership = (JCObject)classInstance.Invoke("HasOwnership", targetEntityType == null ? null : targetEntityType.getJCOInstance(), navigation == null ? null : navigation.getJCOInstance(), fromDataAnnotation);
            return new IConventionForeignKeyBuilderImplementation(objHasOwnership);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionForeignKeyBuilder HasOwnership(IConventionEntityType targetEntityType, MemberInfo navigation, MemberInfo inverseNavigation, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasOwnership = (JCObject)classInstance.Invoke("HasOwnership", targetEntityType == null ? null : targetEntityType.getJCOInstance(), navigation == null ? null : navigation.getJCOInstance(), inverseNavigation == null ? null : inverseNavigation.getJCOInstance(), fromDataAnnotation);
            return new IConventionForeignKeyBuilderImplementation(objHasOwnership);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionForeignKeyBuilder HasOwnership(IConventionEntityType targetEntityType, java.lang.String navigationName, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasOwnership = (JCObject)classInstance.Invoke("HasOwnership", targetEntityType == null ? null : targetEntityType.getJCOInstance(), navigationName, fromDataAnnotation);
            return new IConventionForeignKeyBuilderImplementation(objHasOwnership);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionForeignKeyBuilder HasOwnership(IConventionEntityType targetEntityType, java.lang.String navigationName, java.lang.String inverseNavigationName, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasOwnership = (JCObject)classInstance.Invoke("HasOwnership", targetEntityType == null ? null : targetEntityType.getJCOInstance(), navigationName, inverseNavigationName, fromDataAnnotation);
            return new IConventionForeignKeyBuilderImplementation(objHasOwnership);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionForeignKeyBuilder HasOwnership(NetType targetEntityType, MemberInfo navigation, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasOwnership = (JCObject)classInstance.Invoke("HasOwnership", targetEntityType == null ? null : targetEntityType.getJCOInstance(), navigation == null ? null : navigation.getJCOInstance(), fromDataAnnotation);
            return new IConventionForeignKeyBuilderImplementation(objHasOwnership);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionForeignKeyBuilder HasOwnership(NetType targetEntityType, MemberInfo navigation, MemberInfo inverseNavigation, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasOwnership = (JCObject)classInstance.Invoke("HasOwnership", targetEntityType == null ? null : targetEntityType.getJCOInstance(), navigation == null ? null : navigation.getJCOInstance(), inverseNavigation == null ? null : inverseNavigation.getJCOInstance(), fromDataAnnotation);
            return new IConventionForeignKeyBuilderImplementation(objHasOwnership);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionForeignKeyBuilder HasOwnership(NetType targetEntityType, java.lang.String navigationName, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasOwnership = (JCObject)classInstance.Invoke("HasOwnership", targetEntityType == null ? null : targetEntityType.getJCOInstance(), navigationName, fromDataAnnotation);
            return new IConventionForeignKeyBuilderImplementation(objHasOwnership);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionForeignKeyBuilder HasOwnership(NetType targetEntityType, java.lang.String navigationName, java.lang.String inverseNavigationName, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasOwnership = (JCObject)classInstance.Invoke("HasOwnership", targetEntityType == null ? null : targetEntityType.getJCOInstance(), navigationName, inverseNavigationName, fromDataAnnotation);
            return new IConventionForeignKeyBuilderImplementation(objHasOwnership);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionForeignKeyBuilder HasRelationship(IConventionEntityType targetEntityType, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasRelationship = (JCObject)classInstance.Invoke("HasRelationship", targetEntityType == null ? null : targetEntityType.getJCOInstance(), fromDataAnnotation);
            return new IConventionForeignKeyBuilderImplementation(objHasRelationship);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionForeignKeyBuilder HasRelationship(IConventionEntityType principalEntityType, IConventionKey principalKey, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasRelationship = (JCObject)classInstance.Invoke("HasRelationship", principalEntityType == null ? null : principalEntityType.getJCOInstance(), principalKey == null ? null : principalKey.getJCOInstance(), fromDataAnnotation);
            return new IConventionForeignKeyBuilderImplementation(objHasRelationship);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionForeignKeyBuilder HasRelationship(IConventionEntityType targetEntityType, MemberInfo navigation, boolean setTargetAsPrincipal, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasRelationship = (JCObject)classInstance.Invoke("HasRelationship", targetEntityType == null ? null : targetEntityType.getJCOInstance(), navigation == null ? null : navigation.getJCOInstance(), setTargetAsPrincipal, fromDataAnnotation);
            return new IConventionForeignKeyBuilderImplementation(objHasRelationship);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionForeignKeyBuilder HasRelationship(IConventionEntityType targetEntityType, MemberInfo navigation, MemberInfo inverseNavigation, boolean setTargetAsPrincipal, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasRelationship = (JCObject)classInstance.Invoke("HasRelationship", targetEntityType == null ? null : targetEntityType.getJCOInstance(), navigation == null ? null : navigation.getJCOInstance(), inverseNavigation == null ? null : inverseNavigation.getJCOInstance(), setTargetAsPrincipal, fromDataAnnotation);
            return new IConventionForeignKeyBuilderImplementation(objHasRelationship);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionForeignKeyBuilder HasRelationship(IConventionEntityType targetEntityType, java.lang.String navigationName, boolean setTargetAsPrincipal, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasRelationship = (JCObject)classInstance.Invoke("HasRelationship", targetEntityType == null ? null : targetEntityType.getJCOInstance(), navigationName, setTargetAsPrincipal, fromDataAnnotation);
            return new IConventionForeignKeyBuilderImplementation(objHasRelationship);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionForeignKeyBuilder HasRelationship(IConventionEntityType targetEntityType, java.lang.String navigationName, java.lang.String inverseNavigationName, boolean setTargetAsPrincipal, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasRelationship = (JCObject)classInstance.Invoke("HasRelationship", targetEntityType == null ? null : targetEntityType.getJCOInstance(), navigationName, inverseNavigationName, setTargetAsPrincipal, fromDataAnnotation);
            return new IConventionForeignKeyBuilderImplementation(objHasRelationship);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionPropertyBuilder CreateUniqueProperty(NetType propertyType, java.lang.String basePropertyName, boolean required) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateUniqueProperty = (JCObject)classInstance.Invoke("CreateUniqueProperty", propertyType == null ? null : propertyType.getJCOInstance(), basePropertyName, required);
            return new IConventionPropertyBuilderImplementation(objCreateUniqueProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionPropertyBuilder IndexerProperty(NetType propertyType, java.lang.String propertyName, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objIndexerProperty = (JCObject)classInstance.Invoke("IndexerProperty", propertyType == null ? null : propertyType.getJCOInstance(), propertyName, fromDataAnnotation);
            return new IConventionPropertyBuilderImplementation(objIndexerProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionPropertyBuilder Property(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objProperty = (JCObject)classInstance.Invoke("Property", memberInfo == null ? null : memberInfo.getJCOInstance(), fromDataAnnotation);
            return new IConventionPropertyBuilderImplementation(objProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionPropertyBuilder Property(NetType propertyType, java.lang.String propertyName, boolean setTypeConfigurationSource, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objProperty = (JCObject)classInstance.Invoke("Property", propertyType == null ? null : propertyType.getJCOInstance(), propertyName, setTypeConfigurationSource, fromDataAnnotation);
            return new IConventionPropertyBuilderImplementation(objProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionServicePropertyBuilder ServiceProperty(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objServiceProperty = (JCObject)classInstance.Invoke("ServiceProperty", memberInfo == null ? null : memberInfo.getJCOInstance(), fromDataAnnotation);
            return new IConventionServicePropertyBuilderImplementation(objServiceProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public IConventionModelBuilder getModelBuilder() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ModelBuilder");
            return new IConventionModelBuilderImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionAnnotatable getMetadata() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Metadata");
            return new IConventionAnnotatableImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}