/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package nettopologysuite.geometries.utilities;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import nettopologysuite.geometries.Coordinate;
import nettopologysuite.geometries.utilities.AffineTransformation;
import nettopologysuite.geometries.Geometry;
import nettopologysuite.geometries.CoordinateSequence;


/**
 * The base .NET class managing NetTopologySuite.Geometries.Utilities.AffineTransformation, NetTopologySuite, Version=2.0.0.0, Culture=neutral, PublicKeyToken=f580a05016ebada1.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/NetTopologySuite.Geometries.Utilities.AffineTransformation" target="_top">https://docs.microsoft.com/en-us/dotnet/api/NetTopologySuite.Geometries.Utilities.AffineTransformation</a>
 */
public class AffineTransformation extends NetObject  {
    /**
     * Fully assembly qualified name: NetTopologySuite, Version=2.0.0.0, Culture=neutral, PublicKeyToken=f580a05016ebada1
     */
    public static final String assemblyFullName = "NetTopologySuite, Version=2.0.0.0, Culture=neutral, PublicKeyToken=f580a05016ebada1";
    /**
     * Assembly name: NetTopologySuite
     */
    public static final String assemblyShortName = "NetTopologySuite";
    /**
     * Qualified class name: NetTopologySuite.Geometries.Utilities.AffineTransformation
     */
    public static final String className = "NetTopologySuite.Geometries.Utilities.AffineTransformation";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public AffineTransformation(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link AffineTransformation}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link AffineTransformation} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static AffineTransformation cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new AffineTransformation(from.getJCOInstance());
    }

    // Constructors section
    
    public AffineTransformation() throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation(double m00, double m01, double m02, double m10, double m11, double m12) throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(m00, m01, m02, m10, m11, m12));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation(double[] matrix) throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject((java.lang.Object)matrix));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation(Coordinate src0, Coordinate src1, Coordinate src2, Coordinate dest0, Coordinate dest1, Coordinate dest2) throws Throwable, system.ArgumentException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(src0 == null ? null : src0.getJCOInstance(), src1 == null ? null : src1.getJCOInstance(), src2 == null ? null : src2.getJCOInstance(), dest0 == null ? null : dest0.getJCOInstance(), dest1 == null ? null : dest1.getJCOInstance(), dest2 == null ? null : dest2.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation(AffineTransformation trans) throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(trans == null ? null : trans.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    public boolean Equals(AffineTransformation trans) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Equals", trans == null ? null : trans.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Coordinate Transform(Coordinate src, Coordinate dest) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objTransform = (JCObject)classInstance.Invoke("Transform", src == null ? null : src.getJCOInstance(), dest == null ? null : dest.getJCOInstance());
            return new Coordinate(objTransform);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Geometry Transform(Geometry g) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objTransform = (JCObject)classInstance.Invoke("Transform", g == null ? null : g.getJCOInstance());
            return new Geometry(objTransform);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation Compose(AffineTransformation trans) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCompose = (JCObject)classInstance.Invoke("Compose", trans == null ? null : trans.getJCOInstance());
            return new AffineTransformation(objCompose);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation ComposeBefore(AffineTransformation trans) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objComposeBefore = (JCObject)classInstance.Invoke("ComposeBefore", trans == null ? null : trans.getJCOInstance());
            return new AffineTransformation(objComposeBefore);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation GetInverse() throws Throwable, nettopologysuite.geometries.utilities.NoninvertibleTransformationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetInverse = (JCObject)classInstance.Invoke("GetInverse");
            return new AffineTransformation(objGetInverse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation Reflect(double x0, double y0, double x1, double y1) throws Throwable, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReflect = (JCObject)classInstance.Invoke("Reflect", x0, y0, x1, y1);
            return new AffineTransformation(objReflect);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation Reflect(double x, double y) throws Throwable, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReflect = (JCObject)classInstance.Invoke("Reflect", x, y);
            return new AffineTransformation(objReflect);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AffineTransformation ReflectionInstance(double x0, double y0, double x1, double y1) throws Throwable, system.ArgumentException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objReflectionInstance = (JCObject)classType.Invoke("ReflectionInstance", x0, y0, x1, y1);
            return new AffineTransformation(objReflectionInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AffineTransformation ReflectionInstance(double x, double y) throws Throwable, system.ArgumentException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objReflectionInstance = (JCObject)classType.Invoke("ReflectionInstance", x, y);
            return new AffineTransformation(objReflectionInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation Rotate(double sinTheta, double cosTheta, double x, double y) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRotate = (JCObject)classInstance.Invoke("Rotate", sinTheta, cosTheta, x, y);
            return new AffineTransformation(objRotate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation Rotate(double theta, double x, double y) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRotate = (JCObject)classInstance.Invoke("Rotate", theta, x, y);
            return new AffineTransformation(objRotate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation Rotate(double sinTheta, double cosTheta) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRotate = (JCObject)classInstance.Invoke("Rotate", sinTheta, cosTheta);
            return new AffineTransformation(objRotate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation Rotate(double theta) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRotate = (JCObject)classInstance.Invoke("Rotate", theta);
            return new AffineTransformation(objRotate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AffineTransformation RotationInstance(double sinTheta, double cosTheta, double x, double y) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objRotationInstance = (JCObject)classType.Invoke("RotationInstance", sinTheta, cosTheta, x, y);
            return new AffineTransformation(objRotationInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AffineTransformation RotationInstance(double theta, double x, double y) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objRotationInstance = (JCObject)classType.Invoke("RotationInstance", theta, x, y);
            return new AffineTransformation(objRotationInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AffineTransformation RotationInstance(double sinTheta, double cosTheta) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objRotationInstance = (JCObject)classType.Invoke("RotationInstance", sinTheta, cosTheta);
            return new AffineTransformation(objRotationInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AffineTransformation RotationInstance(double theta) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objRotationInstance = (JCObject)classType.Invoke("RotationInstance", theta);
            return new AffineTransformation(objRotationInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation Scale(double xScale, double yScale) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objScale = (JCObject)classInstance.Invoke("Scale", xScale, yScale);
            return new AffineTransformation(objScale);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AffineTransformation ScaleInstance(double xScale, double yScale, double x, double y) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objScaleInstance = (JCObject)classType.Invoke("ScaleInstance", xScale, yScale, x, y);
            return new AffineTransformation(objScaleInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AffineTransformation ScaleInstance(double xScale, double yScale) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objScaleInstance = (JCObject)classType.Invoke("ScaleInstance", xScale, yScale);
            return new AffineTransformation(objScaleInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation SetToIdentity() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetToIdentity = (JCObject)classInstance.Invoke("SetToIdentity");
            return new AffineTransformation(objSetToIdentity);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation SetToReflection(double x0, double y0, double x1, double y1) throws Throwable, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetToReflection = (JCObject)classInstance.Invoke("SetToReflection", x0, y0, x1, y1);
            return new AffineTransformation(objSetToReflection);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation SetToReflection(double x, double y) throws Throwable, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetToReflection = (JCObject)classInstance.Invoke("SetToReflection", x, y);
            return new AffineTransformation(objSetToReflection);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation SetToReflectionBasic(double x0, double y0, double x1, double y1) throws Throwable, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetToReflectionBasic = (JCObject)classInstance.Invoke("SetToReflectionBasic", x0, y0, x1, y1);
            return new AffineTransformation(objSetToReflectionBasic);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation SetToRotation(double sinTheta, double cosTheta, double x, double y) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetToRotation = (JCObject)classInstance.Invoke("SetToRotation", sinTheta, cosTheta, x, y);
            return new AffineTransformation(objSetToRotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation SetToRotation(double theta, double x, double y) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetToRotation = (JCObject)classInstance.Invoke("SetToRotation", theta, x, y);
            return new AffineTransformation(objSetToRotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation SetToRotation(double sinTheta, double cosTheta) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetToRotation = (JCObject)classInstance.Invoke("SetToRotation", sinTheta, cosTheta);
            return new AffineTransformation(objSetToRotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation SetToRotation(double theta) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetToRotation = (JCObject)classInstance.Invoke("SetToRotation", theta);
            return new AffineTransformation(objSetToRotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation SetToScale(double xScale, double yScale) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetToScale = (JCObject)classInstance.Invoke("SetToScale", xScale, yScale);
            return new AffineTransformation(objSetToScale);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation SetToShear(double xShear, double yShear) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetToShear = (JCObject)classInstance.Invoke("SetToShear", xShear, yShear);
            return new AffineTransformation(objSetToShear);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation SetToTranslation(double dx, double dy) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetToTranslation = (JCObject)classInstance.Invoke("SetToTranslation", dx, dy);
            return new AffineTransformation(objSetToTranslation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation SetTransformation(double m00, double m01, double m02, double m10, double m11, double m12) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetTransformation = (JCObject)classInstance.Invoke("SetTransformation", m00, m01, m02, m10, m11, m12);
            return new AffineTransformation(objSetTransformation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation SetTransformation(AffineTransformation trans) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetTransformation = (JCObject)classInstance.Invoke("SetTransformation", trans == null ? null : trans.getJCOInstance());
            return new AffineTransformation(objSetTransformation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation Shear(double xShear, double yShear) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objShear = (JCObject)classInstance.Invoke("Shear", xShear, yShear);
            return new AffineTransformation(objShear);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AffineTransformation ShearInstance(double xShear, double yShear) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objShearInstance = (JCObject)classType.Invoke("ShearInstance", xShear, yShear);
            return new AffineTransformation(objShearInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AffineTransformation Translate(double x, double y) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objTranslate = (JCObject)classInstance.Invoke("Translate", x, y);
            return new AffineTransformation(objTranslate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AffineTransformation TranslationInstance(double x, double y) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objTranslationInstance = (JCObject)classType.Invoke("TranslationInstance", x, y);
            return new AffineTransformation(objTranslationInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject Clone() throws Throwable, system.PlatformNotSupportedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objClone = (JCObject)classInstance.Invoke("Clone");
            return new NetObject(objClone);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Filter(CoordinateSequence seq, int i) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Filter", seq == null ? null : seq.getJCOInstance(), i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Transform(CoordinateSequence seq, int i) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Transform", seq == null ? null : seq.getJCOInstance(), i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public boolean getDone() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("Done");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getGeometryChanged() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("GeometryChanged");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsIdentity() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IsIdentity");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getDeterminant() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (double)classInstance.Get("Determinant");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double[] getMatrixEntries() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classInstance.Get("MatrixEntries");
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            double[] resultingArray = new double[resultingArrayList.size()];
			for(int indexMatrixEntries = 0; indexMatrixEntries < resultingArrayList.size(); indexMatrixEntries++ ) {
				resultingArray[indexMatrixEntries] = (double)resultingArrayList.get(indexMatrixEntries);
			}
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}