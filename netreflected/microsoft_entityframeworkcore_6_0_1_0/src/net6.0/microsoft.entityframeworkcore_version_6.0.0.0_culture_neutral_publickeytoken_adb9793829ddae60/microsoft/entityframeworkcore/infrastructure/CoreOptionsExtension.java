/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.entityframeworkcore.infrastructure;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import microsoft.entityframeworkcore.infrastructure.CoreOptionsExtension;
import system.IServiceProvider;
import system.IServiceProviderImplementation;
import microsoft.entityframeworkcore.diagnostics.IDbContextLogger;
import microsoft.entityframeworkcore.diagnostics.IDbContextLoggerImplementation;
import microsoft.extensions.logging.ILoggerFactory;
import microsoft.extensions.logging.ILoggerFactoryImplementation;
import system.TimeSpan;
import microsoft.extensions.caching.memory.IMemoryCache;
import microsoft.extensions.caching.memory.IMemoryCacheImplementation;
import microsoft.entityframeworkcore.metadata.IModel;
import microsoft.entityframeworkcore.metadata.IModelImplementation;
import microsoft.entityframeworkcore.QueryTrackingBehavior;
import microsoft.entityframeworkcore.diagnostics.WarningsConfiguration;
import microsoft.extensions.dependencyinjection.IServiceCollection;
import microsoft.extensions.dependencyinjection.IServiceCollectionImplementation;
import microsoft.entityframeworkcore.infrastructure.IDbContextOptions;
import microsoft.entityframeworkcore.infrastructure.IDbContextOptionsImplementation;
import microsoft.entityframeworkcore.infrastructure.DbContextOptionsExtensionInfo;


/**
 * The base .NET class managing Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension, Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension</a>
 */
public class CoreOptionsExtension extends NetObject  {
    /**
     * Fully assembly qualified name: Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60
     */
    public static final String assemblyFullName = "Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60";
    /**
     * Assembly name: Microsoft.EntityFrameworkCore
     */
    public static final String assemblyShortName = "Microsoft.EntityFrameworkCore";
    /**
     * Qualified class name: Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension
     */
    public static final String className = "Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public CoreOptionsExtension(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link CoreOptionsExtension}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link CoreOptionsExtension} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static CoreOptionsExtension cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new CoreOptionsExtension(from.getJCOInstance());
    }

    // Constructors section
    
    public CoreOptionsExtension() throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    public CoreOptionsExtension WithApplicationServiceProvider(IServiceProvider applicationServiceProvider) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWithApplicationServiceProvider = (JCObject)classInstance.Invoke("WithApplicationServiceProvider", applicationServiceProvider == null ? null : applicationServiceProvider.getJCOInstance());
            return new CoreOptionsExtension(objWithApplicationServiceProvider);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CoreOptionsExtension WithDbContextLogger(IDbContextLogger contextLogger) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWithDbContextLogger = (JCObject)classInstance.Invoke("WithDbContextLogger", contextLogger == null ? null : contextLogger.getJCOInstance());
            return new CoreOptionsExtension(objWithDbContextLogger);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CoreOptionsExtension WithDetailedErrorsEnabled(boolean detailedErrorsEnabled) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWithDetailedErrorsEnabled = (JCObject)classInstance.Invoke("WithDetailedErrorsEnabled", detailedErrorsEnabled);
            return new CoreOptionsExtension(objWithDetailedErrorsEnabled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CoreOptionsExtension WithInternalServiceProvider(IServiceProvider internalServiceProvider) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWithInternalServiceProvider = (JCObject)classInstance.Invoke("WithInternalServiceProvider", internalServiceProvider == null ? null : internalServiceProvider.getJCOInstance());
            return new CoreOptionsExtension(objWithInternalServiceProvider);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CoreOptionsExtension WithLoggerFactory(ILoggerFactory loggerFactory) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWithLoggerFactory = (JCObject)classInstance.Invoke("WithLoggerFactory", loggerFactory == null ? null : loggerFactory.getJCOInstance());
            return new CoreOptionsExtension(objWithLoggerFactory);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CoreOptionsExtension WithLoggingCacheTime(TimeSpan timeSpan) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWithLoggingCacheTime = (JCObject)classInstance.Invoke("WithLoggingCacheTime", timeSpan == null ? null : timeSpan.getJCOInstance());
            return new CoreOptionsExtension(objWithLoggingCacheTime);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CoreOptionsExtension WithMemoryCache(IMemoryCache memoryCache) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWithMemoryCache = (JCObject)classInstance.Invoke("WithMemoryCache", memoryCache == null ? null : memoryCache.getJCOInstance());
            return new CoreOptionsExtension(objWithMemoryCache);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CoreOptionsExtension WithModel(IModel model) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWithModel = (JCObject)classInstance.Invoke("WithModel", model == null ? null : model.getJCOInstance());
            return new CoreOptionsExtension(objWithModel);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CoreOptionsExtension WithQueryTrackingBehavior(QueryTrackingBehavior queryTrackingBehavior) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWithQueryTrackingBehavior = (JCObject)classInstance.Invoke("WithQueryTrackingBehavior", queryTrackingBehavior == null ? null : queryTrackingBehavior.getJCOInstance());
            return new CoreOptionsExtension(objWithQueryTrackingBehavior);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CoreOptionsExtension WithReplacedService(NetType serviceType, NetType newImplementationType, NetType currentImplementationType) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWithReplacedService = (JCObject)classInstance.Invoke("WithReplacedService", serviceType == null ? null : serviceType.getJCOInstance(), newImplementationType == null ? null : newImplementationType.getJCOInstance(), currentImplementationType == null ? null : currentImplementationType.getJCOInstance());
            return new CoreOptionsExtension(objWithReplacedService);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CoreOptionsExtension WithSensitiveDataLoggingEnabled(boolean sensitiveDataLoggingEnabled) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWithSensitiveDataLoggingEnabled = (JCObject)classInstance.Invoke("WithSensitiveDataLoggingEnabled", sensitiveDataLoggingEnabled);
            return new CoreOptionsExtension(objWithSensitiveDataLoggingEnabled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CoreOptionsExtension WithServiceProviderCachingEnabled(boolean serviceProviderCachingEnabled) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWithServiceProviderCachingEnabled = (JCObject)classInstance.Invoke("WithServiceProviderCachingEnabled", serviceProviderCachingEnabled);
            return new CoreOptionsExtension(objWithServiceProviderCachingEnabled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CoreOptionsExtension WithThreadSafetyChecksEnabled(boolean checksEnabled) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWithThreadSafetyChecksEnabled = (JCObject)classInstance.Invoke("WithThreadSafetyChecksEnabled", checksEnabled);
            return new CoreOptionsExtension(objWithThreadSafetyChecksEnabled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CoreOptionsExtension WithWarningsConfiguration(WarningsConfiguration warningsConfiguration) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWithWarningsConfiguration = (JCObject)classInstance.Invoke("WithWarningsConfiguration", warningsConfiguration == null ? null : warningsConfiguration.getJCOInstance());
            return new CoreOptionsExtension(objWithWarningsConfiguration);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ApplyServices(IServiceCollection services) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("ApplyServices", services == null ? null : services.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Validate(IDbContextOptions options) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.FormatException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Validate", options == null ? null : options.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public boolean getDetailedErrorsEnabled() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("DetailedErrorsEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsSensitiveDataLoggingEnabled() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IsSensitiveDataLoggingEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getServiceProviderCachingEnabled() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("ServiceProviderCachingEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getThreadSafetyChecksEnabled() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("ThreadSafetyChecksEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IDbContextLogger getDbContextLogger() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("DbContextLogger");
            return new IDbContextLoggerImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WarningsConfiguration getWarningsConfiguration() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("WarningsConfiguration");
            return new WarningsConfiguration(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbContextOptionsExtensionInfo getInfo() throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Info");
            return new DbContextOptionsExtensionInfo(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IModel getModel() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Model");
            return new IModelImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public QueryTrackingBehavior getQueryTrackingBehavior() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("QueryTrackingBehavior");
            return new QueryTrackingBehavior(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMemoryCache getMemoryCache() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("MemoryCache");
            return new IMemoryCacheImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ILoggerFactory getLoggerFactory() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LoggerFactory");
            return new ILoggerFactoryImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IServiceProvider getApplicationServiceProvider() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ApplicationServiceProvider");
            return new IServiceProviderImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IServiceProvider getInternalServiceProvider() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("InternalServiceProvider");
            return new IServiceProviderImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getLoggingCacheTime() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LoggingCacheTime");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}