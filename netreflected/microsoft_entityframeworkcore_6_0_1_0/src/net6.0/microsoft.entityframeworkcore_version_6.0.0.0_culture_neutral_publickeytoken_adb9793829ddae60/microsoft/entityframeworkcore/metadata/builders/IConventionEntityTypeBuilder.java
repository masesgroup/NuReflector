/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.entityframeworkcore.metadata.builders;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;

// Import section
import microsoft.entityframeworkcore.metadata.builders.IConventionAnnotatableBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionAnnotatableBuilderImplementation;
import system.reflection.MemberInfo;
import microsoft.entityframeworkcore.metadata.IConventionIndex;
import microsoft.entityframeworkcore.metadata.IConventionIndexImplementation;
import microsoft.entityframeworkcore.metadata.IConventionKey;
import microsoft.entityframeworkcore.metadata.IConventionKeyImplementation;
import microsoft.entityframeworkcore.metadata.IConventionForeignKey;
import microsoft.entityframeworkcore.metadata.IConventionForeignKeyImplementation;
import microsoft.entityframeworkcore.metadata.IConventionSkipNavigation;
import microsoft.entityframeworkcore.metadata.IConventionSkipNavigationImplementation;
import microsoft.entityframeworkcore.metadata.IConventionEntityType;
import microsoft.entityframeworkcore.metadata.IConventionEntityTypeImplementation;
import system.linq.expressions.LambdaExpression;
import microsoft.entityframeworkcore.metadata.builders.IConventionDiscriminatorBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionDiscriminatorBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionEntityTypeBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionEntityTypeBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionForeignKeyBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionForeignKeyBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionIndexBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionIndexBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionKeyBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionKeyBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionPropertyBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionPropertyBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionServicePropertyBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionServicePropertyBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionSkipNavigationBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionSkipNavigationBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionModelBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionModelBuilderImplementation;
import microsoft.entityframeworkcore.metadata.IConventionAnnotatable;
import microsoft.entityframeworkcore.metadata.IConventionAnnotatableImplementation;


/**
 * The base .NET class managing Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder, Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder</a>
 */
public interface IConventionEntityTypeBuilder extends IJCOBridgeReflected, IConventionAnnotatableBuilder {
    /**
     * Fully assembly qualified name: Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60
     */
    public static final String assemblyFullName = "Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60";
    /**
     * Assembly name: Microsoft.EntityFrameworkCore
     */
    public static final String assemblyShortName = "Microsoft.EntityFrameworkCore";
    /**
     * Qualified class name: Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder
     */
    public static final String className = "Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder";
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link IConventionEntityTypeBuilder}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link IConventionEntityTypeBuilder} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static IConventionEntityTypeBuilder ToIConventionEntityTypeBuilder(IJCOBridgeReflected from) throws Throwable {
        JCOBridge bridge = JCOBridgeInstance.getInstance("Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60");
        JCType classType = bridge.GetType(className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        NetType.AssertCast(classType, from);
        return new IConventionEntityTypeBuilderImplementation(from.getJCOInstance());
    }

    /**
     * Returns the reflected Assembly name
     * 
     * @return A {@link String} representing the Fullname of reflected Assembly
     */
    public String getJCOAssemblyName();

    /**
     * Returns the reflected Class name
     * 
     * @return A {@link String} representing the Fullname of reflected Class
     */
    public String getJCOClassName();

    /**
     * Returns the reflected Class name used to build the object
     * 
     * @return A {@link String} representing the name used to allocated the object
     *         in CLR context
     */
    public String getJCOObjectName();

    /**
     * Returns the instantiated class
     * 
     * @return An {@link java.lang.Object} representing the instance of the instantiated Class
     */
    public java.lang.Object getJCOInstance();

    /**
     * Returns the instantiated class Type
     * 
     * @return A {@link JCType} representing the Type of the instantiated Class
     */
    public JCType getJCOType();

    // Methods section
    
    public boolean CanAddNavigation(java.lang.String navigationName, boolean fromDataAnnotation) throws Throwable;

    public boolean CanHaveIndexerProperty(NetType propertyType, java.lang.String propertyName, boolean fromDataAnnotation) throws Throwable;

    public boolean CanHaveNavigation(MemberInfo navigation, boolean fromDataAnnotation) throws Throwable;

    public boolean CanHaveNavigation(java.lang.String navigationName, boolean fromDataAnnotation) throws Throwable;

    public boolean CanHaveNavigation(java.lang.String navigationName, NetType type, boolean fromDataAnnotation) throws Throwable;

    public boolean CanHaveProperty(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable;

    public boolean CanHaveProperty(NetType propertyType, java.lang.String propertyName, boolean fromDataAnnotation) throws Throwable;

    public boolean CanHaveServiceProperty(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable;

    public boolean CanHaveSkipNavigation(MemberInfo navigation, boolean fromDataAnnotation) throws Throwable;

    public boolean CanHaveSkipNavigation(java.lang.String skipNavigationName, boolean fromDataAnnotation) throws Throwable;

    public boolean CanHaveSkipNavigation(java.lang.String skipNavigationName, NetType type, boolean fromDataAnnotation) throws Throwable;

    public boolean CanIgnore(java.lang.String memberName, boolean fromDataAnnotation) throws Throwable;


    public boolean CanRemoveDiscriminator(boolean fromDataAnnotation) throws Throwable;

    public boolean CanRemoveIndex(IConventionIndex index, boolean fromDataAnnotation) throws Throwable;

    public boolean CanRemoveKey(boolean fromDataAnnotation) throws Throwable;

    public boolean CanRemoveKey(IConventionKey key, boolean fromDataAnnotation) throws Throwable;

    public boolean CanRemoveRelationship(IConventionForeignKey foreignKey, boolean fromDataAnnotation) throws Throwable;

    public boolean CanRemoveSkipNavigation(IConventionSkipNavigation skipNavigation, boolean fromDataAnnotation) throws Throwable;


    public boolean CanSetBaseType(IConventionEntityType baseEntityType, boolean fromDataAnnotation) throws Throwable;

    public boolean CanSetDefiningQuery(LambdaExpression query, boolean fromDataAnnotation) throws Throwable;

    public boolean CanSetDiscriminator(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable;

    public boolean CanSetDiscriminator(java.lang.String name, boolean fromDataAnnotation) throws Throwable;

    public boolean CanSetDiscriminator(java.lang.String name, NetType type, boolean fromDataAnnotation) throws Throwable;

    public boolean CanSetDiscriminator(NetType type, boolean fromDataAnnotation) throws Throwable;

    public boolean CanSetQueryFilter(LambdaExpression filter, boolean fromDataAnnotation) throws Throwable;

    public boolean IsIgnored(java.lang.String memberName, boolean fromDataAnnotation) throws Throwable;






    public IConventionDiscriminatorBuilder HasDiscriminator(boolean fromDataAnnotation) throws Throwable;

    public IConventionDiscriminatorBuilder HasDiscriminator(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable;

    public IConventionDiscriminatorBuilder HasDiscriminator(java.lang.String name, boolean fromDataAnnotation) throws Throwable;

    public IConventionDiscriminatorBuilder HasDiscriminator(java.lang.String name, NetType type, boolean fromDataAnnotation) throws Throwable;

    public IConventionDiscriminatorBuilder HasDiscriminator(NetType type, boolean fromDataAnnotation) throws Throwable;

    public IConventionEntityTypeBuilder HasBaseType(IConventionEntityType baseEntityType, boolean fromDataAnnotation) throws Throwable;

    public IConventionEntityTypeBuilder HasDefiningQuery(LambdaExpression query, boolean fromDataAnnotation) throws Throwable;

    public IConventionEntityTypeBuilder HasNoDeclaredDiscriminator(boolean fromDataAnnotation) throws Throwable;

    public IConventionEntityTypeBuilder HasNoDiscriminator(boolean fromDataAnnotation) throws Throwable;

    public IConventionEntityTypeBuilder HasNoIndex(IConventionIndex index, boolean fromDataAnnotation) throws Throwable;

    public IConventionEntityTypeBuilder HasNoKey(boolean fromDataAnnotation) throws Throwable;

    public IConventionEntityTypeBuilder HasNoKey(IConventionKey key, boolean fromDataAnnotation) throws Throwable;

    public IConventionEntityTypeBuilder HasNoRelationship(IConventionForeignKey foreignKey, boolean fromDataAnnotation) throws Throwable;

    public IConventionEntityTypeBuilder HasNoSkipNavigation(IConventionSkipNavigation skipNavigation, boolean fromDataAnnotation) throws Throwable;

    public IConventionEntityTypeBuilder HasQueryFilter(LambdaExpression filter, boolean fromDataAnnotation) throws Throwable;

    public IConventionEntityTypeBuilder Ignore(java.lang.String memberName, boolean fromDataAnnotation) throws Throwable;

    public IConventionForeignKeyBuilder HasOwnership(IConventionEntityType targetEntityType, MemberInfo navigation, boolean fromDataAnnotation) throws Throwable;

    public IConventionForeignKeyBuilder HasOwnership(IConventionEntityType targetEntityType, MemberInfo navigation, MemberInfo inverseNavigation, boolean fromDataAnnotation) throws Throwable;

    public IConventionForeignKeyBuilder HasOwnership(IConventionEntityType targetEntityType, java.lang.String navigationName, boolean fromDataAnnotation) throws Throwable;

    public IConventionForeignKeyBuilder HasOwnership(IConventionEntityType targetEntityType, java.lang.String navigationName, java.lang.String inverseNavigationName, boolean fromDataAnnotation) throws Throwable;

    public IConventionForeignKeyBuilder HasOwnership(NetType targetEntityType, MemberInfo navigation, boolean fromDataAnnotation) throws Throwable;

    public IConventionForeignKeyBuilder HasOwnership(NetType targetEntityType, MemberInfo navigation, MemberInfo inverseNavigation, boolean fromDataAnnotation) throws Throwable;

    public IConventionForeignKeyBuilder HasOwnership(NetType targetEntityType, java.lang.String navigationName, boolean fromDataAnnotation) throws Throwable;

    public IConventionForeignKeyBuilder HasOwnership(NetType targetEntityType, java.lang.String navigationName, java.lang.String inverseNavigationName, boolean fromDataAnnotation) throws Throwable;

    public IConventionForeignKeyBuilder HasRelationship(IConventionEntityType targetEntityType, boolean fromDataAnnotation) throws Throwable;

    public IConventionForeignKeyBuilder HasRelationship(IConventionEntityType principalEntityType, IConventionKey principalKey, boolean fromDataAnnotation) throws Throwable;

    public IConventionForeignKeyBuilder HasRelationship(IConventionEntityType targetEntityType, MemberInfo navigation, boolean setTargetAsPrincipal, boolean fromDataAnnotation) throws Throwable;

    public IConventionForeignKeyBuilder HasRelationship(IConventionEntityType targetEntityType, MemberInfo navigation, MemberInfo inverseNavigation, boolean setTargetAsPrincipal, boolean fromDataAnnotation) throws Throwable;

    public IConventionForeignKeyBuilder HasRelationship(IConventionEntityType targetEntityType, java.lang.String navigationName, boolean setTargetAsPrincipal, boolean fromDataAnnotation) throws Throwable;

    public IConventionForeignKeyBuilder HasRelationship(IConventionEntityType targetEntityType, java.lang.String navigationName, java.lang.String inverseNavigationName, boolean setTargetAsPrincipal, boolean fromDataAnnotation) throws Throwable;

    public IConventionPropertyBuilder CreateUniqueProperty(NetType propertyType, java.lang.String basePropertyName, boolean required) throws Throwable;

    public IConventionPropertyBuilder IndexerProperty(NetType propertyType, java.lang.String propertyName, boolean fromDataAnnotation) throws Throwable;

    public IConventionPropertyBuilder Property(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable;

    public IConventionPropertyBuilder Property(NetType propertyType, java.lang.String propertyName, boolean setTypeConfigurationSource, boolean fromDataAnnotation) throws Throwable;

    public IConventionServicePropertyBuilder ServiceProperty(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable;


    
    // Properties section
    


    // Instance Events section
    

}