/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package mongodb.bson.serialization;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import mongodb.bson.serialization.BsonClassMap;
import mongodb.bson.serialization.BsonCreatorMap;
import system.reflection.ConstructorInfo;
import system.reflection.MethodInfo;
import mongodb.bson.serialization.BsonMemberMap;
import system.reflection.MemberInfo;
import mongodb.bson.serialization.conventions.IConventionPack;
import mongodb.bson.serialization.conventions.IConventionPackImplementation;


/**
 * The base .NET class managing MongoDB.Bson.Serialization.BsonClassMap, MongoDB.Bson, Version=2.4.4.0, Culture=neutral, PublicKeyToken=15b1115599983c50.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/MongoDB.Bson.Serialization.BsonClassMap" target="_top">https://docs.microsoft.com/en-us/dotnet/api/MongoDB.Bson.Serialization.BsonClassMap</a>
 */
public class BsonClassMap extends NetObject  {
    /**
     * Fully assembly qualified name: MongoDB.Bson, Version=2.4.4.0, Culture=neutral, PublicKeyToken=15b1115599983c50
     */
    public static final String assemblyFullName = "MongoDB.Bson, Version=2.4.4.0, Culture=neutral, PublicKeyToken=15b1115599983c50";
    /**
     * Assembly name: MongoDB.Bson
     */
    public static final String assemblyShortName = "MongoDB.Bson";
    /**
     * Qualified class name: MongoDB.Bson.Serialization.BsonClassMap
     */
    public static final String className = "MongoDB.Bson.Serialization.BsonClassMap";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public BsonClassMap(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link BsonClassMap}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link BsonClassMap} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static BsonClassMap cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new BsonClassMap(from.getJCOInstance());
    }

    // Constructors section
    
    public BsonClassMap() throws Throwable {
    }

    public BsonClassMap(NetType _classType) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.FormatException, system.NotSupportedException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(_classType == null ? null : _classType.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonClassMap(NetType _classType, BsonClassMap baseClassMap) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.FormatException, system.globalization.CultureNotFoundException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(_classType == null ? null : _classType.getJCOInstance(), baseClassMap == null ? null : baseClassMap.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    
    // Methods section
    
    public static boolean IsClassMapRegistered(NetType type) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.InvalidOperationException, system.threading.LockRecursionException, system.threading.WaitHandleCannotBeOpenedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.threading.SynchronizationLockException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsClassMapRegistered", type == null ? null : type.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonClassMap Freeze() throws Throwable, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.InvalidOperationException, system.threading.LockRecursionException, system.threading.WaitHandleCannotBeOpenedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.threading.SynchronizationLockException, system.NotSupportedException, system.security.SecurityException, system.MissingMethodException, system.reflection.TargetInvocationException, system.IndexOutOfRangeException, mongodb.bson.BsonSerializationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFreeze = (JCObject)classInstance.Invoke("Freeze");
            return new BsonClassMap(objFreeze);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static BsonClassMap LookupClassMap(NetType _classType) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.InvalidOperationException, system.threading.LockRecursionException, system.threading.WaitHandleCannotBeOpenedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, system.threading.SynchronizationLockException, system.NotSupportedException, system.security.SecurityException, system.MissingMethodException, system.reflection.TargetInvocationException, system.IndexOutOfRangeException, system.collections.generic.KeyNotFoundException, mongodb.bson.BsonSerializationException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objLookupClassMap = (JCObject)classType.Invoke("LookupClassMap", _classType == null ? null : _classType.getJCOInstance());
            return new BsonClassMap(objLookupClassMap);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonCreatorMap MapConstructor(ConstructorInfo constructorInfo) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.NotSupportedException, system.NotImplementedException, system.collections.generic.KeyNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objMapConstructor = (JCObject)classInstance.Invoke("MapConstructor", constructorInfo == null ? null : constructorInfo.getJCOInstance());
            return new BsonCreatorMap(objMapConstructor);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonCreatorMap MapConstructor(ConstructorInfo constructorInfo, java.lang.String... argumentNames) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException, system.resources.MissingManifestResourceException, system.NotSupportedException, system.ArgumentException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, mongodb.bson.BsonSerializationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objMapConstructor = (JCObject)classInstance.Invoke("MapConstructor", constructorInfo == null ? null : constructorInfo.getJCOInstance(), argumentNames);
            return new BsonCreatorMap(objMapConstructor);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonCreatorMap MapConstructor(ConstructorInfo dupParam0, JCORefOut dupParam1) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException, system.resources.MissingManifestResourceException, system.NotSupportedException, system.ArgumentException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, mongodb.bson.BsonSerializationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objMapConstructor = (JCObject)classInstance.Invoke("MapConstructor", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut());
            return new BsonCreatorMap(objMapConstructor);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonCreatorMap MapFactoryMethod(MethodInfo methodInfo) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.NotSupportedException, system.NotImplementedException, system.collections.generic.KeyNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objMapFactoryMethod = (JCObject)classInstance.Invoke("MapFactoryMethod", methodInfo == null ? null : methodInfo.getJCOInstance());
            return new BsonCreatorMap(objMapFactoryMethod);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonCreatorMap MapFactoryMethod(MethodInfo methodInfo, java.lang.String... argumentNames) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException, system.resources.MissingManifestResourceException, system.ArgumentException, system.NotSupportedException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, mongodb.bson.BsonSerializationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objMapFactoryMethod = (JCObject)classInstance.Invoke("MapFactoryMethod", methodInfo == null ? null : methodInfo.getJCOInstance(), argumentNames);
            return new BsonCreatorMap(objMapFactoryMethod);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonCreatorMap MapFactoryMethod(MethodInfo dupParam0, JCORefOut dupParam1) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException, system.resources.MissingManifestResourceException, system.ArgumentException, system.NotSupportedException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, mongodb.bson.BsonSerializationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objMapFactoryMethod = (JCObject)classInstance.Invoke("MapFactoryMethod", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut());
            return new BsonCreatorMap(objMapFactoryMethod);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonMemberMap GetMemberMap(java.lang.String memberName) throws Throwable, system.ArgumentNullException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetMemberMap = (JCObject)classInstance.Invoke("GetMemberMap", memberName);
            return new BsonMemberMap(objGetMemberMap);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonMemberMap GetMemberMapForElement(java.lang.String elementName) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetMemberMapForElement = (JCObject)classInstance.Invoke("GetMemberMapForElement", elementName);
            return new BsonMemberMap(objGetMemberMapForElement);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonMemberMap MapExtraElementsField(java.lang.String fieldName) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException, mongodb.bson.BsonSerializationException, system.ArgumentException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objMapExtraElementsField = (JCObject)classInstance.Invoke("MapExtraElementsField", fieldName);
            return new BsonMemberMap(objMapExtraElementsField);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonMemberMap MapExtraElementsMember(MemberInfo memberInfo) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException, system.ArgumentException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objMapExtraElementsMember = (JCObject)classInstance.Invoke("MapExtraElementsMember", memberInfo == null ? null : memberInfo.getJCOInstance());
            return new BsonMemberMap(objMapExtraElementsMember);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonMemberMap MapExtraElementsProperty(java.lang.String propertyName) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException, mongodb.bson.BsonSerializationException, system.ArgumentException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objMapExtraElementsProperty = (JCObject)classInstance.Invoke("MapExtraElementsProperty", propertyName);
            return new BsonMemberMap(objMapExtraElementsProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonMemberMap MapField(java.lang.String fieldName) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException, mongodb.bson.BsonSerializationException, system.ArgumentException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objMapField = (JCObject)classInstance.Invoke("MapField", fieldName);
            return new BsonMemberMap(objMapField);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonMemberMap MapIdField(java.lang.String fieldName) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException, mongodb.bson.BsonSerializationException, system.ArgumentException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objMapIdField = (JCObject)classInstance.Invoke("MapIdField", fieldName);
            return new BsonMemberMap(objMapIdField);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonMemberMap MapIdMember(MemberInfo memberInfo) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException, system.ArgumentException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objMapIdMember = (JCObject)classInstance.Invoke("MapIdMember", memberInfo == null ? null : memberInfo.getJCOInstance());
            return new BsonMemberMap(objMapIdMember);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonMemberMap MapIdProperty(java.lang.String propertyName) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException, mongodb.bson.BsonSerializationException, system.ArgumentException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objMapIdProperty = (JCObject)classInstance.Invoke("MapIdProperty", propertyName);
            return new BsonMemberMap(objMapIdProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonMemberMap MapMember(MemberInfo memberInfo) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objMapMember = (JCObject)classInstance.Invoke("MapMember", memberInfo == null ? null : memberInfo.getJCOInstance());
            return new BsonMemberMap(objMapMember);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonMemberMap MapProperty(java.lang.String propertyName) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException, mongodb.bson.BsonSerializationException, system.ArgumentException, system.NotSupportedException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objMapProperty = (JCObject)classInstance.Invoke("MapProperty", propertyName);
            return new BsonMemberMap(objMapProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject CreateInstance() throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.NotSupportedException, mongodb.bson.BsonSerializationException, system.collections.generic.KeyNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateInstance = (JCObject)classInstance.Invoke("CreateInstance");
            return new NetObject(objCreateInstance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetType GetMemberInfoType(MemberInfo memberInfo) throws Throwable, system.ArgumentNullException, system.NotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetMemberInfoType = (JCObject)classType.Invoke("GetMemberInfoType", memberInfo == null ? null : memberInfo.getJCOInstance());
            return new NetType(objGetMemberInfoType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AddKnownType(NetType type) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AddKnownType", type == null ? null : type.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AutoMap() throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException, system.IndexOutOfRangeException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.ArgumentException, system.NotSupportedException, system.collections.generic.KeyNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AutoMap");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void RegisterClassMap(BsonClassMap classMap) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.ArgumentException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.InvalidOperationException, system.threading.LockRecursionException, system.threading.WaitHandleCannotBeOpenedException, system.io.FileNotFoundException, system.io.DirectoryNotFoundException, system.UnauthorizedAccessException, system.io.IOException, system.io.PathTooLongException, system.io.DriveNotFoundException, system.OperationCanceledException, mongodb.bson.BsonSerializationException, system.threading.SynchronizationLockException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("RegisterClassMap", classMap == null ? null : classMap.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Reset() throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Reset");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetDiscriminator(java.lang.String discriminator) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetDiscriminator", discriminator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetDiscriminatorIsRequired(boolean discriminatorIsRequired) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetDiscriminatorIsRequired", discriminatorIsRequired);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetExtraElementsMember(BsonMemberMap memberMap) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetExtraElementsMember", memberMap == null ? null : memberMap.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetIdMember(BsonMemberMap memberMap) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetIdMember", memberMap == null ? null : memberMap.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetIgnoreExtraElements(boolean ignoreExtraElements) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetIgnoreExtraElements", ignoreExtraElements);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetIgnoreExtraElementsIsInherited(boolean ignoreExtraElementsIsInherited) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetIgnoreExtraElementsIsInherited", ignoreExtraElementsIsInherited);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetIsRootClass(boolean isRootClass) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetIsRootClass", isRootClass);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UnmapConstructor(ConstructorInfo constructorInfo) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("UnmapConstructor", constructorInfo == null ? null : constructorInfo.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UnmapFactoryMethod(MethodInfo methodInfo) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("UnmapFactoryMethod", methodInfo == null ? null : methodInfo.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UnmapField(java.lang.String fieldName) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException, mongodb.bson.BsonSerializationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("UnmapField", fieldName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UnmapMember(MemberInfo memberInfo) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("UnmapMember", memberInfo == null ? null : memberInfo.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UnmapProperty(java.lang.String propertyName) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException, mongodb.bson.BsonSerializationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("UnmapProperty", propertyName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public boolean getDiscriminatorIsRequired() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("DiscriminatorIsRequired");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getHasCreatorMaps() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("HasCreatorMaps");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getHasRootClass() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("HasRootClass");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIgnoreExtraElements() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IgnoreExtraElements");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIgnoreExtraElementsIsInherited() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IgnoreExtraElementsIsInherited");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsAnonymous() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IsAnonymous");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsFrozen() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IsFrozen");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsRootClass() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IsRootClass");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonClassMap getBaseClassMap() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("BaseClassMap");
            return new BsonClassMap(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonMemberMap getExtraElementsMemberMap() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ExtraElementsMemberMap");
            return new BsonMemberMap(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BsonMemberMap getIdMemberMap() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("IdMemberMap");
            return new BsonMemberMap(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionPack getConventionPack() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ConventionPack");
            return new IConventionPackImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDiscriminator() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("Discriminator");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetType getClassType() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ClassType");
            return new NetType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}