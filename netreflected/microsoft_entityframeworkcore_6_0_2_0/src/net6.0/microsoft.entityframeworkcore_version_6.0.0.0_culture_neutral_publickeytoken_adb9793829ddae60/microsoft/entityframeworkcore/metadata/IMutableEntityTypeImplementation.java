/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.entityframeworkcore.metadata;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import microsoft.entityframeworkcore.metadata.IReadOnlyEntityType;
import microsoft.entityframeworkcore.metadata.IReadOnlyEntityTypeImplementation;
import microsoft.entityframeworkcore.metadata.IReadOnlyTypeBase;
import microsoft.entityframeworkcore.metadata.IReadOnlyTypeBaseImplementation;
import microsoft.entityframeworkcore.infrastructure.IReadOnlyAnnotatable;
import microsoft.entityframeworkcore.infrastructure.IReadOnlyAnnotatableImplementation;
import microsoft.entityframeworkcore.metadata.IMutableTypeBase;
import microsoft.entityframeworkcore.metadata.IMutableTypeBaseImplementation;
import microsoft.entityframeworkcore.metadata.IMutableAnnotatable;
import microsoft.entityframeworkcore.metadata.IMutableAnnotatableImplementation;
import microsoft.entityframeworkcore.ChangeTrackingStrategy;
import microsoft.entityframeworkcore.infrastructure.IAnnotation;
import microsoft.entityframeworkcore.infrastructure.IAnnotationImplementation;
import microsoft.entityframeworkcore.metadata.IMutableEntityType;
import microsoft.entityframeworkcore.metadata.IMutableEntityTypeImplementation;
import microsoft.entityframeworkcore.metadata.IMutableForeignKey;
import microsoft.entityframeworkcore.metadata.IMutableForeignKeyImplementation;
import microsoft.entityframeworkcore.metadata.IMutableProperty;
import microsoft.entityframeworkcore.metadata.IMutablePropertyImplementation;
import microsoft.entityframeworkcore.metadata.IMutableKey;
import microsoft.entityframeworkcore.metadata.IMutableKeyImplementation;
import microsoft.entityframeworkcore.metadata.IReadOnlyProperty;
import microsoft.entityframeworkcore.metadata.IReadOnlyPropertyImplementation;
import microsoft.entityframeworkcore.metadata.IReadOnlyKey;
import microsoft.entityframeworkcore.metadata.IReadOnlyKeyImplementation;
import microsoft.entityframeworkcore.metadata.IReadOnlyForeignKey;
import microsoft.entityframeworkcore.metadata.IReadOnlyForeignKeyImplementation;
import microsoft.entityframeworkcore.metadata.IMutableIndex;
import microsoft.entityframeworkcore.metadata.IMutableIndexImplementation;
import microsoft.entityframeworkcore.metadata.IReadOnlyIndex;
import microsoft.entityframeworkcore.metadata.IReadOnlyIndexImplementation;
import microsoft.entityframeworkcore.metadata.IMutableNavigation;
import microsoft.entityframeworkcore.metadata.IMutableNavigationImplementation;
import system.reflection.MemberInfo;
import microsoft.entityframeworkcore.metadata.IMutableServiceProperty;
import microsoft.entityframeworkcore.metadata.IMutableServicePropertyImplementation;
import microsoft.entityframeworkcore.metadata.IReadOnlyServiceProperty;
import microsoft.entityframeworkcore.metadata.IReadOnlyServicePropertyImplementation;
import microsoft.entityframeworkcore.metadata.IMutableSkipNavigation;
import microsoft.entityframeworkcore.metadata.IMutableSkipNavigationImplementation;
import microsoft.entityframeworkcore.metadata.IReadOnlySkipNavigation;
import microsoft.entityframeworkcore.metadata.IReadOnlySkipNavigationImplementation;
import microsoft.entityframeworkcore.PropertyAccessMode;
import system.linq.expressions.LambdaExpression;
import system.reflection.PropertyInfo;
import microsoft.entityframeworkcore.infrastructure.MetadataDebugStringOptions;
import microsoft.entityframeworkcore.metadata.IMutableModel;
import microsoft.entityframeworkcore.metadata.IMutableModelImplementation;


/**
 * The base .NET class managing Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType</a>
 */
public class IMutableEntityTypeImplementation extends NetObject implements IMutableEntityType {
    /**
     * Fully assembly qualified name: Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60
     */
    public static final String assemblyFullName = "Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60";
    /**
     * Assembly name: Microsoft.EntityFrameworkCore
     */
    public static final String assemblyShortName = "Microsoft.EntityFrameworkCore";
    /**
     * Qualified class name: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
     */
    public static final String className = "Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public IMutableEntityTypeImplementation(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link IMutableEntityType}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link IMutableEntityType} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static IMutableEntityType ToIMutableEntityType(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new IMutableEntityTypeImplementation(from.getJCOInstance());
    }

    // Methods section
    
    public boolean GetIsDiscriminatorMappingComplete() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("GetIsDiscriminatorMappingComplete");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean HasDefiningNavigation() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("HasDefiningNavigation");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean IsAbstract() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("IsAbstract");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean IsAssignableFrom(IReadOnlyEntityType derivedType) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("IsAssignableFrom", derivedType == null ? null : derivedType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean IsIgnored(java.lang.String memberName) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("IsIgnored", memberName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean IsInOwnershipPath(IReadOnlyEntityType targetType) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("IsInOwnershipPath", targetType == null ? null : targetType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean IsOwned() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("IsOwned");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean IsStrictlyDerivedFrom(IReadOnlyEntityType baseType) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("IsStrictlyDerivedFrom", baseType == null ? null : baseType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ChangeTrackingStrategy GetChangeTrackingStrategy() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetChangeTrackingStrategy = (JCObject)classInstance.Invoke("GetChangeTrackingStrategy");
            return new ChangeTrackingStrategy(objGetChangeTrackingStrategy);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IAnnotation AddAnnotation(java.lang.String name, NetObject value) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddAnnotation = (JCObject)classInstance.Invoke("AddAnnotation", name, value == null ? null : value.getJCOInstance());
            return new IAnnotationImplementation(objAddAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IAnnotation FindAnnotation(java.lang.String name) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindAnnotation = (JCObject)classInstance.Invoke("FindAnnotation", name);
            return new IAnnotationImplementation(objFindAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IAnnotation GetAnnotation(java.lang.String annotationName) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetAnnotation = (JCObject)classInstance.Invoke("GetAnnotation", annotationName);
            return new IAnnotationImplementation(objGetAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IAnnotation RemoveAnnotation(java.lang.String name) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRemoveAnnotation = (JCObject)classInstance.Invoke("RemoveAnnotation", name);
            return new IAnnotationImplementation(objRemoveAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableEntityType FindClosestCommonParent(IReadOnlyEntityType otherEntityType) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindClosestCommonParent = (JCObject)classInstance.Invoke("FindClosestCommonParent", otherEntityType == null ? null : otherEntityType.getJCOInstance());
            return new IMutableEntityTypeImplementation(objFindClosestCommonParent);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableEntityType GetRootType() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetRootType = (JCObject)classInstance.Invoke("GetRootType");
            return new IMutableEntityTypeImplementation(objGetRootType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableEntityType LeastDerivedType(IReadOnlyEntityType otherEntityType) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objLeastDerivedType = (JCObject)classInstance.Invoke("LeastDerivedType", otherEntityType == null ? null : otherEntityType.getJCOInstance());
            return new IMutableEntityTypeImplementation(objLeastDerivedType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableForeignKey AddForeignKey(IMutableProperty property, IMutableKey principalKey, IMutableEntityType principalEntityType) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddForeignKey = (JCObject)classInstance.Invoke("AddForeignKey", property == null ? null : property.getJCOInstance(), principalKey == null ? null : principalKey.getJCOInstance(), principalEntityType == null ? null : principalEntityType.getJCOInstance());
            return new IMutableForeignKeyImplementation(objAddForeignKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableForeignKey FindForeignKey(IReadOnlyProperty property, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindForeignKey = (JCObject)classInstance.Invoke("FindForeignKey", property == null ? null : property.getJCOInstance(), principalKey == null ? null : principalKey.getJCOInstance(), principalEntityType == null ? null : principalEntityType.getJCOInstance());
            return new IMutableForeignKeyImplementation(objFindForeignKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableForeignKey FindOwnership() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindOwnership = (JCObject)classInstance.Invoke("FindOwnership");
            return new IMutableForeignKeyImplementation(objFindOwnership);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableForeignKey RemoveForeignKey(IReadOnlyForeignKey foreignKey) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRemoveForeignKey = (JCObject)classInstance.Invoke("RemoveForeignKey", foreignKey == null ? null : foreignKey.getJCOInstance());
            return new IMutableForeignKeyImplementation(objRemoveForeignKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableIndex AddIndex(IMutableProperty property, java.lang.String name) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddIndex = (JCObject)classInstance.Invoke("AddIndex", property == null ? null : property.getJCOInstance(), name);
            return new IMutableIndexImplementation(objAddIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableIndex AddIndex(IMutableProperty property) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddIndex = (JCObject)classInstance.Invoke("AddIndex", property == null ? null : property.getJCOInstance());
            return new IMutableIndexImplementation(objAddIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableIndex FindIndex(IReadOnlyProperty property) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindIndex = (JCObject)classInstance.Invoke("FindIndex", property == null ? null : property.getJCOInstance());
            return new IMutableIndexImplementation(objFindIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableIndex FindIndex(java.lang.String name) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindIndex = (JCObject)classInstance.Invoke("FindIndex", name);
            return new IMutableIndexImplementation(objFindIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableIndex RemoveIndex(IReadOnlyIndex index) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRemoveIndex = (JCObject)classInstance.Invoke("RemoveIndex", index == null ? null : index.getJCOInstance());
            return new IMutableIndexImplementation(objRemoveIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableKey AddKey(IMutableProperty property) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddKey = (JCObject)classInstance.Invoke("AddKey", property == null ? null : property.getJCOInstance());
            return new IMutableKeyImplementation(objAddKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableKey FindKey(IReadOnlyProperty property) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindKey = (JCObject)classInstance.Invoke("FindKey", property == null ? null : property.getJCOInstance());
            return new IMutableKeyImplementation(objFindKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableKey FindPrimaryKey() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindPrimaryKey = (JCObject)classInstance.Invoke("FindPrimaryKey");
            return new IMutableKeyImplementation(objFindPrimaryKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableKey RemoveKey(IReadOnlyKey key) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRemoveKey = (JCObject)classInstance.Invoke("RemoveKey", key == null ? null : key.getJCOInstance());
            return new IMutableKeyImplementation(objRemoveKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableKey SetPrimaryKey(IMutableProperty property) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetPrimaryKey = (JCObject)classInstance.Invoke("SetPrimaryKey", property == null ? null : property.getJCOInstance());
            return new IMutableKeyImplementation(objSetPrimaryKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableNavigation FindDeclaredNavigation(java.lang.String name) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindDeclaredNavigation = (JCObject)classInstance.Invoke("FindDeclaredNavigation", name);
            return new IMutableNavigationImplementation(objFindDeclaredNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableNavigation FindNavigation(MemberInfo memberInfo) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindNavigation = (JCObject)classInstance.Invoke("FindNavigation", memberInfo == null ? null : memberInfo.getJCOInstance());
            return new IMutableNavigationImplementation(objFindNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableNavigation FindNavigation(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindNavigation = (JCObject)classInstance.Invoke("FindNavigation", name);
            return new IMutableNavigationImplementation(objFindNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableProperty AddIndexerProperty(java.lang.String name, NetType propertyType) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, system.ArgumentException, system.FormatException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddIndexerProperty = (JCObject)classInstance.Invoke("AddIndexerProperty", name, propertyType == null ? null : propertyType.getJCOInstance());
            return new IMutablePropertyImplementation(objAddIndexerProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableProperty AddProperty(MemberInfo memberInfo) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddProperty = (JCObject)classInstance.Invoke("AddProperty", memberInfo == null ? null : memberInfo.getJCOInstance());
            return new IMutablePropertyImplementation(objAddProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableProperty AddProperty(java.lang.String name, NetType propertyType, MemberInfo memberInfo) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddProperty = (JCObject)classInstance.Invoke("AddProperty", name, propertyType == null ? null : propertyType.getJCOInstance(), memberInfo == null ? null : memberInfo.getJCOInstance());
            return new IMutablePropertyImplementation(objAddProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableProperty AddProperty(java.lang.String name, NetType propertyType) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddProperty = (JCObject)classInstance.Invoke("AddProperty", name, propertyType == null ? null : propertyType.getJCOInstance());
            return new IMutablePropertyImplementation(objAddProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableProperty AddProperty(java.lang.String name) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddProperty = (JCObject)classInstance.Invoke("AddProperty", name);
            return new IMutablePropertyImplementation(objAddProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableProperty FindDeclaredProperty(java.lang.String name) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindDeclaredProperty = (JCObject)classInstance.Invoke("FindDeclaredProperty", name);
            return new IMutablePropertyImplementation(objFindDeclaredProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableProperty FindDiscriminatorProperty() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindDiscriminatorProperty = (JCObject)classInstance.Invoke("FindDiscriminatorProperty");
            return new IMutablePropertyImplementation(objFindDiscriminatorProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableProperty FindProperty(MemberInfo memberInfo) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindProperty = (JCObject)classInstance.Invoke("FindProperty", memberInfo == null ? null : memberInfo.getJCOInstance());
            return new IMutablePropertyImplementation(objFindProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableProperty FindProperty(java.lang.String name) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindProperty = (JCObject)classInstance.Invoke("FindProperty", name);
            return new IMutablePropertyImplementation(objFindProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableProperty GetProperty(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetProperty = (JCObject)classInstance.Invoke("GetProperty", name);
            return new IMutablePropertyImplementation(objGetProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableProperty RemoveProperty(IReadOnlyProperty property) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRemoveProperty = (JCObject)classInstance.Invoke("RemoveProperty", property == null ? null : property.getJCOInstance());
            return new IMutablePropertyImplementation(objRemoveProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableProperty RemoveProperty(java.lang.String name) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRemoveProperty = (JCObject)classInstance.Invoke("RemoveProperty", name);
            return new IMutablePropertyImplementation(objRemoveProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableServiceProperty AddServiceProperty(MemberInfo memberInfo) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddServiceProperty = (JCObject)classInstance.Invoke("AddServiceProperty", memberInfo == null ? null : memberInfo.getJCOInstance());
            return new IMutableServicePropertyImplementation(objAddServiceProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableServiceProperty FindServiceProperty(java.lang.String name) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindServiceProperty = (JCObject)classInstance.Invoke("FindServiceProperty", name);
            return new IMutableServicePropertyImplementation(objFindServiceProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableServiceProperty RemoveServiceProperty(IReadOnlyServiceProperty property) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRemoveServiceProperty = (JCObject)classInstance.Invoke("RemoveServiceProperty", property == null ? null : property.getJCOInstance());
            return new IMutableServicePropertyImplementation(objRemoveServiceProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableServiceProperty RemoveServiceProperty(java.lang.String name) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRemoveServiceProperty = (JCObject)classInstance.Invoke("RemoveServiceProperty", name);
            return new IMutableServicePropertyImplementation(objRemoveServiceProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableSkipNavigation AddSkipNavigation(java.lang.String name, MemberInfo memberInfo, IMutableEntityType targetEntityType, boolean collection, boolean onDependent) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddSkipNavigation = (JCObject)classInstance.Invoke("AddSkipNavigation", name, memberInfo == null ? null : memberInfo.getJCOInstance(), targetEntityType == null ? null : targetEntityType.getJCOInstance(), collection, onDependent);
            return new IMutableSkipNavigationImplementation(objAddSkipNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableSkipNavigation FindDeclaredSkipNavigation(java.lang.String name) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindDeclaredSkipNavigation = (JCObject)classInstance.Invoke("FindDeclaredSkipNavigation", name);
            return new IMutableSkipNavigationImplementation(objFindDeclaredSkipNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableSkipNavigation FindSkipNavigation(MemberInfo memberInfo) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindSkipNavigation = (JCObject)classInstance.Invoke("FindSkipNavigation", memberInfo == null ? null : memberInfo.getJCOInstance());
            return new IMutableSkipNavigationImplementation(objFindSkipNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableSkipNavigation FindSkipNavigation(java.lang.String name) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindSkipNavigation = (JCObject)classInstance.Invoke("FindSkipNavigation", name);
            return new IMutableSkipNavigationImplementation(objFindSkipNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableSkipNavigation RemoveSkipNavigation(IReadOnlySkipNavigation navigation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRemoveSkipNavigation = (JCObject)classInstance.Invoke("RemoveSkipNavigation", navigation == null ? null : navigation.getJCOInstance());
            return new IMutableSkipNavigationImplementation(objRemoveSkipNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyAccessMode GetNavigationAccessMode() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetNavigationAccessMode = (JCObject)classInstance.Invoke("GetNavigationAccessMode");
            return new PropertyAccessMode(objGetNavigationAccessMode);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyAccessMode GetPropertyAccessMode() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetPropertyAccessMode = (JCObject)classInstance.Invoke("GetPropertyAccessMode");
            return new PropertyAccessMode(objGetPropertyAccessMode);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression GetQueryFilter() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetQueryFilter = (JCObject)classInstance.Invoke("GetQueryFilter");
            return new LambdaExpression(objGetQueryFilter);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject GetDiscriminatorValue() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetDiscriminatorValue = (JCObject)classInstance.Invoke("GetDiscriminatorValue");
            return new NetObject(objGetDiscriminatorValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyInfo FindIndexerPropertyInfo() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindIndexerPropertyInfo = (JCObject)classInstance.Invoke("FindIndexerPropertyInfo");
            return new PropertyInfo(objFindIndexerPropertyInfo);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String AddIgnored(java.lang.String memberName) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("AddIgnored", memberName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String AnnotationsToDebugString(int indent) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("AnnotationsToDebugString", indent);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String DisplayName() throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.runtime.interopservices.ExternalException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("DisplayName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String DisplayName(boolean omitSharedType) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.globalization.CultureNotFoundException, system.runtime.interopservices.ExternalException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("DisplayName", omitSharedType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetDiscriminatorPropertyName() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("GetDiscriminatorPropertyName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String RemoveIgnored(java.lang.String memberName) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("RemoveIgnored", memberName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String ShortName() throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.ArrayTypeMismatchException, system.globalization.CultureNotFoundException, system.runtime.interopservices.ExternalException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("ShortName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String ToDebugString(MetadataDebugStringOptions options, int indent) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("ToDebugString", options == null ? null : options.getJCOInstance(), indent);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RemoveDiscriminatorValue() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RemoveDiscriminatorValue");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetAnnotation(java.lang.String name, NetObject value) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetAnnotation", name, value == null ? null : value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetDiscriminatorProperty(IReadOnlyProperty property) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetDiscriminatorProperty", property == null ? null : property.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetDiscriminatorValue(NetObject value) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetDiscriminatorValue", value == null ? null : value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetOrRemoveAnnotation(java.lang.String name, NetObject value) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetOrRemoveAnnotation", name, value == null ? null : value.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetQueryFilter(LambdaExpression queryFilter) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetQueryFilter", queryFilter == null ? null : queryFilter.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public boolean getHasSharedClrType() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("HasSharedClrType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsKeyless() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IsKeyless");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIsKeyless(boolean IsKeyless) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("IsKeyless", IsKeyless);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsPropertyBag() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IsPropertyBag");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableEntityType getBaseType() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("BaseType");
            return new IMutableEntityTypeImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBaseType(IMutableEntityType BaseType) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("BaseType", BaseType == null ? null : BaseType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableEntityType getDefiningEntityType() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("DefiningEntityType");
            return new IMutableEntityTypeImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableModel getModel() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Model");
            return new IMutableModelImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDefiningNavigationName() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("DefiningNavigationName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getName() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("Name");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetType getClrType() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ClrType");
            return new NetType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}