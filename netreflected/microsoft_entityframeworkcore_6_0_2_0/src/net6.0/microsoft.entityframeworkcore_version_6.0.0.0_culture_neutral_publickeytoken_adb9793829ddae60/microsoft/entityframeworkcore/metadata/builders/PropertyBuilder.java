/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.entityframeworkcore.metadata.builders;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import microsoft.entityframeworkcore.metadata.IMutableProperty;
import microsoft.entityframeworkcore.metadata.IMutablePropertyImplementation;
import microsoft.entityframeworkcore.metadata.builders.PropertyBuilder;
import microsoft.entityframeworkcore.storage.valueconversion.ValueConverter;
import microsoft.entityframeworkcore.changetracking.ValueComparer;
import microsoft.entityframeworkcore.PropertyAccessMode;


/**
 * The base .NET class managing Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder, Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder</a>
 */
public class PropertyBuilder extends NetObject  {
    /**
     * Fully assembly qualified name: Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60
     */
    public static final String assemblyFullName = "Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60";
    /**
     * Assembly name: Microsoft.EntityFrameworkCore
     */
    public static final String assemblyShortName = "Microsoft.EntityFrameworkCore";
    /**
     * Qualified class name: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
     */
    public static final String className = "Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public PropertyBuilder(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link PropertyBuilder}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link PropertyBuilder} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static PropertyBuilder cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new PropertyBuilder(from.getJCOInstance());
    }

    // Constructors section
    
    public PropertyBuilder() throws Throwable {
    }

    public PropertyBuilder(IMutableProperty property) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(property == null ? null : property.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    
    // Methods section
    
    public PropertyBuilder HasAnnotation(java.lang.String annotation, NetObject value) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasAnnotation = (JCObject)classInstance.Invoke("HasAnnotation", annotation, value == null ? null : value.getJCOInstance());
            return new PropertyBuilder(objHasAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyBuilder HasConversion(ValueConverter converter, ValueComparer valueComparer) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.PlatformNotSupportedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasConversion = (JCObject)classInstance.Invoke("HasConversion", converter == null ? null : converter.getJCOInstance(), valueComparer == null ? null : valueComparer.getJCOInstance());
            return new PropertyBuilder(objHasConversion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyBuilder HasConversion(ValueConverter converter) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.PlatformNotSupportedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasConversion = (JCObject)classInstance.Invoke("HasConversion", converter == null ? null : converter.getJCOInstance());
            return new PropertyBuilder(objHasConversion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyBuilder HasConversion(NetType conversionType, ValueComparer valueComparer) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException, system.MethodAccessException, system.MissingMethodException, system.MemberAccessException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasConversion = (JCObject)classInstance.Invoke("HasConversion", conversionType == null ? null : conversionType.getJCOInstance(), valueComparer == null ? null : valueComparer.getJCOInstance());
            return new PropertyBuilder(objHasConversion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyBuilder HasConversion(NetType conversionType, NetType comparerType) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException, system.MethodAccessException, system.MissingMethodException, system.MemberAccessException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasConversion = (JCObject)classInstance.Invoke("HasConversion", conversionType == null ? null : conversionType.getJCOInstance(), comparerType == null ? null : comparerType.getJCOInstance());
            return new PropertyBuilder(objHasConversion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyBuilder HasConversion(NetType conversionType) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.MethodAccessException, system.MissingMethodException, system.MemberAccessException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasConversion = (JCObject)classInstance.Invoke("HasConversion", conversionType == null ? null : conversionType.getJCOInstance());
            return new PropertyBuilder(objHasConversion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyBuilder HasField(java.lang.String fieldName) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasField = (JCObject)classInstance.Invoke("HasField", fieldName);
            return new PropertyBuilder(objHasField);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyBuilder HasMaxLength(int maxLength) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasMaxLength = (JCObject)classInstance.Invoke("HasMaxLength", maxLength);
            return new PropertyBuilder(objHasMaxLength);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyBuilder HasPrecision(int precision, int scale) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasPrecision = (JCObject)classInstance.Invoke("HasPrecision", precision, scale);
            return new PropertyBuilder(objHasPrecision);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyBuilder HasPrecision(int precision) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasPrecision = (JCObject)classInstance.Invoke("HasPrecision", precision);
            return new PropertyBuilder(objHasPrecision);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyBuilder HasValueGenerator(NetType valueGeneratorType) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.MethodAccessException, system.MissingMethodException, system.MemberAccessException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasValueGenerator = (JCObject)classInstance.Invoke("HasValueGenerator", valueGeneratorType == null ? null : valueGeneratorType.getJCOInstance());
            return new PropertyBuilder(objHasValueGenerator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyBuilder HasValueGeneratorFactory(NetType valueGeneratorFactoryType) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.PlatformNotSupportedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasValueGeneratorFactory = (JCObject)classInstance.Invoke("HasValueGeneratorFactory", valueGeneratorFactoryType == null ? null : valueGeneratorFactoryType.getJCOInstance());
            return new PropertyBuilder(objHasValueGeneratorFactory);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyBuilder IsConcurrencyToken(boolean concurrencyToken) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objIsConcurrencyToken = (JCObject)classInstance.Invoke("IsConcurrencyToken", concurrencyToken);
            return new PropertyBuilder(objIsConcurrencyToken);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyBuilder IsRequired(boolean required) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.ArrayTypeMismatchException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objIsRequired = (JCObject)classInstance.Invoke("IsRequired", required);
            return new PropertyBuilder(objIsRequired);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyBuilder IsRowVersion() throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objIsRowVersion = (JCObject)classInstance.Invoke("IsRowVersion");
            return new PropertyBuilder(objIsRowVersion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyBuilder IsUnicode(boolean unicode) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objIsUnicode = (JCObject)classInstance.Invoke("IsUnicode", unicode);
            return new PropertyBuilder(objIsUnicode);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyBuilder UsePropertyAccessMode(PropertyAccessMode propertyAccessMode) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objUsePropertyAccessMode = (JCObject)classInstance.Invoke("UsePropertyAccessMode", propertyAccessMode == null ? null : propertyAccessMode.getJCOInstance());
            return new PropertyBuilder(objUsePropertyAccessMode);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyBuilder ValueGeneratedNever() throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objValueGeneratedNever = (JCObject)classInstance.Invoke("ValueGeneratedNever");
            return new PropertyBuilder(objValueGeneratedNever);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyBuilder ValueGeneratedOnAdd() throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objValueGeneratedOnAdd = (JCObject)classInstance.Invoke("ValueGeneratedOnAdd");
            return new PropertyBuilder(objValueGeneratedOnAdd);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyBuilder ValueGeneratedOnAddOrUpdate() throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objValueGeneratedOnAddOrUpdate = (JCObject)classInstance.Invoke("ValueGeneratedOnAddOrUpdate");
            return new PropertyBuilder(objValueGeneratedOnAddOrUpdate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyBuilder ValueGeneratedOnUpdate() throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objValueGeneratedOnUpdate = (JCObject)classInstance.Invoke("ValueGeneratedOnUpdate");
            return new PropertyBuilder(objValueGeneratedOnUpdate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyBuilder ValueGeneratedOnUpdateSometimes() throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objValueGeneratedOnUpdateSometimes = (JCObject)classInstance.Invoke("ValueGeneratedOnUpdateSometimes");
            return new PropertyBuilder(objValueGeneratedOnUpdateSometimes);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public IMutableProperty getMetadata() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Metadata");
            return new IMutablePropertyImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}