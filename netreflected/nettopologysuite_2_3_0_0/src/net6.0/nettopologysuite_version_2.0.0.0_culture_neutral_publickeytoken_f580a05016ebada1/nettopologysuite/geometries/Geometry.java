/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package nettopologysuite.geometries;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import nettopologysuite.geometries.Geometry;
import nettopologysuite.geometries.Ordinate;
import nettopologysuite.operation.buffer.EndCapStyle;
import nettopologysuite.operation.buffer.BufferParameters;
import nettopologysuite.geometries.IntersectionMatrix;
import system.xml.XmlReader;
import nettopologysuite.geometries.ICoordinateFilter;
import nettopologysuite.geometries.ICoordinateFilterImplementation;
import nettopologysuite.geometries.ICoordinateSequenceFilter;
import nettopologysuite.geometries.ICoordinateSequenceFilterImplementation;
import nettopologysuite.geometries.IEntireCoordinateSequenceFilter;
import nettopologysuite.geometries.IEntireCoordinateSequenceFilterImplementation;
import nettopologysuite.geometries.IGeometryComponentFilter;
import nettopologysuite.geometries.IGeometryComponentFilterImplementation;
import nettopologysuite.geometries.IGeometryFilter;
import nettopologysuite.geometries.IGeometryFilterImplementation;
import nettopologysuite.geometries.Coordinate;
import nettopologysuite.geometries.Dimension;
import nettopologysuite.geometries.Envelope;
import nettopologysuite.geometries.GeometryFactory;
import nettopologysuite.geometries.OgcGeometryType;
import nettopologysuite.geometries.Point;
import nettopologysuite.geometries.PrecisionModel;


/**
 * The base .NET class managing NetTopologySuite.Geometries.Geometry, NetTopologySuite, Version=2.0.0.0, Culture=neutral, PublicKeyToken=f580a05016ebada1.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/NetTopologySuite.Geometries.Geometry" target="_top">https://docs.microsoft.com/en-us/dotnet/api/NetTopologySuite.Geometries.Geometry</a>
 */
public class Geometry extends NetObject  {
    /**
     * Fully assembly qualified name: NetTopologySuite, Version=2.0.0.0, Culture=neutral, PublicKeyToken=f580a05016ebada1
     */
    public static final String assemblyFullName = "NetTopologySuite, Version=2.0.0.0, Culture=neutral, PublicKeyToken=f580a05016ebada1";
    /**
     * Assembly name: NetTopologySuite
     */
    public static final String assemblyShortName = "NetTopologySuite";
    /**
     * Qualified class name: NetTopologySuite.Geometries.Geometry
     */
    public static final String className = "NetTopologySuite.Geometries.Geometry";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public Geometry(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link Geometry}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link Geometry} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static Geometry cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new Geometry(from.getJCOInstance());
    }

    // Constructors section
    
    public Geometry() throws Throwable {
    }

    
    // Methods section
    
    public boolean Contains(Geometry g) throws Throwable, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, nettopologysuite.utilities.AssertionFailedException, system.NotSupportedException, system.IndexOutOfRangeException, nettopologysuite.geometries.TopologyException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Contains", g == null ? null : g.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CoveredBy(Geometry g) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, nettopologysuite.geometries.TopologyException, nettopologysuite.utilities.AssertionFailedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CoveredBy", g == null ? null : g.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Covers(Geometry g) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, nettopologysuite.utilities.AssertionFailedException, system.NotSupportedException, system.ArgumentNullException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, nettopologysuite.geometries.TopologyException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Covers", g == null ? null : g.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Crosses(Geometry g) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, nettopologysuite.utilities.AssertionFailedException, system.NotSupportedException, system.ArgumentNullException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, nettopologysuite.geometries.TopologyException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Crosses", g == null ? null : g.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Disjoint(Geometry g) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, nettopologysuite.geometries.TopologyException, nettopologysuite.utilities.AssertionFailedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Disjoint", g == null ? null : g.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Equals(Geometry g) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, nettopologysuite.geometries.TopologyException, nettopologysuite.utilities.AssertionFailedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Equals", g == null ? null : g.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean EqualsExact(Geometry other, double tolerance) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("EqualsExact", other == null ? null : other.getJCOInstance(), tolerance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean EqualsExact(Geometry other) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("EqualsExact", other == null ? null : other.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean EqualsNormalized(Geometry g) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("EqualsNormalized", g == null ? null : g.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean EqualsTopologically(Geometry g) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, nettopologysuite.utilities.AssertionFailedException, system.NotSupportedException, system.ArgumentNullException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, nettopologysuite.geometries.TopologyException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("EqualsTopologically", g == null ? null : g.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean HasNullElements(NetObject[] array) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("HasNullElements", (java.lang.Object)toObjectFromArray(array));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Intersects(Geometry g) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.NotSupportedException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, nettopologysuite.geometries.TopologyException, nettopologysuite.utilities.AssertionFailedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Intersects", g == null ? null : g.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean IsWithinDistance(Geometry geom, double distance) throws Throwable, system.ApplicationException, system.ArgumentNullException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("IsWithinDistance", geom == null ? null : geom.getJCOInstance(), distance);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Overlaps(Geometry g) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, nettopologysuite.utilities.AssertionFailedException, system.NotSupportedException, system.ArgumentNullException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, nettopologysuite.geometries.TopologyException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Overlaps", g == null ? null : g.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Relate(Geometry g, java.lang.String intersectionPattern) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, nettopologysuite.utilities.AssertionFailedException, system.NotSupportedException, system.ArgumentNullException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, nettopologysuite.geometries.TopologyException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Relate", g == null ? null : g.getJCOInstance(), intersectionPattern);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Touches(Geometry g) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, nettopologysuite.utilities.AssertionFailedException, system.NotSupportedException, system.ArgumentNullException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, nettopologysuite.geometries.TopologyException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Touches", g == null ? null : g.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean Within(Geometry g) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, system.NotSupportedException, system.IndexOutOfRangeException, nettopologysuite.geometries.TopologyException, nettopologysuite.utilities.AssertionFailedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("Within", g == null ? null : g.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] AsBinary() throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, nettopologysuite.utilities.AssertionFailedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("AsBinary");
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexAsBinary = 0; indexAsBinary < resultingArrayList.size(); indexAsBinary++ ) {
				resultingArray[indexAsBinary] = (byte)resultingArrayList.get(indexAsBinary);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public byte[] ToBinary() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, nettopologysuite.utilities.AssertionFailedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("ToBinary");
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexToBinary = 0; indexToBinary < resultingArrayList.size(); indexToBinary++ ) {
				resultingArray[indexToBinary] = (byte)resultingArrayList.get(indexToBinary);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double Distance(Geometry g) throws Throwable, system.ApplicationException, system.ArgumentNullException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (double)classInstance.Invoke("Distance", g == null ? null : g.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double[] GetOrdinates(Ordinate ordinate) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classInstance.Invoke("GetOrdinates", ordinate == null ? null : ordinate.getJCOInstance());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            double[] resultingArray = new double[resultingArrayList.size()];
            for(int indexGetOrdinates = 0; indexGetOrdinates < resultingArrayList.size(); indexGetOrdinates++ ) {
				resultingArray[indexGetOrdinates] = (double)resultingArrayList.get(indexGetOrdinates);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int CompareTo(Geometry geom) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Invoke("CompareTo", geom == null ? null : geom.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int CompareTo(NetObject o) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Invoke("CompareTo", o == null ? null : o.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Geometry Buffer(double distance, int quadrantSegments, EndCapStyle endCapStyle) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OverflowException, nettopologysuite.utilities.AssertionFailedException, nettopologysuite.geometries.TopologyException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBuffer = (JCObject)classInstance.Invoke("Buffer", distance, quadrantSegments, endCapStyle == null ? null : endCapStyle.getJCOInstance());
            return new Geometry(objBuffer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Geometry Buffer(double distance, int quadrantSegments) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.OverflowException, nettopologysuite.utilities.AssertionFailedException, system.ArgumentOutOfRangeException, nettopologysuite.geometries.TopologyException, system.IndexOutOfRangeException, system.RankException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBuffer = (JCObject)classInstance.Invoke("Buffer", distance, quadrantSegments);
            return new Geometry(objBuffer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Geometry Buffer(double distance, BufferParameters bufferParameters) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, nettopologysuite.utilities.AssertionFailedException, system.ArgumentOutOfRangeException, nettopologysuite.geometries.TopologyException, system.IndexOutOfRangeException, system.RankException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBuffer = (JCObject)classInstance.Invoke("Buffer", distance, bufferParameters == null ? null : bufferParameters.getJCOInstance());
            return new Geometry(objBuffer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Geometry Buffer(double distance, EndCapStyle endCapStyle) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, nettopologysuite.utilities.AssertionFailedException, system.ArgumentOutOfRangeException, nettopologysuite.geometries.TopologyException, system.IndexOutOfRangeException, system.RankException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBuffer = (JCObject)classInstance.Invoke("Buffer", distance, endCapStyle == null ? null : endCapStyle.getJCOInstance());
            return new Geometry(objBuffer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Geometry Buffer(double distance) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, nettopologysuite.utilities.AssertionFailedException, system.ArgumentOutOfRangeException, nettopologysuite.geometries.TopologyException, system.IndexOutOfRangeException, system.RankException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBuffer = (JCObject)classInstance.Invoke("Buffer", distance);
            return new Geometry(objBuffer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Geometry ConvexHull() throws Throwable, system.ArgumentNullException, system.IndexOutOfRangeException, system.RankException, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException, system.PlatformNotSupportedException, nettopologysuite.utilities.AssertionFailedException, system.InvalidOperationException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objConvexHull = (JCObject)classInstance.Invoke("ConvexHull");
            return new Geometry(objConvexHull);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Geometry Copy() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCopy = (JCObject)classInstance.Invoke("Copy");
            return new Geometry(objCopy);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Geometry Difference(Geometry other) throws Throwable, system.ArgumentException, nettopologysuite.utilities.AssertionFailedException, system.IndexOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objDifference = (JCObject)classInstance.Invoke("Difference", other == null ? null : other.getJCOInstance());
            return new Geometry(objDifference);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Geometry GetGeometryN(int n) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetGeometryN = (JCObject)classInstance.Invoke("GetGeometryN", n);
            return new Geometry(objGetGeometryN);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Geometry Intersection(Geometry other) throws Throwable, system.ArgumentException, nettopologysuite.utilities.AssertionFailedException, system.IndexOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.FormatException, system.RankException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objIntersection = (JCObject)classInstance.Invoke("Intersection", other == null ? null : other.getJCOInstance());
            return new Geometry(objIntersection);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Geometry Normalized() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objNormalized = (JCObject)classInstance.Invoke("Normalized");
            return new Geometry(objNormalized);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Geometry Reverse() throws Throwable, system.NotSupportedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objReverse = (JCObject)classInstance.Invoke("Reverse");
            return new Geometry(objReverse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Geometry SymmetricDifference(Geometry other) throws Throwable, system.ArgumentException, nettopologysuite.utilities.AssertionFailedException, system.IndexOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSymmetricDifference = (JCObject)classInstance.Invoke("SymmetricDifference", other == null ? null : other.getJCOInstance());
            return new Geometry(objSymmetricDifference);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Geometry Union() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objUnion = (JCObject)classInstance.Invoke("Union");
            return new Geometry(objUnion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Geometry Union(Geometry other) throws Throwable, system.ArgumentException, nettopologysuite.utilities.AssertionFailedException, system.IndexOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objUnion = (JCObject)classInstance.Invoke("Union", other == null ? null : other.getJCOInstance());
            return new Geometry(objUnion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IntersectionMatrix Relate(Geometry g) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, nettopologysuite.utilities.AssertionFailedException, system.NotSupportedException, system.ArgumentNullException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, nettopologysuite.geometries.TopologyException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRelate = (JCObject)classInstance.Invoke("Relate", g == null ? null : g.getJCOInstance());
            return new IntersectionMatrix(objRelate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String AsText() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.InvalidOperationException, system.FormatException, nettopologysuite.utilities.AssertionFailedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("AsText");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String ToText() throws Throwable, system.ArgumentException, system.ArgumentNullException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("ToText");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public XmlReader ToGMLFeature() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.xml.XmlException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objToGMLFeature = (JCObject)classInstance.Invoke("ToGMLFeature");
            return new XmlReader(objToGMLFeature);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Apply(ICoordinateFilter filter) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Apply", filter == null ? null : filter.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Apply(ICoordinateSequenceFilter filter) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Apply", filter == null ? null : filter.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Apply(IEntireCoordinateSequenceFilter filter) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Apply", filter == null ? null : filter.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Apply(IGeometryComponentFilter filter) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Apply", filter == null ? null : filter.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Apply(IGeometryFilter filter) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Apply", filter == null ? null : filter.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void GeometryChanged() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("GeometryChanged");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void GeometryChangedAction() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("GeometryChangedAction");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Normalize() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Normalize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public boolean getIsEmpty() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IsEmpty");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsRectangle() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IsRectangle");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsSimple() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, nettopologysuite.utilities.AssertionFailedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IsSimple");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsValid() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, nettopologysuite.utilities.AssertionFailedException, system.NotSupportedException, system.InvalidOperationException, nettopologysuite.geometries.TopologyException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IsValid");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getArea() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (double)classInstance.Get("Area");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double getLength() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (double)classInstance.Get("Length");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getNumGeometries() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("NumGeometries");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getNumPoints() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("NumPoints");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getSRID() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("SRID");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSRID(int SRID) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("SRID", SRID);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Coordinate getCoordinate() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Coordinate");
            return new Coordinate(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public final Coordinate[] getCoordinates() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            ArrayList<Coordinate> resultingArrayList = new ArrayList<Coordinate>();
            JCObject resultingObjects = (JCObject)classInstance.Get("Coordinates");
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new Coordinate(resultingObject));
            }
            Coordinate[] resultingArray = new Coordinate[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Dimension getBoundaryDimension() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("BoundaryDimension");
            return new Dimension(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Dimension getDimension() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Dimension");
            return new Dimension(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Envelope getEnvelopeInternal() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("EnvelopeInternal");
            return new Envelope(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Geometry getBoundary() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Boundary");
            return new Geometry(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Geometry getEnvelope() throws Throwable, nettopologysuite.utilities.AssertionFailedException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Envelope");
            return new Geometry(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public GeometryFactory getFactory() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Factory");
            return new GeometryFactory(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public OgcGeometryType getOgcGeometryType() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("OgcGeometryType");
            return new OgcGeometryType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Point getCentroid() throws Throwable, nettopologysuite.utilities.AssertionFailedException, system.ArgumentOutOfRangeException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Centroid");
            return new Point(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Point getInteriorPoint() throws Throwable, nettopologysuite.utilities.AssertionFailedException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("InteriorPoint");
            return new Point(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Point getPointOnSurface() throws Throwable, nettopologysuite.utilities.AssertionFailedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("PointOnSurface");
            return new Point(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PrecisionModel getPrecisionModel() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("PrecisionModel");
            return new PrecisionModel(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getUserData() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("UserData");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUserData(NetObject UserData) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("UserData", UserData == null ? null : UserData.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getGeometryType() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("GeometryType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}