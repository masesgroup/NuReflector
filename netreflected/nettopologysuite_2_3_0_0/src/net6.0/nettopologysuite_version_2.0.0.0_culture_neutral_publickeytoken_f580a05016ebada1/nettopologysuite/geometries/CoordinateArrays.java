/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package nettopologysuite.geometries;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import nettopologysuite.geometries.Coordinate;
import nettopologysuite.geometries.Envelope;


/**
 * The base .NET class managing NetTopologySuite.Geometries.CoordinateArrays, NetTopologySuite, Version=2.0.0.0, Culture=neutral, PublicKeyToken=f580a05016ebada1.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/NetTopologySuite.Geometries.CoordinateArrays" target="_top">https://docs.microsoft.com/en-us/dotnet/api/NetTopologySuite.Geometries.CoordinateArrays</a>
 */
public class CoordinateArrays extends NetObject  {
    /**
     * Fully assembly qualified name: NetTopologySuite, Version=2.0.0.0, Culture=neutral, PublicKeyToken=f580a05016ebada1
     */
    public static final String assemblyFullName = "NetTopologySuite, Version=2.0.0.0, Culture=neutral, PublicKeyToken=f580a05016ebada1";
    /**
     * Assembly name: NetTopologySuite
     */
    public static final String assemblyShortName = "NetTopologySuite";
    /**
     * Qualified class name: NetTopologySuite.Geometries.CoordinateArrays
     */
    public static final String className = "NetTopologySuite.Geometries.CoordinateArrays";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public CoordinateArrays(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link CoordinateArrays}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link CoordinateArrays} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static CoordinateArrays cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new CoordinateArrays(from.getJCOInstance());
    }

    // Constructors section
    
    public CoordinateArrays() throws Throwable {
    }

    
    // Methods section
    
    public static boolean Equals(Coordinate[] coord1, Coordinate[] coord2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("Equals", toObjectFromArray(coord1), toObjectFromArray(coord2));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean HasRepeatedPoints(Coordinate[] coord) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("HasRepeatedPoints", (java.lang.Object)toObjectFromArray(coord));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsRing(Coordinate[] pts) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsRing", (java.lang.Object)toObjectFromArray(pts));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int Compare(Coordinate[] pts1, Coordinate[] pts2) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("Compare", toObjectFromArray(pts1), toObjectFromArray(pts2));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int Dimension(Coordinate[] pts) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("Dimension", (java.lang.Object)toObjectFromArray(pts));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int IncreasingDirection(Coordinate[] pts) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("IncreasingDirection", (java.lang.Object)toObjectFromArray(pts));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int IndexOf(Coordinate coordinate, Coordinate[] coordinates) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("IndexOf", coordinate == null ? null : coordinate.getJCOInstance(), toObjectFromArray(coordinates));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int Measures(Coordinate[] pts) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("Measures", (java.lang.Object)toObjectFromArray(pts));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Coordinate MinCoordinate(Coordinate[] coordinates) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMinCoordinate = (JCObject)classType.Invoke("MinCoordinate", (java.lang.Object)toObjectFromArray(coordinates));
            return new Coordinate(objMinCoordinate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Coordinate PointNotInList(Coordinate[] testPts, Coordinate[] pts) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objPointNotInList = (JCObject)classType.Invoke("PointNotInList", toObjectFromArray(testPts), toObjectFromArray(pts));
            return new Coordinate(objPointNotInList);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Coordinate[] AtLeastNCoordinatesOrNothing(int n, Coordinate[] c) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<Coordinate> resultingArrayList = new ArrayList<Coordinate>();
            JCObject resultingObjects = (JCObject)classType.Invoke("AtLeastNCoordinatesOrNothing", n, toObjectFromArray(c));
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new Coordinate(resultingObject));
            }
            Coordinate[] resultingArray = new Coordinate[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Coordinate[] CopyDeep(Coordinate[] coordinates) throws Throwable, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<Coordinate> resultingArrayList = new ArrayList<Coordinate>();
            JCObject resultingObjects = (JCObject)classType.Invoke("CopyDeep", (java.lang.Object)toObjectFromArray(coordinates));
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new Coordinate(resultingObject));
            }
            Coordinate[] resultingArray = new Coordinate[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Coordinate[] EnforceConsistency(Coordinate[] array, int dimension, int measures) throws Throwable, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException, system.NotSupportedException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<Coordinate> resultingArrayList = new ArrayList<Coordinate>();
            JCObject resultingObjects = (JCObject)classType.Invoke("EnforceConsistency", toObjectFromArray(array), dimension, measures);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new Coordinate(resultingObject));
            }
            Coordinate[] resultingArray = new Coordinate[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Coordinate[] Extract(Coordinate[] pts, int start, int end) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<Coordinate> resultingArrayList = new ArrayList<Coordinate>();
            JCObject resultingObjects = (JCObject)classType.Invoke("Extract", toObjectFromArray(pts), start, end);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new Coordinate(resultingObject));
            }
            Coordinate[] resultingArray = new Coordinate[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Coordinate[] Intersection(Coordinate[] coordinates, Envelope env) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<Coordinate> resultingArrayList = new ArrayList<Coordinate>();
            JCObject resultingObjects = (JCObject)classType.Invoke("Intersection", toObjectFromArray(coordinates), env == null ? null : env.getJCOInstance());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new Coordinate(resultingObject));
            }
            Coordinate[] resultingArray = new Coordinate[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Coordinate[] RemoveNull(Coordinate[] coord) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<Coordinate> resultingArrayList = new ArrayList<Coordinate>();
            JCObject resultingObjects = (JCObject)classType.Invoke("RemoveNull", (java.lang.Object)toObjectFromArray(coord));
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new Coordinate(resultingObject));
            }
            Coordinate[] resultingArray = new Coordinate[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Coordinate[] RemoveRepeatedPoints(Coordinate[] coord) throws Throwable, system.ArgumentOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<Coordinate> resultingArrayList = new ArrayList<Coordinate>();
            JCObject resultingObjects = (JCObject)classType.Invoke("RemoveRepeatedPoints", (java.lang.Object)toObjectFromArray(coord));
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(new Coordinate(resultingObject));
            }
            Coordinate[] resultingArray = new Coordinate[resultingArrayList.size()];
            resultingArray = resultingArrayList.toArray(resultingArray);
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Envelope Envelope(Coordinate[] coordinates) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objEnvelope = (JCObject)classType.Invoke("Envelope", (java.lang.Object)toObjectFromArray(coordinates));
            return new Envelope(objEnvelope);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void CopyDeep(Coordinate[] src, int srcStart, Coordinate[] dest, int destStart, int length) throws Throwable, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("CopyDeep", toObjectFromArray(src), srcStart, toObjectFromArray(dest), destStart, length);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void EnforceConsistency(Coordinate[] array) throws Throwable, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.ArgumentException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("EnforceConsistency", (java.lang.Object)toObjectFromArray(array));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Reverse(Coordinate[] coord) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Reverse", (java.lang.Object)toObjectFromArray(coord));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Scroll(Coordinate[] coordinates, int indexOfFirstCoordinate, boolean ensureRing) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Scroll", toObjectFromArray(coordinates), indexOfFirstCoordinate, ensureRing);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Scroll(Coordinate[] coordinates, int indexOfFirstCoordinate) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Scroll", toObjectFromArray(coordinates), indexOfFirstCoordinate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Scroll(Coordinate[] coordinates, Coordinate firstCoordinate) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Scroll", toObjectFromArray(coordinates), firstCoordinate == null ? null : firstCoordinate.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}