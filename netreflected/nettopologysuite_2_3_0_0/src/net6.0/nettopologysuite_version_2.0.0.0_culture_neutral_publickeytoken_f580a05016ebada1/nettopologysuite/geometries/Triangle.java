/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package nettopologysuite.geometries;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import nettopologysuite.geometries.Coordinate;
import nettopologysuite.algorithm.HCoordinate;


/**
 * The base .NET class managing NetTopologySuite.Geometries.Triangle, NetTopologySuite, Version=2.0.0.0, Culture=neutral, PublicKeyToken=f580a05016ebada1.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/NetTopologySuite.Geometries.Triangle" target="_top">https://docs.microsoft.com/en-us/dotnet/api/NetTopologySuite.Geometries.Triangle</a>
 */
public class Triangle extends NetObject  {
    /**
     * Fully assembly qualified name: NetTopologySuite, Version=2.0.0.0, Culture=neutral, PublicKeyToken=f580a05016ebada1
     */
    public static final String assemblyFullName = "NetTopologySuite, Version=2.0.0.0, Culture=neutral, PublicKeyToken=f580a05016ebada1";
    /**
     * Assembly name: NetTopologySuite
     */
    public static final String assemblyShortName = "NetTopologySuite";
    /**
     * Qualified class name: NetTopologySuite.Geometries.Triangle
     */
    public static final String className = "NetTopologySuite.Geometries.Triangle";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public Triangle(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link Triangle}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link Triangle} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static Triangle cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new Triangle(from.getJCOInstance());
    }

    // Constructors section
    
    public Triangle() throws Throwable {
    }

    public Triangle(Coordinate p0, Coordinate p1, Coordinate p2) throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(p0 == null ? null : p0.getJCOInstance(), p1 == null ? null : p1.getJCOInstance(), p2 == null ? null : p2.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    
    // Methods section
    
    public boolean IsAcute() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("IsAcute");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsAcute(Coordinate a, Coordinate b, Coordinate c) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsAcute", a == null ? null : a.getJCOInstance(), b == null ? null : b.getJCOInstance(), c == null ? null : c.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double Area() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (double)classInstance.Invoke("Area");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static double Area(Coordinate a, Coordinate b, Coordinate c) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (double)classType.Invoke("Area", a == null ? null : a.getJCOInstance(), b == null ? null : b.getJCOInstance(), c == null ? null : c.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double Area3D() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (double)classInstance.Invoke("Area3D");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static double Area3D(Coordinate a, Coordinate b, Coordinate c) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (double)classType.Invoke("Area3D", a == null ? null : a.getJCOInstance(), b == null ? null : b.getJCOInstance(), c == null ? null : c.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static double InterpolateZ(Coordinate p, Coordinate v0, Coordinate v1, Coordinate v2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (double)classType.Invoke("InterpolateZ", p == null ? null : p.getJCOInstance(), v0 == null ? null : v0.getJCOInstance(), v1 == null ? null : v1.getJCOInstance(), v2 == null ? null : v2.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double InterpolateZ(Coordinate p) throws Throwable, system.ArgumentNullException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (double)classInstance.Invoke("InterpolateZ", p == null ? null : p.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double LongestSideLength() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (double)classInstance.Invoke("LongestSideLength");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static double LongestSideLength(Coordinate a, Coordinate b, Coordinate c) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (double)classType.Invoke("LongestSideLength", a == null ? null : a.getJCOInstance(), b == null ? null : b.getJCOInstance(), c == null ? null : c.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public double SignedArea() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (double)classInstance.Invoke("SignedArea");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static double SignedArea(Coordinate a, Coordinate b, Coordinate c) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (double)classType.Invoke("SignedArea", a == null ? null : a.getJCOInstance(), b == null ? null : b.getJCOInstance(), c == null ? null : c.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static HCoordinate PerpendicularBisector(Coordinate a, Coordinate b) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objPerpendicularBisector = (JCObject)classType.Invoke("PerpendicularBisector", a == null ? null : a.getJCOInstance(), b == null ? null : b.getJCOInstance());
            return new HCoordinate(objPerpendicularBisector);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Coordinate AngleBisector(Coordinate a, Coordinate b, Coordinate c) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objAngleBisector = (JCObject)classType.Invoke("AngleBisector", a == null ? null : a.getJCOInstance(), b == null ? null : b.getJCOInstance(), c == null ? null : c.getJCOInstance());
            return new Coordinate(objAngleBisector);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Coordinate Centroid() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCentroid = (JCObject)classInstance.Invoke("Centroid");
            return new Coordinate(objCentroid);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Coordinate Centroid(Coordinate a, Coordinate b, Coordinate c) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCentroid = (JCObject)classType.Invoke("Centroid", a == null ? null : a.getJCOInstance(), b == null ? null : b.getJCOInstance(), c == null ? null : c.getJCOInstance());
            return new Coordinate(objCentroid);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Coordinate Circumcentre() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCircumcentre = (JCObject)classInstance.Invoke("Circumcentre");
            return new Coordinate(objCircumcentre);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Coordinate Circumcentre(Coordinate a, Coordinate b, Coordinate c) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCircumcentre = (JCObject)classType.Invoke("Circumcentre", a == null ? null : a.getJCOInstance(), b == null ? null : b.getJCOInstance(), c == null ? null : c.getJCOInstance());
            return new Coordinate(objCircumcentre);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Coordinate CircumcentreDD(Coordinate a, Coordinate b, Coordinate c) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCircumcentreDD = (JCObject)classType.Invoke("CircumcentreDD", a == null ? null : a.getJCOInstance(), b == null ? null : b.getJCOInstance(), c == null ? null : c.getJCOInstance());
            return new Coordinate(objCircumcentreDD);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Coordinate InCentre() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objInCentre = (JCObject)classInstance.Invoke("InCentre");
            return new Coordinate(objInCentre);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Coordinate InCentre(Coordinate a, Coordinate b, Coordinate c) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objInCentre = (JCObject)classType.Invoke("InCentre", a == null ? null : a.getJCOInstance(), b == null ? null : b.getJCOInstance(), c == null ? null : c.getJCOInstance());
            return new Coordinate(objInCentre);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public Coordinate getP0() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("P0");
            return new Coordinate(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setP0(Coordinate P0) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("P0", P0 == null ? null : P0.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Coordinate getP1() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("P1");
            return new Coordinate(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setP1(Coordinate P1) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("P1", P1 == null ? null : P1.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Coordinate getP2() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("P2");
            return new Coordinate(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setP2(Coordinate P2) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("P2", P2 == null ? null : P2.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}