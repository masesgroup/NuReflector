/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.entityframeworkcore;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import microsoft.entityframeworkcore.metadata.builders.IConventionPropertyBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionPropertyBuilderImplementation;
import microsoft.entityframeworkcore.metadata.StoreObjectIdentifier;
import microsoft.entityframeworkcore.metadata.builders.PropertyBuilder;


/**
 * The base .NET class managing Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions, Microsoft.EntityFrameworkCore.Relational, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions</a>
 */
public class RelationalPropertyBuilderExtensions extends NetObject  {
    /**
     * Fully assembly qualified name: Microsoft.EntityFrameworkCore.Relational, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60
     */
    public static final String assemblyFullName = "Microsoft.EntityFrameworkCore.Relational, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60";
    /**
     * Assembly name: Microsoft.EntityFrameworkCore.Relational
     */
    public static final String assemblyShortName = "Microsoft.EntityFrameworkCore.Relational";
    /**
     * Qualified class name: Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions
     */
    public static final String className = "Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public RelationalPropertyBuilderExtensions(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link RelationalPropertyBuilderExtensions}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link RelationalPropertyBuilderExtensions} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static RelationalPropertyBuilderExtensions cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new RelationalPropertyBuilderExtensions(from.getJCOInstance());
    }

    // Constructors section
    
    public RelationalPropertyBuilderExtensions() throws Throwable {
    }

    
    // Methods section
    
    public static boolean CanSetCollation(IConventionPropertyBuilder propertyBuilder, java.lang.String collation, boolean fromDataAnnotation) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("CanSetCollation", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), collation, fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean CanSetColumnName(IConventionPropertyBuilder propertyBuilder, java.lang.String name, boolean fromDataAnnotation) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("CanSetColumnName", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), name, fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean CanSetColumnName(IConventionPropertyBuilder propertyBuilder, java.lang.String name, JCORefOut<StoreObjectIdentifier> storeObject, boolean fromDataAnnotation) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("CanSetColumnName", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), name, storeObject.getJCRefOut(), fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean CanSetColumnType(IConventionPropertyBuilder propertyBuilder, java.lang.String typeName, boolean fromDataAnnotation) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("CanSetColumnType", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), typeName, fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean CanSetComment(IConventionPropertyBuilder propertyBuilder, java.lang.String comment, boolean fromDataAnnotation) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("CanSetComment", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), comment, fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean CanSetComputedColumnSql(IConventionPropertyBuilder propertyBuilder, java.lang.String sql, boolean fromDataAnnotation) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("CanSetComputedColumnSql", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), sql, fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean CanSetDefaultValue(IConventionPropertyBuilder propertyBuilder, NetObject value, boolean fromDataAnnotation) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("CanSetDefaultValue", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), value == null ? null : value.getJCOInstance(), fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean CanSetDefaultValueSql(IConventionPropertyBuilder propertyBuilder, java.lang.String sql, boolean fromDataAnnotation) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("CanSetDefaultValueSql", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), sql, fromDataAnnotation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IConventionPropertyBuilder HasColumnName(IConventionPropertyBuilder propertyBuilder, java.lang.String name, boolean fromDataAnnotation) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objHasColumnName = (JCObject)classType.Invoke("HasColumnName", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), name, fromDataAnnotation);
            return new IConventionPropertyBuilderImplementation(objHasColumnName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IConventionPropertyBuilder HasColumnName(IConventionPropertyBuilder propertyBuilder, java.lang.String name, JCORefOut<StoreObjectIdentifier> storeObject, boolean fromDataAnnotation) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objHasColumnName = (JCObject)classType.Invoke("HasColumnName", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), name, storeObject.getJCRefOut(), fromDataAnnotation);
            return new IConventionPropertyBuilderImplementation(objHasColumnName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IConventionPropertyBuilder HasColumnType(IConventionPropertyBuilder propertyBuilder, java.lang.String typeName, boolean fromDataAnnotation) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objHasColumnType = (JCObject)classType.Invoke("HasColumnType", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), typeName, fromDataAnnotation);
            return new IConventionPropertyBuilderImplementation(objHasColumnType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IConventionPropertyBuilder HasComment(IConventionPropertyBuilder propertyBuilder, java.lang.String comment, boolean fromDataAnnotation) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objHasComment = (JCObject)classType.Invoke("HasComment", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), comment, fromDataAnnotation);
            return new IConventionPropertyBuilderImplementation(objHasComment);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IConventionPropertyBuilder HasComputedColumnSql(IConventionPropertyBuilder propertyBuilder, java.lang.String sql, boolean fromDataAnnotation) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objHasComputedColumnSql = (JCObject)classType.Invoke("HasComputedColumnSql", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), sql, fromDataAnnotation);
            return new IConventionPropertyBuilderImplementation(objHasComputedColumnSql);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IConventionPropertyBuilder HasDefaultValue(IConventionPropertyBuilder propertyBuilder, NetObject value, boolean fromDataAnnotation) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException, system.InvalidCastException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.OutOfMemoryException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objHasDefaultValue = (JCObject)classType.Invoke("HasDefaultValue", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), value == null ? null : value.getJCOInstance(), fromDataAnnotation);
            return new IConventionPropertyBuilderImplementation(objHasDefaultValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IConventionPropertyBuilder HasDefaultValueSql(IConventionPropertyBuilder propertyBuilder, java.lang.String sql, boolean fromDataAnnotation) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objHasDefaultValueSql = (JCObject)classType.Invoke("HasDefaultValueSql", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), sql, fromDataAnnotation);
            return new IConventionPropertyBuilderImplementation(objHasDefaultValueSql);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IConventionPropertyBuilder UseCollation(IConventionPropertyBuilder propertyBuilder, java.lang.String collation, boolean fromDataAnnotation) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objUseCollation = (JCObject)classType.Invoke("UseCollation", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), collation, fromDataAnnotation);
            return new IConventionPropertyBuilderImplementation(objUseCollation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PropertyBuilder HasColumnName(PropertyBuilder propertyBuilder, java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objHasColumnName = (JCObject)classType.Invoke("HasColumnName", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), name);
            return new PropertyBuilder(objHasColumnName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PropertyBuilder HasColumnType(PropertyBuilder propertyBuilder, java.lang.String typeName) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objHasColumnType = (JCObject)classType.Invoke("HasColumnType", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), typeName);
            return new PropertyBuilder(objHasColumnType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PropertyBuilder HasComment(PropertyBuilder propertyBuilder, java.lang.String comment) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objHasComment = (JCObject)classType.Invoke("HasComment", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), comment);
            return new PropertyBuilder(objHasComment);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PropertyBuilder HasComputedColumnSql(PropertyBuilder propertyBuilder, java.lang.String sql) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objHasComputedColumnSql = (JCObject)classType.Invoke("HasComputedColumnSql", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), sql);
            return new PropertyBuilder(objHasComputedColumnSql);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PropertyBuilder HasComputedColumnSql(PropertyBuilder propertyBuilder) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objHasComputedColumnSql = (JCObject)classType.Invoke("HasComputedColumnSql", propertyBuilder == null ? null : propertyBuilder.getJCOInstance());
            return new PropertyBuilder(objHasComputedColumnSql);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PropertyBuilder HasDefaultValue(PropertyBuilder propertyBuilder, NetObject value) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.InvalidCastException, system.globalization.CultureNotFoundException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objHasDefaultValue = (JCObject)classType.Invoke("HasDefaultValue", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), value == null ? null : value.getJCOInstance());
            return new PropertyBuilder(objHasDefaultValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PropertyBuilder HasDefaultValue(PropertyBuilder propertyBuilder) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.InvalidCastException, system.globalization.CultureNotFoundException, system.FormatException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objHasDefaultValue = (JCObject)classType.Invoke("HasDefaultValue", propertyBuilder == null ? null : propertyBuilder.getJCOInstance());
            return new PropertyBuilder(objHasDefaultValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PropertyBuilder HasDefaultValueSql(PropertyBuilder propertyBuilder, java.lang.String sql) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objHasDefaultValueSql = (JCObject)classType.Invoke("HasDefaultValueSql", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), sql);
            return new PropertyBuilder(objHasDefaultValueSql);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PropertyBuilder HasDefaultValueSql(PropertyBuilder propertyBuilder) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objHasDefaultValueSql = (JCObject)classType.Invoke("HasDefaultValueSql", propertyBuilder == null ? null : propertyBuilder.getJCOInstance());
            return new PropertyBuilder(objHasDefaultValueSql);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PropertyBuilder IsFixedLength(PropertyBuilder propertyBuilder, boolean fixedLength) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objIsFixedLength = (JCObject)classType.Invoke("IsFixedLength", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), fixedLength);
            return new PropertyBuilder(objIsFixedLength);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PropertyBuilder UseCollation(PropertyBuilder propertyBuilder, java.lang.String collation) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objUseCollation = (JCObject)classType.Invoke("UseCollation", propertyBuilder == null ? null : propertyBuilder.getJCOInstance(), collation);
            return new PropertyBuilder(objUseCollation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}