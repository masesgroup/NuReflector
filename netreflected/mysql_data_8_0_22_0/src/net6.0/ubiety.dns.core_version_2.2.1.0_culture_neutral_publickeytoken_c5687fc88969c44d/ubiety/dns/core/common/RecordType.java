/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package ubiety.dns.core.common;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;

// Import section
// PACKAGE_IMPORT_SECTION

/**
 * The base .NET class managing Ubiety.Dns.Core.Common.RecordType, Ubiety.Dns.Core, Version=2.2.1.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Ubiety.Dns.Core.Common.RecordType" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Ubiety.Dns.Core.Common.RecordType</a>
 */
public class RecordType extends NetObject  {
    /**
     * Fully assembly qualified name: Ubiety.Dns.Core, Version=2.2.1.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d
     */
    public static final String assemblyFullName = "Ubiety.Dns.Core, Version=2.2.1.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d";
    /**
     * Assembly name: Ubiety.Dns.Core
     */
    public static final String assemblyShortName = "Ubiety.Dns.Core";
    /**
     * Qualified class name: Ubiety.Dns.Core.Common.RecordType
     */
    public static final String className = "Ubiety.Dns.Core.Common.RecordType";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumReflected = createEnum();
    JCEnum classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    static JCEnum createEnum() {
        try {
            String enumToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating Enum %s", enumToCreate);
            JCEnum enumCreated = bridge.GetEnum(enumToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created Enum: %s",
                        (enumCreated != null) ? enumCreated.toString() : "Returned null value");
            return enumCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public RecordType(java.lang.Object instance) {
        super(instance);
        if (instance instanceof JCObject) {
            try {
                String enumName = NetEnum.GetName(classType, (JCObject)instance);
                classInstance = enumReflected.fromValue(enumName);
            } catch (Throwable t) {
                JCOReflector.writeLog(t);
                classInstance = enumReflected;
            }
        } else if (instance instanceof JCEnum) {
            classInstance = (JCEnum)instance;
        }
    }

    public RecordType() {
        super();
        // add reference to assemblyName.dll file
        try {
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
        } catch (Throwable jcne) {
            JCOReflector.writeLog(jcne);
        }
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    final static RecordType getFrom(JCEnum object, String value) {
        try {
            return new RecordType(object.fromValue(value));
        } catch (JCException e) {
            return new RecordType(object);
        }
    }

    // Enum fields section
    
    public static RecordType A = getFrom(enumReflected, "A");
    public static RecordType NS = getFrom(enumReflected, "NS");
    public static RecordType MD = getFrom(enumReflected, "MD");
    public static RecordType MF = getFrom(enumReflected, "MF");
    public static RecordType CNAME = getFrom(enumReflected, "CNAME");
    public static RecordType SOA = getFrom(enumReflected, "SOA");
    public static RecordType MB = getFrom(enumReflected, "MB");
    public static RecordType MG = getFrom(enumReflected, "MG");
    public static RecordType MR = getFrom(enumReflected, "MR");
    public static RecordType NULL = getFrom(enumReflected, "NULL");
    public static RecordType WKS = getFrom(enumReflected, "WKS");
    public static RecordType PNTR = getFrom(enumReflected, "PNTR");
    public static RecordType HINFO = getFrom(enumReflected, "HINFO");
    public static RecordType MINFO = getFrom(enumReflected, "MINFO");
    public static RecordType MX = getFrom(enumReflected, "MX");
    public static RecordType TXT = getFrom(enumReflected, "TXT");
    public static RecordType RP = getFrom(enumReflected, "RP");
    public static RecordType AFSDB = getFrom(enumReflected, "AFSDB");
    public static RecordType X25 = getFrom(enumReflected, "X25");
    public static RecordType ISDN = getFrom(enumReflected, "ISDN");
    public static RecordType RT = getFrom(enumReflected, "RT");
    public static RecordType NSAP = getFrom(enumReflected, "NSAP");
    public static RecordType NSAPPTR = getFrom(enumReflected, "NSAPPTR");
    public static RecordType SIG = getFrom(enumReflected, "SIG");
    public static RecordType KEY = getFrom(enumReflected, "KEY");
    public static RecordType PX = getFrom(enumReflected, "PX");
    public static RecordType GPOS = getFrom(enumReflected, "GPOS");
    public static RecordType AAAA = getFrom(enumReflected, "AAAA");
    public static RecordType LOC = getFrom(enumReflected, "LOC");
    public static RecordType NXT = getFrom(enumReflected, "NXT");
    public static RecordType EID = getFrom(enumReflected, "EID");
    public static RecordType NIMLOC = getFrom(enumReflected, "NIMLOC");
    public static RecordType SRV = getFrom(enumReflected, "SRV");
    public static RecordType ATMA = getFrom(enumReflected, "ATMA");
    public static RecordType NAPTR = getFrom(enumReflected, "NAPTR");
    public static RecordType KX = getFrom(enumReflected, "KX");
    public static RecordType CERT = getFrom(enumReflected, "CERT");
    public static RecordType A6 = getFrom(enumReflected, "A6");
    public static RecordType DNAME = getFrom(enumReflected, "DNAME");
    public static RecordType SINK = getFrom(enumReflected, "SINK");
    public static RecordType OPT = getFrom(enumReflected, "OPT");
    public static RecordType APL = getFrom(enumReflected, "APL");
    public static RecordType DS = getFrom(enumReflected, "DS");
    public static RecordType SSHFP = getFrom(enumReflected, "SSHFP");
    public static RecordType IPSECKEY = getFrom(enumReflected, "IPSECKEY");
    public static RecordType RRSIG = getFrom(enumReflected, "RRSIG");
    public static RecordType NSEC = getFrom(enumReflected, "NSEC");
    public static RecordType DNSKEY = getFrom(enumReflected, "DNSKEY");
    public static RecordType DHCID = getFrom(enumReflected, "DHCID");
    public static RecordType NSEC3 = getFrom(enumReflected, "NSEC3");
    public static RecordType NSEC3PARAM = getFrom(enumReflected, "NSEC3PARAM");
    public static RecordType HIP = getFrom(enumReflected, "HIP");
    public static RecordType SPF = getFrom(enumReflected, "SPF");
    public static RecordType UINFO = getFrom(enumReflected, "UINFO");
    public static RecordType UID = getFrom(enumReflected, "UID");
    public static RecordType GID = getFrom(enumReflected, "GID");
    public static RecordType UNSPEC = getFrom(enumReflected, "UNSPEC");
    public static RecordType TKEY = getFrom(enumReflected, "TKEY");
    public static RecordType TSIG = getFrom(enumReflected, "TSIG");
    public static RecordType TA = getFrom(enumReflected, "TA");
    public static RecordType DLV = getFrom(enumReflected, "DLV");


    // Flags management section


}