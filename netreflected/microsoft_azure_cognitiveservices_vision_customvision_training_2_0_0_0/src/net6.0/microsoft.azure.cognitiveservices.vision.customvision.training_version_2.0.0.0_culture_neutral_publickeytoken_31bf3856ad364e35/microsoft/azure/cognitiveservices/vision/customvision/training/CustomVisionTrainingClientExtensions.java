/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.azure.cognitiveservices.vision.customvision.training;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import microsoft.azure.cognitiveservices.vision.customvision.training.models.Domain;
import microsoft.azure.cognitiveservices.vision.customvision.training.ICustomVisionTrainingClient;
import microsoft.azure.cognitiveservices.vision.customvision.training.ICustomVisionTrainingClientImplementation;
import system.Guid;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.Export;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageCreateSummary;
import system.io.Stream;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageFileCreateBatch;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageIdCreateBatch;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageUrlCreateBatch;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageMetadataUpdateSummary;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.ImagePrediction;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageUrl;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageRegionCreateSummary;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageRegionCreateBatch;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageRegionProposal;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageTagCreateSummary;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageTagCreateBatch;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.Iteration;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.IterationPerformance;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.PredictionQueryResult;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.PredictionQueryToken;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.Project;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.ProjectExport;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.SuggestedTagAndRegionQuery;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.SuggestedTagAndRegionQueryToken;
import microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag;
import microsoft.rest.HttpOperationResponse;
import system.threading.tasks.Task;
import system.threading.CancellationToken;


/**
 * The base .NET class managing Microsoft.Azure.CognitiveServices.Vision.CustomVision.Training.CustomVisionTrainingClientExtensions, Microsoft.Azure.CognitiveServices.Vision.CustomVision.Training, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.Azure.CognitiveServices.Vision.CustomVision.Training.CustomVisionTrainingClientExtensions" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Microsoft.Azure.CognitiveServices.Vision.CustomVision.Training.CustomVisionTrainingClientExtensions</a>
 */
public class CustomVisionTrainingClientExtensions extends NetObject  {
    /**
     * Fully assembly qualified name: Microsoft.Azure.CognitiveServices.Vision.CustomVision.Training, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
     */
    public static final String assemblyFullName = "Microsoft.Azure.CognitiveServices.Vision.CustomVision.Training, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
    /**
     * Assembly name: Microsoft.Azure.CognitiveServices.Vision.CustomVision.Training
     */
    public static final String assemblyShortName = "Microsoft.Azure.CognitiveServices.Vision.CustomVision.Training";
    /**
     * Qualified class name: Microsoft.Azure.CognitiveServices.Vision.CustomVision.Training.CustomVisionTrainingClientExtensions
     */
    public static final String className = "Microsoft.Azure.CognitiveServices.Vision.CustomVision.Training.CustomVisionTrainingClientExtensions";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public CustomVisionTrainingClientExtensions(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link CustomVisionTrainingClientExtensions}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link CustomVisionTrainingClientExtensions} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static CustomVisionTrainingClientExtensions cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new CustomVisionTrainingClientExtensions(from.getJCOInstance());
    }

    // Constructors section
    
    public CustomVisionTrainingClientExtensions() throws Throwable {
    }

    
    // Methods section
    
    public static Domain GetDomain(ICustomVisionTrainingClient operations, Guid domainId) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetDomain = (JCObject)classType.Invoke("GetDomain", operations == null ? null : operations.getJCOInstance(), domainId == null ? null : domainId.getJCOInstance());
            return new Domain(objGetDomain);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Export ExportIteration(ICustomVisionTrainingClient operations, Guid projectId, Guid iterationId, java.lang.String platform, java.lang.String flavor) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objExportIteration = (JCObject)classType.Invoke("ExportIteration", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), iterationId == null ? null : iterationId.getJCOInstance(), platform, flavor);
            return new Export(objExportIteration);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ImageCreateSummary CreateImagesFromFiles(ICustomVisionTrainingClient operations, Guid projectId, ImageFileCreateBatch batch) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCreateImagesFromFiles = (JCObject)classType.Invoke("CreateImagesFromFiles", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), batch == null ? null : batch.getJCOInstance());
            return new ImageCreateSummary(objCreateImagesFromFiles);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ImageCreateSummary CreateImagesFromPredictions(ICustomVisionTrainingClient operations, Guid projectId, ImageIdCreateBatch batch) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCreateImagesFromPredictions = (JCObject)classType.Invoke("CreateImagesFromPredictions", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), batch == null ? null : batch.getJCOInstance());
            return new ImageCreateSummary(objCreateImagesFromPredictions);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ImageCreateSummary CreateImagesFromUrls(ICustomVisionTrainingClient operations, Guid projectId, ImageUrlCreateBatch batch) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCreateImagesFromUrls = (JCObject)classType.Invoke("CreateImagesFromUrls", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), batch == null ? null : batch.getJCOInstance());
            return new ImageCreateSummary(objCreateImagesFromUrls);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ImageRegionCreateSummary CreateImageRegions(ICustomVisionTrainingClient operations, Guid projectId, ImageRegionCreateBatch batch) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCreateImageRegions = (JCObject)classType.Invoke("CreateImageRegions", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), batch == null ? null : batch.getJCOInstance());
            return new ImageRegionCreateSummary(objCreateImageRegions);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ImageRegionProposal GetImageRegionProposals(ICustomVisionTrainingClient operations, Guid projectId, Guid imageId) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetImageRegionProposals = (JCObject)classType.Invoke("GetImageRegionProposals", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), imageId == null ? null : imageId.getJCOInstance());
            return new ImageRegionProposal(objGetImageRegionProposals);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ImageTagCreateSummary CreateImageTags(ICustomVisionTrainingClient operations, Guid projectId, ImageTagCreateBatch batch) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCreateImageTags = (JCObject)classType.Invoke("CreateImageTags", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), batch == null ? null : batch.getJCOInstance());
            return new ImageTagCreateSummary(objCreateImageTags);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Iteration GetIteration(ICustomVisionTrainingClient operations, Guid projectId, Guid iterationId) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetIteration = (JCObject)classType.Invoke("GetIteration", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), iterationId == null ? null : iterationId.getJCOInstance());
            return new Iteration(objGetIteration);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Iteration UpdateIteration(ICustomVisionTrainingClient operations, Guid projectId, Guid iterationId, Iteration updatedIteration) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objUpdateIteration = (JCObject)classType.Invoke("UpdateIteration", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), iterationId == null ? null : iterationId.getJCOInstance(), updatedIteration == null ? null : updatedIteration.getJCOInstance());
            return new Iteration(objUpdateIteration);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static PredictionQueryResult QueryPredictions(ICustomVisionTrainingClient operations, Guid projectId, PredictionQueryToken query) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objQueryPredictions = (JCObject)classType.Invoke("QueryPredictions", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), query == null ? null : query.getJCOInstance());
            return new PredictionQueryResult(objQueryPredictions);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Project GetProject(ICustomVisionTrainingClient operations, Guid projectId) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetProject = (JCObject)classType.Invoke("GetProject", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance());
            return new Project(objGetProject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Project ImportProject(ICustomVisionTrainingClient operations, java.lang.String token, java.lang.String name) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objImportProject = (JCObject)classType.Invoke("ImportProject", operations == null ? null : operations.getJCOInstance(), token, name);
            return new Project(objImportProject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Project UpdateProject(ICustomVisionTrainingClient operations, Guid projectId, Project updatedProject) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objUpdateProject = (JCObject)classType.Invoke("UpdateProject", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), updatedProject == null ? null : updatedProject.getJCOInstance());
            return new Project(objUpdateProject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ProjectExport ExportProject(ICustomVisionTrainingClient operations, Guid projectId) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objExportProject = (JCObject)classType.Invoke("ExportProject", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance());
            return new ProjectExport(objExportProject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SuggestedTagAndRegionQuery QuerySuggestedImages(ICustomVisionTrainingClient operations, Guid projectId, Guid iterationId, SuggestedTagAndRegionQueryToken query) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objQuerySuggestedImages = (JCObject)classType.Invoke("QuerySuggestedImages", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), iterationId == null ? null : iterationId.getJCOInstance(), query == null ? null : query.getJCOInstance());
            return new SuggestedTagAndRegionQuery(objQuerySuggestedImages);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Tag CreateTag(ICustomVisionTrainingClient operations, Guid projectId, java.lang.String name, java.lang.String description, java.lang.String type) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCreateTag = (JCObject)classType.Invoke("CreateTag", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), name, description, type);
            return new Tag(objCreateTag);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Tag UpdateTag(ICustomVisionTrainingClient operations, Guid projectId, Guid tagId, Tag updatedTag) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objUpdateTag = (JCObject)classType.Invoke("UpdateTag", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), tagId == null ? null : tagId.getJCOInstance(), updatedTag == null ? null : updatedTag.getJCOInstance());
            return new Tag(objUpdateTag);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Stream GetArtifact(ICustomVisionTrainingClient operations, Guid projectId, java.lang.String path) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetArtifact = (JCObject)classType.Invoke("GetArtifact", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), path);
            return new Stream(objGetArtifact);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task DeleteIterationAsync(ICustomVisionTrainingClient operations, Guid projectId, Guid iterationId, CancellationToken cancellationToken) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objDeleteIterationAsync = (JCObject)classType.Invoke("DeleteIterationAsync", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), iterationId == null ? null : iterationId.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objDeleteIterationAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task DeleteProjectAsync(ICustomVisionTrainingClient operations, Guid projectId, CancellationToken cancellationToken) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objDeleteProjectAsync = (JCObject)classType.Invoke("DeleteProjectAsync", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objDeleteProjectAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task DeleteTagAsync(ICustomVisionTrainingClient operations, Guid projectId, Guid tagId, CancellationToken cancellationToken) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objDeleteTagAsync = (JCObject)classType.Invoke("DeleteTagAsync", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), tagId == null ? null : tagId.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objDeleteTagAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task UnpublishIterationAsync(ICustomVisionTrainingClient operations, Guid projectId, Guid iterationId, CancellationToken cancellationToken) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objUnpublishIterationAsync = (JCObject)classType.Invoke("UnpublishIterationAsync", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), iterationId == null ? null : iterationId.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objUnpublishIterationAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void DeleteIteration(ICustomVisionTrainingClient operations, Guid projectId, Guid iterationId) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("DeleteIteration", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), iterationId == null ? null : iterationId.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void DeleteProject(ICustomVisionTrainingClient operations, Guid projectId) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("DeleteProject", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void DeleteTag(ICustomVisionTrainingClient operations, Guid projectId, Guid tagId) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("DeleteTag", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), tagId == null ? null : tagId.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void UnpublishIteration(ICustomVisionTrainingClient operations, Guid projectId, Guid iterationId) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException, system.InvalidOperationException, system.threading.tasks.TaskSchedulerException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.threading.tasks.TaskCanceledException, system.AggregateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("UnpublishIteration", operations == null ? null : operations.getJCOInstance(), projectId == null ? null : projectId.getJCOInstance(), iterationId == null ? null : iterationId.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}