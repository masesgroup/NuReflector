/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package castle.components.dictionaryadapter;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;

// Import section
import castle.components.dictionaryadapter.IDictionaryEdit;
import castle.components.dictionaryadapter.IDictionaryEditImplementation;
import system.componentmodel.IEditableObject;
import system.componentmodel.IEditableObjectImplementation;
import system.componentmodel.IRevertibleChangeTracking;
import system.componentmodel.IRevertibleChangeTrackingImplementation;
import system.componentmodel.IChangeTracking;
import system.componentmodel.IChangeTrackingImplementation;
import castle.components.dictionaryadapter.IDictionaryNotify;
import castle.components.dictionaryadapter.IDictionaryNotifyImplementation;
import system.componentmodel.INotifyPropertyChanging;
import system.componentmodel.INotifyPropertyChangingImplementation;
import system.componentmodel.INotifyPropertyChanged;
import system.componentmodel.INotifyPropertyChangedImplementation;
import castle.components.dictionaryadapter.IDictionaryValidate;
import castle.components.dictionaryadapter.IDictionaryValidateImplementation;
import castle.components.dictionaryadapter.IDictionaryCreate;
import castle.components.dictionaryadapter.IDictionaryCreateImplementation;
import castle.components.dictionaryadapter.PropertyDescriptor;
import castle.components.dictionaryadapter.DictionaryValidateGroup;
import system.IDisposable;
import system.IDisposableImplementation;
import system.collections.IDictionary;
import system.collections.IDictionaryImplementation;
import castle.components.dictionaryadapter.IDictionaryValidator;
import castle.components.dictionaryadapter.IDictionaryValidatorImplementation;
import castle.components.dictionaryadapter.IDictionaryAdapter;
import castle.components.dictionaryadapter.IDictionaryAdapterImplementation;
import castle.components.dictionaryadapter.DictionaryAdapterInstance;
import castle.components.dictionaryadapter.DictionaryAdapterMeta;
import system.componentmodel.PropertyChangedEventHandler;
import system.componentmodel.PropertyChangingEventHandler;


/**
 * The base .NET class managing Castle.Components.DictionaryAdapter.IDictionaryAdapter, Castle.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=407dd0808d44fbdc.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Castle.Components.DictionaryAdapter.IDictionaryAdapter" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Castle.Components.DictionaryAdapter.IDictionaryAdapter</a>
 */
public interface IDictionaryAdapter extends IJCOBridgeReflected, IDictionaryEdit, IEditableObject, IRevertibleChangeTracking, IChangeTracking, IDictionaryNotify, INotifyPropertyChanging, INotifyPropertyChanged, IDictionaryValidate, IDictionaryCreate {
    /**
     * Fully assembly qualified name: Castle.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=407dd0808d44fbdc
     */
    public static final String assemblyFullName = "Castle.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=407dd0808d44fbdc";
    /**
     * Assembly name: Castle.Core
     */
    public static final String assemblyShortName = "Castle.Core";
    /**
     * Qualified class name: Castle.Components.DictionaryAdapter.IDictionaryAdapter
     */
    public static final String className = "Castle.Components.DictionaryAdapter.IDictionaryAdapter";
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link IDictionaryAdapter}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link IDictionaryAdapter} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static IDictionaryAdapter ToIDictionaryAdapter(IJCOBridgeReflected from) throws Throwable {
        JCOBridge bridge = JCOBridgeInstance.getInstance("Castle.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=407dd0808d44fbdc");
        JCType classType = bridge.GetType(className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        NetType.AssertCast(classType, from);
        return new IDictionaryAdapterImplementation(from.getJCOInstance());
    }

    /**
     * Returns the reflected Assembly name
     * 
     * @return A {@link String} representing the Fullname of reflected Assembly
     */
    public String getJCOAssemblyName();

    /**
     * Returns the reflected Class name
     * 
     * @return A {@link String} representing the Fullname of reflected Class
     */
    public String getJCOClassName();

    /**
     * Returns the reflected Class name used to build the object
     * 
     * @return A {@link String} representing the name used to allocated the object
     *         in CLR context
     */
    public String getJCOObjectName();

    /**
     * Returns the instantiated class
     * 
     * @return An {@link java.lang.Object} representing the instance of the instantiated Class
     */
    public java.lang.Object getJCOInstance();

    /**
     * Returns the instantiated class Type
     * 
     * @return A {@link JCType} representing the Type of the instantiated Class
     */
    public JCType getJCOType();

    // Methods section
    
    public boolean SetProperty(java.lang.String propertyName, JCORefOut<NetObject> value) throws Throwable;

    public boolean ShouldClearProperty(PropertyDescriptor property, NetObject value) throws Throwable;




    public NetObject Coerce(NetType type) throws Throwable;



    public NetObject GetProperty(java.lang.String propertyName, boolean ifExists) throws Throwable;

    public NetObject ReadProperty(java.lang.String key) throws Throwable;

    public java.lang.String GetKey(java.lang.String propertyName) throws Throwable;





    public void ClearProperty(PropertyDescriptor property, java.lang.String key) throws Throwable;

    public void CopyTo(IDictionaryAdapter other) throws Throwable;





    public void StoreProperty(PropertyDescriptor property, java.lang.String key, NetObject value) throws Throwable;




    
    // Properties section
    
    public DictionaryAdapterInstance getThis() throws Throwable;

    public DictionaryAdapterMeta getMeta() throws Throwable;



    // Instance Events section
    

}