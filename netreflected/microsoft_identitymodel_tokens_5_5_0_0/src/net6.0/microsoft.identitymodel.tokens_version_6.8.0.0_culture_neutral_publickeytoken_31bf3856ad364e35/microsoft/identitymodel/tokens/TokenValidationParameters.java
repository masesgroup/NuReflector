/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.identitymodel.tokens;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import microsoft.identitymodel.tokens.TokenValidationParameters;
import system.security.claims.ClaimsIdentity;
import microsoft.identitymodel.tokens.SecurityToken;
import microsoft.identitymodel.tokens.AlgorithmValidator;
import microsoft.identitymodel.tokens.CryptoProviderFactory;
import microsoft.identitymodel.tokens.IssuerSigningKeyValidator;
import microsoft.identitymodel.tokens.IssuerValidator;
import microsoft.identitymodel.tokens.ITokenReplayCache;
import microsoft.identitymodel.tokens.ITokenReplayCacheImplementation;
import microsoft.identitymodel.tokens.SecurityKey;
import microsoft.identitymodel.tokens.SignatureValidator;
import microsoft.identitymodel.tokens.TokenReader;
import microsoft.identitymodel.tokens.TypeValidator;
import system.TimeSpan;


/**
 * The base .NET class managing Microsoft.IdentityModel.Tokens.TokenValidationParameters, Microsoft.IdentityModel.Tokens, Version=6.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.IdentityModel.Tokens.TokenValidationParameters" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Microsoft.IdentityModel.Tokens.TokenValidationParameters</a>
 */
public class TokenValidationParameters extends NetObject  {
    /**
     * Fully assembly qualified name: Microsoft.IdentityModel.Tokens, Version=6.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
     */
    public static final String assemblyFullName = "Microsoft.IdentityModel.Tokens, Version=6.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35";
    /**
     * Assembly name: Microsoft.IdentityModel.Tokens
     */
    public static final String assemblyShortName = "Microsoft.IdentityModel.Tokens";
    /**
     * Qualified class name: Microsoft.IdentityModel.Tokens.TokenValidationParameters
     */
    public static final String className = "Microsoft.IdentityModel.Tokens.TokenValidationParameters";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public TokenValidationParameters(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link TokenValidationParameters}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link TokenValidationParameters} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static TokenValidationParameters cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new TokenValidationParameters(from.getJCOInstance());
    }

    // Constructors section
    
    public TokenValidationParameters() throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    public TokenValidationParameters Clone() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objClone = (JCObject)classInstance.Invoke("Clone");
            return new TokenValidationParameters(objClone);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ClaimsIdentity CreateClaimsIdentity(SecurityToken securityToken, java.lang.String issuer) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.globalization.CultureNotFoundException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.IndexOutOfRangeException, system.diagnostics.tracing.EventSourceException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateClaimsIdentity = (JCObject)classInstance.Invoke("CreateClaimsIdentity", securityToken == null ? null : securityToken.getJCOInstance(), issuer);
            return new ClaimsIdentity(objCreateClaimsIdentity);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public boolean getIgnoreTrailingSlashWhenValidatingAudience() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IgnoreTrailingSlashWhenValidatingAudience");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIgnoreTrailingSlashWhenValidatingAudience(boolean IgnoreTrailingSlashWhenValidatingAudience) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("IgnoreTrailingSlashWhenValidatingAudience", IgnoreTrailingSlashWhenValidatingAudience);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getRequireAudience() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("RequireAudience");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRequireAudience(boolean RequireAudience) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("RequireAudience", RequireAudience);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getRequireExpirationTime() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("RequireExpirationTime");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRequireExpirationTime(boolean RequireExpirationTime) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("RequireExpirationTime", RequireExpirationTime);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getRequireSignedTokens() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("RequireSignedTokens");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRequireSignedTokens(boolean RequireSignedTokens) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("RequireSignedTokens", RequireSignedTokens);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSaveSigninToken() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("SaveSigninToken");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSaveSigninToken(boolean SaveSigninToken) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("SaveSigninToken", SaveSigninToken);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getTryAllIssuerSigningKeys() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("TryAllIssuerSigningKeys");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTryAllIssuerSigningKeys(boolean TryAllIssuerSigningKeys) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TryAllIssuerSigningKeys", TryAllIssuerSigningKeys);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getValidateActor() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("ValidateActor");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setValidateActor(boolean ValidateActor) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ValidateActor", ValidateActor);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getValidateAudience() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("ValidateAudience");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setValidateAudience(boolean ValidateAudience) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ValidateAudience", ValidateAudience);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getValidateIssuer() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("ValidateIssuer");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setValidateIssuer(boolean ValidateIssuer) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ValidateIssuer", ValidateIssuer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getValidateIssuerSigningKey() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("ValidateIssuerSigningKey");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setValidateIssuerSigningKey(boolean ValidateIssuerSigningKey) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ValidateIssuerSigningKey", ValidateIssuerSigningKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getValidateLifetime() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("ValidateLifetime");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setValidateLifetime(boolean ValidateLifetime) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ValidateLifetime", ValidateLifetime);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getValidateTokenReplay() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("ValidateTokenReplay");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setValidateTokenReplay(boolean ValidateTokenReplay) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ValidateTokenReplay", ValidateTokenReplay);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AlgorithmValidator getAlgorithmValidator() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (AlgorithmValidator)classInstance.Get("AlgorithmValidator");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAlgorithmValidator(AlgorithmValidator AlgorithmValidator) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("AlgorithmValidator", AlgorithmValidator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CryptoProviderFactory getCryptoProviderFactory() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("CryptoProviderFactory");
            return new CryptoProviderFactory(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCryptoProviderFactory(CryptoProviderFactory CryptoProviderFactory) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("CryptoProviderFactory", CryptoProviderFactory == null ? null : CryptoProviderFactory.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IssuerSigningKeyValidator getIssuerSigningKeyValidator() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (IssuerSigningKeyValidator)classInstance.Get("IssuerSigningKeyValidator");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIssuerSigningKeyValidator(IssuerSigningKeyValidator IssuerSigningKeyValidator) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("IssuerSigningKeyValidator", IssuerSigningKeyValidator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IssuerValidator getIssuerValidator() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (IssuerValidator)classInstance.Get("IssuerValidator");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIssuerValidator(IssuerValidator IssuerValidator) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("IssuerValidator", IssuerValidator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ITokenReplayCache getTokenReplayCache() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("TokenReplayCache");
            return new ITokenReplayCacheImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTokenReplayCache(ITokenReplayCache TokenReplayCache) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TokenReplayCache", TokenReplayCache == null ? null : TokenReplayCache.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SecurityKey getIssuerSigningKey() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("IssuerSigningKey");
            return new SecurityKey(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIssuerSigningKey(SecurityKey IssuerSigningKey) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("IssuerSigningKey", IssuerSigningKey == null ? null : IssuerSigningKey.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SecurityKey getTokenDecryptionKey() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("TokenDecryptionKey");
            return new SecurityKey(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTokenDecryptionKey(SecurityKey TokenDecryptionKey) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TokenDecryptionKey", TokenDecryptionKey == null ? null : TokenDecryptionKey.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SignatureValidator getSignatureValidator() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (SignatureValidator)classInstance.Get("SignatureValidator");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSignatureValidator(SignatureValidator SignatureValidator) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("SignatureValidator", SignatureValidator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TokenReader getTokenReader() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (TokenReader)classInstance.Get("TokenReader");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTokenReader(TokenReader TokenReader) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TokenReader", TokenReader);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TokenValidationParameters getActorValidationParameters() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ActorValidationParameters");
            return new TokenValidationParameters(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setActorValidationParameters(TokenValidationParameters ActorValidationParameters) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ActorValidationParameters", ActorValidationParameters == null ? null : ActorValidationParameters.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TypeValidator getTypeValidator() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (TypeValidator)classInstance.Get("TypeValidator");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTypeValidator(TypeValidator TypeValidator) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TypeValidator", TypeValidator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getAuthenticationType() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("AuthenticationType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAuthenticationType(java.lang.String AuthenticationType) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.FormatException, system.diagnostics.tracing.EventSourceException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("AuthenticationType", AuthenticationType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getNameClaimType() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("NameClaimType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setNameClaimType(java.lang.String NameClaimType) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.FormatException, system.diagnostics.tracing.EventSourceException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("NameClaimType", NameClaimType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getRoleClaimType() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("RoleClaimType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRoleClaimType(java.lang.String RoleClaimType) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.globalization.CultureNotFoundException, system.FormatException, system.diagnostics.tracing.EventSourceException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("RoleClaimType", RoleClaimType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getValidAudience() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("ValidAudience");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setValidAudience(java.lang.String ValidAudience) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ValidAudience", ValidAudience);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getValidIssuer() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("ValidIssuer");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setValidIssuer(java.lang.String ValidIssuer) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ValidIssuer", ValidIssuer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getClockSkew() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ClockSkew");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setClockSkew(TimeSpan ClockSkew) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.FormatException, system.IndexOutOfRangeException, system.diagnostics.tracing.EventSourceException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ClockSkew", ClockSkew == null ? null : ClockSkew.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}