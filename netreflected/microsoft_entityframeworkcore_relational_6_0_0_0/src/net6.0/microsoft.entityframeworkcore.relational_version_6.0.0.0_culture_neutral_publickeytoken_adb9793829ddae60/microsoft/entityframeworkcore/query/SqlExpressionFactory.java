/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.entityframeworkcore.query;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import microsoft.entityframeworkcore.query.SqlExpressionFactoryDependencies;
import microsoft.entityframeworkcore.query.sqlexpressions.CaseExpression;
import microsoft.entityframeworkcore.query.sqlexpressions.SqlExpression;
import microsoft.entityframeworkcore.query.sqlexpressions.CaseWhenClause;
import microsoft.entityframeworkcore.query.sqlexpressions.ExistsExpression;
import microsoft.entityframeworkcore.query.sqlexpressions.SelectExpression;
import microsoft.entityframeworkcore.query.sqlexpressions.InExpression;
import microsoft.entityframeworkcore.query.sqlexpressions.LikeExpression;
import microsoft.entityframeworkcore.metadata.IEntityType;
import microsoft.entityframeworkcore.metadata.IEntityTypeImplementation;
import microsoft.entityframeworkcore.query.sqlexpressions.TableExpressionBase;
import system.linq.expressions.Expression;
import microsoft.entityframeworkcore.query.sqlexpressions.SqlBinaryExpression;
import microsoft.entityframeworkcore.storage.RelationalTypeMapping;
import system.linq.expressions.ExpressionType;
import microsoft.entityframeworkcore.query.sqlexpressions.SqlConstantExpression;
import microsoft.entityframeworkcore.query.sqlexpressions.SqlFragmentExpression;
import microsoft.entityframeworkcore.query.sqlexpressions.SqlFunctionExpression;
import microsoft.entityframeworkcore.query.sqlexpressions.SqlUnaryExpression;


/**
 * The base .NET class managing Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory, Microsoft.EntityFrameworkCore.Relational, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory</a>
 */
public class SqlExpressionFactory extends NetObject  {
    /**
     * Fully assembly qualified name: Microsoft.EntityFrameworkCore.Relational, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60
     */
    public static final String assemblyFullName = "Microsoft.EntityFrameworkCore.Relational, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60";
    /**
     * Assembly name: Microsoft.EntityFrameworkCore.Relational
     */
    public static final String assemblyShortName = "Microsoft.EntityFrameworkCore.Relational";
    /**
     * Qualified class name: Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory
     */
    public static final String className = "Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public SqlExpressionFactory(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link SqlExpressionFactory}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link SqlExpressionFactory} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static SqlExpressionFactory cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new SqlExpressionFactory(from.getJCOInstance());
    }

    // Constructors section
    
    public SqlExpressionFactory() throws Throwable {
    }

    public SqlExpressionFactory(SqlExpressionFactoryDependencies dependencies) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(dependencies == null ? null : dependencies.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    
    // Methods section
    
    public CaseExpression Case(SqlExpression operand, CaseWhenClause... whenClauses) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCase = (JCObject)classInstance.Invoke("Case", operand == null ? null : operand.getJCOInstance(), toObjectFromArray(whenClauses));
            return new CaseExpression(objCase);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ExistsExpression Exists(SelectExpression subquery, boolean negated) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objExists = (JCObject)classInstance.Invoke("Exists", subquery == null ? null : subquery.getJCOInstance(), negated);
            return new ExistsExpression(objExists);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InExpression In(SqlExpression item, SelectExpression subquery, boolean negated) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objIn = (JCObject)classInstance.Invoke("In", item == null ? null : item.getJCOInstance(), subquery == null ? null : subquery.getJCOInstance(), negated);
            return new InExpression(objIn);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InExpression In(SqlExpression item, SqlExpression values, boolean negated) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objIn = (JCObject)classInstance.Invoke("In", item == null ? null : item.getJCOInstance(), values == null ? null : values.getJCOInstance(), negated);
            return new InExpression(objIn);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LikeExpression Like(SqlExpression match, SqlExpression pattern, SqlExpression escapeChar) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objLike = (JCObject)classInstance.Invoke("Like", match == null ? null : match.getJCOInstance(), pattern == null ? null : pattern.getJCOInstance(), escapeChar == null ? null : escapeChar.getJCOInstance());
            return new LikeExpression(objLike);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SelectExpression Select(IEntityType entityType, TableExpressionBase tableExpressionBase) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.collections.generic.KeyNotFoundException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSelect = (JCObject)classInstance.Invoke("Select", entityType == null ? null : entityType.getJCOInstance(), tableExpressionBase == null ? null : tableExpressionBase.getJCOInstance());
            return new SelectExpression(objSelect);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SelectExpression Select(IEntityType entityType, java.lang.String sql, Expression sqlArguments) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.collections.generic.KeyNotFoundException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSelect = (JCObject)classInstance.Invoke("Select", entityType == null ? null : entityType.getJCOInstance(), sql, sqlArguments == null ? null : sqlArguments.getJCOInstance());
            return new SelectExpression(objSelect);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SelectExpression Select(IEntityType entityType) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.collections.generic.KeyNotFoundException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSelect = (JCObject)classInstance.Invoke("Select", entityType == null ? null : entityType.getJCOInstance());
            return new SelectExpression(objSelect);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SelectExpression Select(SqlExpression projection) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.OutOfMemoryException, system.FormatException, system.RankException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSelect = (JCObject)classInstance.Invoke("Select", projection == null ? null : projection.getJCOInstance());
            return new SelectExpression(objSelect);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlBinaryExpression Add(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAdd = (JCObject)classInstance.Invoke("Add", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new SqlBinaryExpression(objAdd);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlBinaryExpression And(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAnd = (JCObject)classInstance.Invoke("And", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new SqlBinaryExpression(objAnd);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlBinaryExpression AndAlso(SqlExpression left, SqlExpression right) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAndAlso = (JCObject)classInstance.Invoke("AndAlso", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance());
            return new SqlBinaryExpression(objAndAlso);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlBinaryExpression Divide(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objDivide = (JCObject)classInstance.Invoke("Divide", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new SqlBinaryExpression(objDivide);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlBinaryExpression Equal(SqlExpression left, SqlExpression right) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objEqual = (JCObject)classInstance.Invoke("Equal", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance());
            return new SqlBinaryExpression(objEqual);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlBinaryExpression GreaterThan(SqlExpression left, SqlExpression right) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGreaterThan = (JCObject)classInstance.Invoke("GreaterThan", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance());
            return new SqlBinaryExpression(objGreaterThan);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlBinaryExpression GreaterThanOrEqual(SqlExpression left, SqlExpression right) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGreaterThanOrEqual = (JCObject)classInstance.Invoke("GreaterThanOrEqual", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance());
            return new SqlBinaryExpression(objGreaterThanOrEqual);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlBinaryExpression LessThan(SqlExpression left, SqlExpression right) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objLessThan = (JCObject)classInstance.Invoke("LessThan", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance());
            return new SqlBinaryExpression(objLessThan);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlBinaryExpression LessThanOrEqual(SqlExpression left, SqlExpression right) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objLessThanOrEqual = (JCObject)classInstance.Invoke("LessThanOrEqual", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance());
            return new SqlBinaryExpression(objLessThanOrEqual);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlBinaryExpression MakeBinary(ExpressionType operatorType, SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objMakeBinary = (JCObject)classInstance.Invoke("MakeBinary", operatorType == null ? null : operatorType.getJCOInstance(), left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new SqlBinaryExpression(objMakeBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlBinaryExpression Modulo(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objModulo = (JCObject)classInstance.Invoke("Modulo", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new SqlBinaryExpression(objModulo);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlBinaryExpression Multiply(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objMultiply = (JCObject)classInstance.Invoke("Multiply", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new SqlBinaryExpression(objMultiply);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlBinaryExpression NotEqual(SqlExpression left, SqlExpression right) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objNotEqual = (JCObject)classInstance.Invoke("NotEqual", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance());
            return new SqlBinaryExpression(objNotEqual);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlBinaryExpression Or(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objOr = (JCObject)classInstance.Invoke("Or", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new SqlBinaryExpression(objOr);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlBinaryExpression OrElse(SqlExpression left, SqlExpression right) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objOrElse = (JCObject)classInstance.Invoke("OrElse", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance());
            return new SqlBinaryExpression(objOrElse);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlBinaryExpression Subtract(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSubtract = (JCObject)classInstance.Invoke("Subtract", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new SqlBinaryExpression(objSubtract);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlConstantExpression Constant(NetObject value, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objConstant = (JCObject)classInstance.Invoke("Constant", value == null ? null : value.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new SqlConstantExpression(objConstant);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlExpression ApplyDefaultTypeMapping(SqlExpression sqlExpression) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.OutOfMemoryException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objApplyDefaultTypeMapping = (JCObject)classInstance.Invoke("ApplyDefaultTypeMapping", sqlExpression == null ? null : sqlExpression.getJCOInstance());
            return new SqlExpression(objApplyDefaultTypeMapping);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlExpression ApplyTypeMapping(SqlExpression sqlExpression, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.IndexOutOfRangeException, system.RankException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objApplyTypeMapping = (JCObject)classInstance.Invoke("ApplyTypeMapping", sqlExpression == null ? null : sqlExpression.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new SqlExpression(objApplyTypeMapping);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlFragmentExpression Fragment(java.lang.String sql) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFragment = (JCObject)classInstance.Invoke("Fragment", sql);
            return new SqlFragmentExpression(objFragment);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlFunctionExpression Coalesce(SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCoalesce = (JCObject)classInstance.Invoke("Coalesce", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new SqlFunctionExpression(objCoalesce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlFunctionExpression Function(SqlExpression instance, java.lang.String name, NetType returnType, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFunction = (JCObject)classInstance.Invoke("Function", instance == null ? null : instance.getJCOInstance(), name, returnType == null ? null : returnType.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new SqlFunctionExpression(objFunction);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlFunctionExpression Function(java.lang.String schema, java.lang.String name, NetType returnType, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFunction = (JCObject)classInstance.Invoke("Function", schema, name, returnType == null ? null : returnType.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new SqlFunctionExpression(objFunction);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlFunctionExpression Function(java.lang.String name, NetType returnType, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFunction = (JCObject)classInstance.Invoke("Function", name, returnType == null ? null : returnType.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new SqlFunctionExpression(objFunction);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlFunctionExpression NiladicFunction(SqlExpression instance, java.lang.String name, boolean nullable, boolean instancePropagatesNullability, NetType returnType, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objNiladicFunction = (JCObject)classInstance.Invoke("NiladicFunction", instance == null ? null : instance.getJCOInstance(), name, nullable, instancePropagatesNullability, returnType == null ? null : returnType.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new SqlFunctionExpression(objNiladicFunction);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlFunctionExpression NiladicFunction(java.lang.String name, boolean nullable, NetType returnType, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objNiladicFunction = (JCObject)classInstance.Invoke("NiladicFunction", name, nullable, returnType == null ? null : returnType.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new SqlFunctionExpression(objNiladicFunction);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlFunctionExpression NiladicFunction(java.lang.String schema, java.lang.String name, boolean nullable, NetType returnType, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objNiladicFunction = (JCObject)classInstance.Invoke("NiladicFunction", schema, name, nullable, returnType == null ? null : returnType.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new SqlFunctionExpression(objNiladicFunction);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlUnaryExpression Convert(SqlExpression operand, NetType type, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objConvert = (JCObject)classInstance.Invoke("Convert", operand == null ? null : operand.getJCOInstance(), type == null ? null : type.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new SqlUnaryExpression(objConvert);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlUnaryExpression IsNotNull(SqlExpression operand) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objIsNotNull = (JCObject)classInstance.Invoke("IsNotNull", operand == null ? null : operand.getJCOInstance());
            return new SqlUnaryExpression(objIsNotNull);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlUnaryExpression IsNull(SqlExpression operand) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objIsNull = (JCObject)classInstance.Invoke("IsNull", operand == null ? null : operand.getJCOInstance());
            return new SqlUnaryExpression(objIsNull);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlUnaryExpression MakeUnary(ExpressionType operatorType, SqlExpression operand, NetType type, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objMakeUnary = (JCObject)classInstance.Invoke("MakeUnary", operatorType == null ? null : operatorType.getJCOInstance(), operand == null ? null : operand.getJCOInstance(), type == null ? null : type.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new SqlUnaryExpression(objMakeUnary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlUnaryExpression Negate(SqlExpression operand) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objNegate = (JCObject)classInstance.Invoke("Negate", operand == null ? null : operand.getJCOInstance());
            return new SqlUnaryExpression(objNegate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlUnaryExpression Not(SqlExpression operand) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objNot = (JCObject)classInstance.Invoke("Not", operand == null ? null : operand.getJCOInstance());
            return new SqlUnaryExpression(objNot);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RelationalTypeMapping FindMapping(NetType type) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindMapping = (JCObject)classInstance.Invoke("FindMapping", type == null ? null : type.getJCOInstance());
            return new RelationalTypeMapping(objFindMapping);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public RelationalTypeMapping GetTypeMappingForValue(NetObject value) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetTypeMappingForValue = (JCObject)classInstance.Invoke("GetTypeMappingForValue", value == null ? null : value.getJCOInstance());
            return new RelationalTypeMapping(objGetTypeMappingForValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}